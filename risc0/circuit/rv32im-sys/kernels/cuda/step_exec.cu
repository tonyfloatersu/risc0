// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "extern.cuh"

__device__ void step_exec(
    void* ctx, uint32_t steps, uint32_t cycle, Fp* arg0, Fp* arg1, Fp* arg2, Fp* arg3, Fp* arg4) {
  uint32_t mask = steps - 1;
  Fp extern_args[96];
  Fp extern_outs[32];
  // loc(unknown)
  Fp x0(56361032);
  // loc(unknown)
  Fp x1(65280);
  // loc(unknown)
  Fp x2(8388608);
  // loc(unknown)
  Fp x3(56361024);
  // loc(unknown)
  Fp x4(54525952);
  // loc(unknown)
  Fp x5(219862);
  // loc(unknown)
  Fp x6(56361023);
  // loc(unknown)
  Fp x7(47);
  // loc(unknown)
  Fp x8(56360975);
  // loc(unknown)
  Fp x9(56360967);
  // loc(unknown)
  Fp x10(2013235201);
  // loc(unknown)
  Fp x11(32768);
  // loc(unknown)
  Fp x12(2013204481);
  // loc(unknown)
  Fp x13(2013143041);
  // loc(unknown)
  Fp x14(8192);
  // loc(unknown)
  Fp x15(2013020161);
  // loc(unknown)
  Fp x16(4096);
  // loc(unknown)
  Fp x17(2012774401);
  // loc(unknown)
  Fp x18(2048);
  // loc(unknown)
  Fp x19(2012282881);
  // loc(unknown)
  Fp x20(2011299841);
  // loc(unknown)
  Fp x21(512);
  // loc(unknown)
  Fp x22(2009333761);
  // loc(unknown)
  Fp x23(1024);
  // loc(unknown)
  Fp x24(50331661);
  // loc(unknown)
  Fp x25(50331660);
  // loc(unknown)
  Fp x26(50331586);
  // loc(unknown)
  Fp x27(50331585);
  // loc(unknown)
  Fp x28(50331584);
  // loc(unknown)
  Fp x29(50331662);
  // loc(unknown)
  Fp x30(50331658);
  // loc(unknown)
  Fp x31(50331659);
  // loc(unknown)
  Fp x32(50331653);
  // loc(unknown)
  Fp x33(115);
  // loc(unknown)
  Fp x34(131070);
  // loc(unknown)
  Fp x35(131072);
  // loc(unknown)
  Fp x36(31);
  // loc(unknown)
  Fp x37(192);
  // loc(unknown)
  Fp x38(35);
  // loc(unknown)
  Fp x39(4194304);
  // loc(unknown)
  Fp x40(16384);
  // loc(unknown)
  Fp x41(23);
  // loc(unknown)
  Fp x42(55);
  // loc(unknown)
  Fp x43(103);
  // loc(unknown)
  Fp x44(111);
  // loc(unknown)
  Fp x45(99);
  // loc(unknown)
  Fp x46(240);
  // loc(unknown)
  Fp x47(19);
  // loc(unknown)
  Fp x48(51);
  // loc(unknown)
  Fp x49(465814468);
  // loc(unknown)
  Fp x50(1996488705);
  // loc(unknown)
  Fp x51(50331648);
  // loc(unknown)
  Fp x52(248);
  // loc(unknown)
  Fp x53(127);
  // loc(unknown)
  Fp x54(48);
  // loc(unknown)
  Fp x55(64);
  // loc(unknown)
  Fp x56(1981808641);
  // loc(unknown)
  Fp x57(1006632961);
  // loc(unknown)
  Fp x58(1761607681);
  // loc(unknown)
  Fp x59(1887436801);
  // loc(unknown)
  Fp x60(96);
  // loc(unknown)
  Fp x61(32);
  // loc(unknown)
  Fp x62(1950351361);
  // loc(unknown)
  Fp x63(1997537281);
  // loc(unknown)
  Fp x64(128);
  // loc(unknown)
  Fp x65(16);
  // loc(unknown)
  Fp x66(9);
  // loc(unknown)
  Fp x67(8);
  // loc(unknown)
  Fp x68(7);
  // loc(unknown)
  Fp x69(6);
  // loc(unknown)
  Fp x70(5);
  // loc(unknown)
  Fp x71(15);
  // loc(unknown)
  Fp x72(14);
  // loc(unknown)
  Fp x73(13);
  // loc(unknown)
  Fp x74(12);
  // loc(unknown)
  Fp x75(11);
  // loc(unknown)
  Fp x76(10);
  // loc(unknown)
  Fp x77(67108864);
  // loc(unknown)
  Fp x78(1509949441);
  // loc(unknown)
  Fp x79(3);
  // loc(unknown)
  Fp x80(65536);
  // loc(unknown)
  Fp x81(4);
  // loc(unknown)
  Fp x82(16777216);
  // loc(unknown)
  Fp x83(56284855);
  // loc(unknown)
  Fp x84(56284854);
  // loc(unknown)
  Fp x85(56284853);
  // loc(unknown)
  Fp x86(56284852);
  // loc(unknown)
  Fp x87(56284851);
  // loc(unknown)
  Fp x88(56284850);
  // loc(unknown)
  Fp x89(56284849);
  // loc(unknown)
  Fp x90(56284848);
  // loc(unknown)
  Fp x91(2013265919);
  // loc(unknown)
  Fp x92(2013265920);
  // loc(unknown)
  Fp x93(256);
  // loc(unknown)
  Fp x94(2005401601);
  // loc(unknown)
  Fp x95(255);
  // loc(unknown)
  Fp x96(2);
  // loc(unknown)
  Fp x97(254);
  // loc(unknown)
  Fp x98(0);
  // loc(unknown)
  Fp x99(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:25))
  auto x100 = arg0[2 * steps + ((cycle - 0) & mask)];
  assert(x100 != Fp::invalid());
  if (x100 != 0) {
    // loc("Top/Code/Mux/1(SetupInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x101 = arg0[9 * steps + ((cycle - 0) & mask)];
    assert(x101 != Fp::invalid());
    // loc("Top/Code/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":17:75))
    auto x102 = arg0[2 * steps + ((cycle - 1) & mask)];
    assert(x102 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":17:17)
    auto x103 = x99 - x102;
    if (x103 != 0) {
      // loc("zirgen/components/bytes.cpp":21:3)
      {
        auto& reg = arg2[3 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":22:3)
      {
        auto& reg = arg2[4 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
    // loc("zirgen/components/bytes.cpp":117:17)
    auto x104 = x99 - x103;
    if (x104 != 0) {
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x105 = arg2[44 * steps + ((cycle - 1) & mask)];
      assert(x105 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x106 = arg2[43 * steps + ((cycle - 1) & mask)];
      assert(x106 != Fp::invalid());
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x107 = x105 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x108 = (x107 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x109 = x99 - x108;
        if (x109 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x106);
            reg = x106;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x110 = x105 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x110);
            reg = x110;
          }
        }
        if (x108 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x111 = x106 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x111);
            reg = x111;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x112 = arg2[3 * steps + ((cycle - 0) & mask)];
      assert(x112 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x113 = arg2[4 * steps + ((cycle - 0) & mask)];
      assert(x113 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x114 = x112 - x106;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x115 = x113 - x105;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x116 = x114 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x117 = x114 * x116;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x117 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x118 = x115 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x119 = x114 * x118;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x119 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x120 = x115 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x121 = x116 * x120;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x121 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x122 = arg2[4 * steps + ((cycle - 0) & mask)];
    assert(x122 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x123 = arg2[3 * steps + ((cycle - 0) & mask)];
    assert(x123 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x124 = x122 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x125 = (x124 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x126 = x99 - x125;
      if (x126 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x123);
          reg = x123;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x127 = x122 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x127);
          reg = x127;
        }
      }
      if (x125 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x128 = x123 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x128);
          reg = x128;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x129 = arg2[5 * steps + ((cycle - 0) & mask)];
    assert(x129 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x130 = arg2[6 * steps + ((cycle - 0) & mask)];
    assert(x130 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x131 = x129 - x123;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x132 = x130 - x122;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x133 = x131 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x134 = x131 * x133;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x134 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x135 = x132 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x136 = x131 * x135;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x136 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x137 = x132 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x138 = x133 * x137;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x138 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x139 = x130 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x140 = (x139 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x141 = x99 - x140;
      if (x141 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x129);
          reg = x129;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x142 = x130 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x142);
          reg = x142;
        }
      }
      if (x140 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x143 = x129 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x143);
          reg = x143;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x144 = arg2[7 * steps + ((cycle - 0) & mask)];
    assert(x144 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x145 = arg2[8 * steps + ((cycle - 0) & mask)];
    assert(x145 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x146 = x144 - x129;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x147 = x145 - x130;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x148 = x146 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x149 = x146 * x148;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x149 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x150 = x147 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x151 = x146 * x150;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x151 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x152 = x147 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x153 = x148 * x152;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x153 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x154 = x145 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x155 = (x154 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x156 = x99 - x155;
      if (x156 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x144);
          reg = x144;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x157 = x145 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x157);
          reg = x157;
        }
      }
      if (x155 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x158 = x144 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x158);
          reg = x158;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x159 = arg2[10 * steps + ((cycle - 0) & mask)];
    assert(x159 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x160 = arg2[9 * steps + ((cycle - 0) & mask)];
    assert(x160 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x161 = x159 - x145;
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x162 = x160 - x144;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x163 = x162 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x164 = x162 * x163;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x164 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x165 = x161 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x166 = x162 * x165;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x166 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x167 = x161 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x168 = x163 * x167;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x168 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x169 = x159 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x170 = (x169 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x171 = x99 - x170;
      if (x171 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x160);
          reg = x160;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x172 = x159 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x172);
          reg = x172;
        }
      }
      if (x170 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x173 = x160 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x173);
          reg = x173;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x174 = arg2[11 * steps + ((cycle - 0) & mask)];
    assert(x174 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x175 = arg2[12 * steps + ((cycle - 0) & mask)];
    assert(x175 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x176 = x174 - x160;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x177 = x175 - x159;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x178 = x176 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x179 = x176 * x178;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x179 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x180 = x177 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x181 = x176 * x180;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x181 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x182 = x177 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x183 = x178 * x182;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x183 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x184 = x175 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x185 = (x184 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x186 = x99 - x185;
      if (x186 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x174);
          reg = x174;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x187 = x175 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x187);
          reg = x187;
        }
      }
      if (x185 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x188 = x174 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x188);
          reg = x188;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x189 = arg2[13 * steps + ((cycle - 0) & mask)];
    assert(x189 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x190 = arg2[14 * steps + ((cycle - 0) & mask)];
    assert(x190 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x191 = x189 - x174;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x192 = x190 - x175;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x193 = x191 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x194 = x191 * x193;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x194 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x195 = x192 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x196 = x191 * x195;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x196 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x197 = x192 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x198 = x193 * x197;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x198 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x199 = x190 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x200 = (x199 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x201 = x99 - x200;
      if (x201 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x189);
          reg = x189;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x202 = x190 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x202);
          reg = x202;
        }
      }
      if (x200 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x203 = x189 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x203);
          reg = x203;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x204 = arg2[15 * steps + ((cycle - 0) & mask)];
    assert(x204 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x205 = arg2[16 * steps + ((cycle - 0) & mask)];
    assert(x205 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x206 = x204 - x189;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x207 = x205 - x190;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x208 = x206 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x209 = x206 * x208;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x209 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x210 = x207 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x211 = x206 * x210;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x211 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x212 = x207 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x213 = x208 * x212;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x213 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x214 = x205 - x97;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x215 = (x214 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x216 = x99 - x215;
      if (x216 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x204);
          reg = x204;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x217 = x205 + x96;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x217);
          reg = x217;
        }
      }
      if (x215 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x218 = x204 + x99;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x218);
          reg = x218;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x219 = arg2[17 * steps + ((cycle - 0) & mask)];
    assert(x219 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x220 = arg2[18 * steps + ((cycle - 0) & mask)];
    assert(x220 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x221 = x219 - x204;
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x222 = x220 - x205;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x223 = x221 - x99;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x224 = x221 * x223;
    // loc("zirgen/components/bytes.cpp":48:7)
    assert(x224 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x225 = x222 + x97;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x226 = x221 * x225;
    // loc("zirgen/components/bytes.cpp":51:7)
    assert(x226 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x227 = x222 - x96;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x228 = x223 * x227;
    // loc("zirgen/components/bytes.cpp":54:7)
    assert(x228 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    if (x101 != 0) {
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = arg2[43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = arg2[44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
    // loc("zirgen/components/bytes.cpp":130:16)
    auto x229 = x99 - x101;
    if (x229 != 0) {
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x230 = x220 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x231 = (x230 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x232 = x99 - x231;
        if (x232 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x219);
            reg = x219;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x233 = x220 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x233);
            reg = x233;
          }
        }
        if (x231 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x234 = x219 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x234);
            reg = x234;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x235 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x235 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x236 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x236 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x237 = x235 - x219;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x238 = x236 - x220;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x239 = x237 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x240 = x237 * x239;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x240 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x241 = x238 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x242 = x237 * x241;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x242 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x243 = x238 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x244 = x239 * x243;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x244 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x245 = x236 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x246 = (x245 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x247 = x99 - x246;
        if (x247 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x235);
            reg = x235;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x248 = x236 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x248);
            reg = x248;
          }
        }
        if (x246 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x249 = x235 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x249);
            reg = x249;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x250 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x250 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x251 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x251 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x252 = x250 - x235;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x253 = x251 - x236;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x254 = x252 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x255 = x252 * x254;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x255 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x256 = x253 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x257 = x252 * x256;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x257 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x258 = x253 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x259 = x254 * x258;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x259 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x260 = x251 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x261 = (x260 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x262 = x99 - x261;
        if (x262 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x250);
            reg = x250;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x263 = x251 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x263);
            reg = x263;
          }
        }
        if (x261 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x264 = x250 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x264);
            reg = x264;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x265 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x265 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x266 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x266 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x267 = x265 - x250;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x268 = x266 - x251;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x269 = x267 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x270 = x267 * x269;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x270 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x271 = x268 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x272 = x267 * x271;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x272 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x273 = x268 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x274 = x269 * x273;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x274 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x275 = x266 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x276 = (x275 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x277 = x99 - x276;
        if (x277 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x265);
            reg = x265;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x278 = x266 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x278);
            reg = x278;
          }
        }
        if (x276 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x279 = x265 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x279);
            reg = x279;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x280 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x280 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x281 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x281 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x282 = x280 - x265;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x283 = x281 - x266;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x284 = x282 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x285 = x282 * x284;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x285 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x286 = x283 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x287 = x282 * x286;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x287 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x288 = x283 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x289 = x284 * x288;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x289 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x290 = x281 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x291 = (x290 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x292 = x99 - x291;
        if (x292 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x280);
            reg = x280;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x293 = x281 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x293);
            reg = x293;
          }
        }
        if (x291 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x294 = x280 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x294);
            reg = x294;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x295 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x295 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x296 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x296 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x297 = x295 - x280;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x298 = x296 - x281;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x299 = x297 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x300 = x297 * x299;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x300 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x301 = x298 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x302 = x297 * x301;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x302 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x303 = x298 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x304 = x299 * x303;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x304 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x305 = x296 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x306 = (x305 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x307 = x99 - x306;
        if (x307 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x295);
            reg = x295;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x308 = x296 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x308);
            reg = x308;
          }
        }
        if (x306 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x309 = x295 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x309);
            reg = x309;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x310 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x310 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x311 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x311 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x312 = x310 - x295;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x313 = x311 - x296;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x314 = x312 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x315 = x312 * x314;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x315 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x316 = x313 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x317 = x312 * x316;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x317 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x318 = x313 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x319 = x314 * x318;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x319 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x320 = x311 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x321 = (x320 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x322 = x99 - x321;
        if (x322 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x310);
            reg = x310;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x323 = x311 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x323);
            reg = x323;
          }
        }
        if (x321 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x324 = x310 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x324);
            reg = x324;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x325 = arg2[31 * steps + ((cycle - 0) & mask)];
      assert(x325 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x326 = arg2[32 * steps + ((cycle - 0) & mask)];
      assert(x326 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x327 = x325 - x310;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x328 = x326 - x311;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x329 = x327 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x330 = x327 * x329;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x330 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x331 = x328 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x332 = x327 * x331;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x332 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x333 = x328 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x334 = x329 * x333;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x334 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x335 = x326 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x336 = (x335 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x337 = x99 - x336;
        if (x337 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x325);
            reg = x325;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x338 = x326 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x338);
            reg = x338;
          }
        }
        if (x336 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x339 = x325 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x339);
            reg = x339;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x340 = arg2[33 * steps + ((cycle - 0) & mask)];
      assert(x340 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x341 = arg2[34 * steps + ((cycle - 0) & mask)];
      assert(x341 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x342 = x340 - x325;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x343 = x341 - x326;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x344 = x342 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x345 = x342 * x344;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x345 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x346 = x343 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x347 = x342 * x346;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x347 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x348 = x343 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x349 = x344 * x348;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x349 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x350 = x341 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x351 = (x350 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x352 = x99 - x351;
        if (x352 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x340);
            reg = x340;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x353 = x341 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x353);
            reg = x353;
          }
        }
        if (x351 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x354 = x340 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x354);
            reg = x354;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x355 = arg2[35 * steps + ((cycle - 0) & mask)];
      assert(x355 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x356 = arg2[36 * steps + ((cycle - 0) & mask)];
      assert(x356 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x357 = x355 - x340;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x358 = x356 - x341;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x359 = x357 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x360 = x357 * x359;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x360 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x361 = x358 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x362 = x357 * x361;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x362 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x363 = x358 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x364 = x359 * x363;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x364 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x365 = x356 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x366 = (x365 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x367 = x99 - x366;
        if (x367 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x355);
            reg = x355;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x368 = x356 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x368);
            reg = x368;
          }
        }
        if (x366 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x369 = x355 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x369);
            reg = x369;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x370 = arg2[37 * steps + ((cycle - 0) & mask)];
      assert(x370 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x371 = arg2[38 * steps + ((cycle - 0) & mask)];
      assert(x371 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x372 = x370 - x355;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x373 = x371 - x356;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x374 = x372 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x375 = x372 * x374;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x375 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x376 = x373 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x377 = x372 * x376;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x377 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x378 = x373 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x379 = x374 * x378;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x379 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x380 = x371 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x381 = (x380 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x382 = x99 - x381;
        if (x382 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x370);
            reg = x370;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x383 = x371 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x383);
            reg = x383;
          }
        }
        if (x381 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x384 = x370 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x384);
            reg = x384;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x385 = arg2[39 * steps + ((cycle - 0) & mask)];
      assert(x385 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x386 = arg2[40 * steps + ((cycle - 0) & mask)];
      assert(x386 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x387 = x385 - x370;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x388 = x386 - x371;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x389 = x387 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x390 = x387 * x389;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x390 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x391 = x388 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x392 = x387 * x391;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x392 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x393 = x388 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x394 = x389 * x393;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x394 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x395 = x386 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x396 = (x395 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x397 = x99 - x396;
        if (x397 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x385);
            reg = x385;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x398 = x386 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x398);
            reg = x398;
          }
        }
        if (x396 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x399 = x385 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x399);
            reg = x399;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x400 = arg2[41 * steps + ((cycle - 0) & mask)];
      assert(x400 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x401 = arg2[42 * steps + ((cycle - 0) & mask)];
      assert(x401 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x402 = x400 - x385;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x403 = x401 - x386;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x404 = x402 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x405 = x402 * x404;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x405 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x406 = x403 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x407 = x402 * x406;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x407 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x408 = x403 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x409 = x404 * x408;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x409 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x410 = x401 - x97;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x411 = (x410 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x412 = x99 - x411;
        if (x412 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = arg2[43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x400);
            reg = x400;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x413 = x401 + x96;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = arg2[44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x413);
            reg = x413;
          }
        }
        if (x411 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x414 = x400 + x99;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = arg2[43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x414);
            reg = x414;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = arg2[44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x415 = arg2[43 * steps + ((cycle - 0) & mask)];
      assert(x415 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x416 = arg2[44 * steps + ((cycle - 0) & mask)];
      assert(x416 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x417 = x415 - x400;
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x418 = x416 - x401;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x419 = x417 - x99;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x420 = x417 * x419;
      // loc("zirgen/components/bytes.cpp":48:7)
      assert(x420 == 0 && "eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x421 = x418 + x97;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x422 = x417 * x421;
      // loc("zirgen/components/bytes.cpp":51:7)
      assert(x422 == 0 && "eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x423 = x418 - x96;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x424 = x419 * x423;
      // loc("zirgen/components/bytes.cpp":54:7)
      assert(x424 == 0 && "eqz failed at: zirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:25))
  auto x425 = arg0[4 * steps + ((cycle - 0) & mask)];
  assert(x425 != Fp::invalid());
  if (x425 != 0) {
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x426 = arg0[10 * steps + ((cycle - 0) & mask)];
    assert(x426 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x427 = Fp(x426.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x427);
        reg = x427;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x428 = arg2[15 * steps + ((cycle - 0) & mask)];
    assert(x428 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x429 = x426 - x428;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x430 = x429 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x431 = arg0[11 * steps + ((cycle - 0) & mask)];
    assert(x431 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x432 = Fp(x431.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x432);
        reg = x432;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x433 = arg2[17 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x434 = x431 - x433;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x435 = x434 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x436 = arg0[0 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
    auto x437 = arg0[9 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x438 = arg2[16 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x439 = arg2[18 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x428);
      reg = x428;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    {
      extern_args[0] = x437;
      extern_args[1] = x428;
      extern_args[2] = x438;
      extern_args[3] = x433;
      extern_args[4] = x439;
      extern_args[5] = x98;
      extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x440 = arg2[117 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x441 = arg2[118 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x442 = arg2[119 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x443 = arg2[120 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = arg2[114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = arg2[115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = arg2[116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x98);
      reg = x98;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x444 = arg0[12 * steps + ((cycle - 0) & mask)];
    assert(x444 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x445 = Fp(x444.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x445);
        reg = x445;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x446 = arg2[19 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x447 = x444 - x446;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x448 = x447 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x449 = arg0[13 * steps + ((cycle - 0) & mask)];
    assert(x449 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x450 = Fp(x449.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x450);
        reg = x450;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x451 = arg2[21 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x452 = x449 - x451;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x453 = x452 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x454 = arg2[20 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x455 = arg2[22 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":45:44)
    auto x456 = x437 + x99;
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x446);
      reg = x446;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    {
      extern_args[0] = x456;
      extern_args[1] = x446;
      extern_args[2] = x454;
      extern_args[3] = x451;
      extern_args[4] = x455;
      extern_args[5] = x98;
      extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x457 = arg2[124 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x458 = arg2[125 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x459 = arg2[126 * steps + ((cycle - 0) & mask)];
    assert(x459 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x460 = arg2[127 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = arg2[121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = arg2[122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = arg2[123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x98);
      reg = x98;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x458);
      reg = x458;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x461 = arg0[14 * steps + ((cycle - 0) & mask)];
    assert(x461 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x462 = Fp(x461.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x462);
        reg = x462;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x463 = arg2[23 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x464 = x461 - x463;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x465 = x464 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x466 = arg0[15 * steps + ((cycle - 0) & mask)];
    assert(x466 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x467 = Fp(x466.asUInt32() & x95.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = arg2[25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x467);
        reg = x467;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x468 = arg2[25 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x469 = x466 - x468;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x470 = x469 * x94;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = arg2[26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x471 = arg2[24 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x472 = arg2[26 * steps + ((cycle - 0) & mask)];
    assert(x472 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":45:44)
    auto x473 = x437 + x96;
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x463);
      reg = x463;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    {
      extern_args[0] = x473;
      extern_args[1] = x463;
      extern_args[2] = x471;
      extern_args[3] = x468;
      extern_args[4] = x472;
      extern_args[5] = x98;
      extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x474 = arg2[131 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x475 = arg2[132 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x476 = arg2[133 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x477 = arg2[134 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = arg2[128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = arg2[129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = arg2[130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x98);
      reg = x98;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = arg2[134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:25))
  auto x478 = arg0[5 * steps + ((cycle - 0) & mask)];
  assert(x478 != Fp::invalid());
  if (x478 != 0) {
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x479 = arg0[10 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x480 = arg0[11 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x481 = arg0[12 * steps + ((cycle - 0) & mask)];
    assert(x481 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x482 = arg0[9 * steps + ((cycle - 0) & mask)];
    assert(x482 != Fp::invalid());
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x483 = arg0[0 * steps + ((cycle - 0) & mask)];
    assert(x483 != Fp::invalid());
    if (x479 != 0) {
      {
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x484 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x484 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x485 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x485 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x486 = x485 * x96;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x487 = x484 + x486;
      // loc("./zirgen/components/onehot.h":40:8)
      assert(x487 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":69:5)
      {
        auto& reg = arg2[176 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      if (x482 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x488 = arg1[36];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x489 = arg1[37];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x490 = arg1[38];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x491 = arg1[39];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x488);
          reg = x488;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x489);
          reg = x489;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x490);
          reg = x490;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x491);
          reg = x491;
        }
        {
          extern_args[0] = x90;
          extern_args[1] = x488;
          extern_args[2] = x489;
          extern_args[3] = x490;
          extern_args[4] = x491;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x492 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x492 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x493 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x493 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x494 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x494 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x495 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x495 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x492);
          reg = x492;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x493);
          reg = x493;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x494);
          reg = x494;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x495);
          reg = x495;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x496 = arg1[40];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x497 = arg1[41];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x498 = arg1[42];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x499 = arg1[43];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x496);
          reg = x496;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x497);
          reg = x497;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x498);
          reg = x498;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        {
          extern_args[0] = x89;
          extern_args[1] = x496;
          extern_args[2] = x497;
          extern_args[3] = x498;
          extern_args[4] = x499;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x500 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x500 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x501 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x501 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x502 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x502 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x503 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x503 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x500);
          reg = x500;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x501);
          reg = x501;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x502);
          reg = x502;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x503);
          reg = x503;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x504 = arg1[44];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x505 = arg1[45];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x506 = arg1[46];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x507 = arg1[47];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x505);
          reg = x505;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x506);
          reg = x506;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x507);
          reg = x507;
        }
        {
          extern_args[0] = x88;
          extern_args[1] = x504;
          extern_args[2] = x505;
          extern_args[3] = x506;
          extern_args[4] = x507;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x508 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x508 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x509 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x509 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x510 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x510 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x511 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x511 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x508);
          reg = x508;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x509);
          reg = x509;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x510);
          reg = x510;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x512 = arg1[48];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x513 = arg1[49];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x514 = arg1[50];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x515 = arg1[51];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x512);
          reg = x512;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x513);
          reg = x513;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x514);
          reg = x514;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        {
          extern_args[0] = x87;
          extern_args[1] = x512;
          extern_args[2] = x513;
          extern_args[3] = x514;
          extern_args[4] = x515;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x516 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x516 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x517 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x517 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x518 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x518 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x519 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x519 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x516);
          reg = x516;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x517);
          reg = x517;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x518);
          reg = x518;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":77:17)
      auto x520 = x99 - x482;
      if (x520 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x521 = arg1[52];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x522 = arg1[53];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x523 = arg1[54];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x524 = arg1[55];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x521);
          reg = x521;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        {
          extern_args[0] = x86;
          extern_args[1] = x521;
          extern_args[2] = x522;
          extern_args[3] = x523;
          extern_args[4] = x524;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x525 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x525 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x526 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x526 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x527 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x527 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x528 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x528 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x529 = arg1[56];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x530 = arg1[57];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x531 = arg1[58];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x532 = arg1[59];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x529);
          reg = x529;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x530);
          reg = x530;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x532);
          reg = x532;
        }
        {
          extern_args[0] = x85;
          extern_args[1] = x529;
          extern_args[2] = x530;
          extern_args[3] = x531;
          extern_args[4] = x532;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x533 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x533 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x534 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x534 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x535 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x535 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x536 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x536 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x533);
          reg = x533;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x537 = arg1[60];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x538 = arg1[61];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x539 = arg1[62];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x540 = arg1[63];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x538);
          reg = x538;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x540);
          reg = x540;
        }
        {
          extern_args[0] = x84;
          extern_args[1] = x537;
          extern_args[2] = x538;
          extern_args[3] = x539;
          extern_args[4] = x540;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x541 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x541 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x542 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x542 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x543 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x543 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x544 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x544 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x541);
          reg = x541;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x542);
          reg = x542;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x543);
          reg = x543;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x544);
          reg = x544;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x545 = arg1[64];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x546 = arg1[65];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x547 = arg1[66];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x548 = arg1[67];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x545);
          reg = x545;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x546);
          reg = x546;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x547);
          reg = x547;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x548);
          reg = x548;
        }
        {
          extern_args[0] = x83;
          extern_args[1] = x545;
          extern_args[2] = x546;
          extern_args[3] = x547;
          extern_args[4] = x548;
          extern_args[5] = x98;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x549 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x549 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x550 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x550 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x551 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x551 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x552 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x552 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x549);
          reg = x549;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x550);
          reg = x550;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x551);
          reg = x551;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x552);
          reg = x552;
        }
      }
      {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x553 = arg1[32];
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":84:28)
        auto x554 = Fp(x553.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x554);
          reg = x554;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x555 = arg1[32];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x556 = arg1[33];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x557 = arg1[34];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x558 = arg1[35];
      // loc("Top/mux(Mux)/reset(ResetStep)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x559 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x559 != Fp::invalid());
      // loc("./zirgen/components/u32.h":25:12)
      auto x560 = x556 * x93;
      // loc("./zirgen/components/u32.h":26:12)
      auto x561 = x557 * x80;
      // loc("./zirgen/components/u32.h":27:12)
      auto x562 = x558 * x82;
      // loc("./zirgen/components/u32.h":24:12)
      auto x563 = x555 + x560;
      // loc("./zirgen/components/u32.h":24:12)
      auto x564 = x563 + x561;
      // loc("./zirgen/components/u32.h":24:12)
      auto x565 = x564 + x562;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":85:13)
      auto x566 = x565 - x559;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x567 = x566 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x568 = Fp(x567.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x568);
          reg = x568;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x569 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x569 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x570 = x567 - x569;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x571 = x570 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x572 = Fp(x571.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x572);
          reg = x572;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x573 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x573 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x574 = x571 - x573;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x575 = x574 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x576 = Fp(x575.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x576);
          reg = x576;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x577 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x577 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x578 = x575 - x577;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x579 = x578 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x580 = Fp(x579.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x580);
          reg = x580;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x581 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x581 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x582 = x579 - x581;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x583 = x582 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x583);
        reg = x583;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x584 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x584 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x585 = x99 - x584;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x586 = x584 * x585;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x586);
        reg = x586;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x587 = x96 - x584;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x588 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x588 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x589 = x588 * x587;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x589 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":87:19)
      auto x590 = x569 * x78;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x591 = Fp(x590.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x591);
          reg = x591;
        }
      }
    }
    if (x480 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x592 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x592 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x592);
        reg = x592;
      }
      {
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x593 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x593 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x594 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x594 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x595 = x594 * x96;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x596 = x593 + x595;
      // loc("./zirgen/components/onehot.h":40:8)
      assert(x596 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      {
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x597 = arg2[6 * steps + ((cycle - 1) & mask)];
      assert(x597 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x598 = arg2[7 * steps + ((cycle - 1) & mask)];
      assert(x598 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x599 = arg2[70 * steps + ((cycle - 1) & mask)];
      assert(x599 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x600 = arg2[71 * steps + ((cycle - 1) & mask)];
      assert(x600 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x601 = arg2[8 * steps + ((cycle - 1) & mask)];
      assert(x601 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":38:10)
      auto x602 = x598 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":40:10)
      auto x603 = x599 * x82;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":41:10)
      auto x604 = x600 * x77;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":39:10)
      auto x605 = x601 * x80;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
      auto x606 = x597 + x602;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
      auto x607 = x606 + x605;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
      auto x608 = x607 + x603;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
      auto x609 = x608 + x604;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
      auto x610 = x609 - x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x611 = x610 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x612 = Fp(x611.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x612);
          reg = x612;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x613 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x613 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x614 = x611 - x613;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x615 = x614 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x616 = Fp(x615.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x616);
          reg = x616;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x617 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x617 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x618 = x615 - x617;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x619 = x618 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x620 = Fp(x619.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x620);
          reg = x620;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x621 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x621 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x622 = x619 - x621;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x623 = x622 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x624 = Fp(x623.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x624);
          reg = x624;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x625 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x625 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x626 = x623 - x625;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x627 = x626 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x627);
        reg = x627;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x628 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x628 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x629 = x99 - x628;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x630 = x628 * x629;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x630);
        reg = x630;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x631 = x96 - x628;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x632 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x632 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x633 = x632 * x631;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x633 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      if (x482 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x634 = arg2[102 * steps + ((cycle - 1) & mask)];
        assert(x634 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x635 = arg2[103 * steps + ((cycle - 1) & mask)];
        assert(x635 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x636 = arg2[104 * steps + ((cycle - 1) & mask)];
        assert(x636 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x637 = arg2[105 * steps + ((cycle - 1) & mask)];
        assert(x637 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x638 = arg2[106 * steps + ((cycle - 1) & mask)];
        assert(x638 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x639 = arg2[107 * steps + ((cycle - 1) & mask)];
        assert(x639 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x640 = arg2[108 * steps + ((cycle - 1) & mask)];
        assert(x640 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x641 = arg2[109 * steps + ((cycle - 1) & mask)];
        assert(x641 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x642 = arg2[110 * steps + ((cycle - 1) & mask)];
        assert(x642 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x643 = arg2[111 * steps + ((cycle - 1) & mask)];
        assert(x643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x644 = arg2[112 * steps + ((cycle - 1) & mask)];
        assert(x644 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x645 = arg2[113 * steps + ((cycle - 1) & mask)];
        assert(x645 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x646 = arg2[114 * steps + ((cycle - 1) & mask)];
        assert(x646 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x647 = arg2[115 * steps + ((cycle - 1) & mask)];
        assert(x647 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x648 = arg2[116 * steps + ((cycle - 1) & mask)];
        assert(x648 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x649 = x635 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x650 = x636 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x651 = x637 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x652 = x638 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x653 = x639 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x654 = x640 * x68;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x655 = x641 * x67;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x656 = x642 * x66;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x657 = x643 * x76;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x658 = x644 * x75;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x659 = x645 * x74;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x660 = x646 * x73;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x661 = x647 * x72;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x662 = x648 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x663 = x634 + x649;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x664 = x663 + x650;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x665 = x664 + x651;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x666 = x665 + x652;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x667 = x666 + x653;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x668 = x667 + x654;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x669 = x668 + x655;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x670 = x669 + x656;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x671 = x670 + x657;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x672 = x671 + x658;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x673 = x672 + x659;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x674 = x673 + x660;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x675 = x674 + x661;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x676 = x675 + x662;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":97:42)
        auto x677 = x676 - x71;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":97:42)
        assert(x677 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:97");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/sys_exit_code(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":99:61))
        auto x678 = arg2[117 * steps + ((cycle - 1) & mask)];
        assert(x678 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":99:7)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x678);
          reg = x678;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/write_addr(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":101:53))
        auto x679 = arg2[119 * steps + ((cycle - 1) & mask)];
        assert(x679 != Fp::invalid());
        {
          extern_args[0] = x679;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x680 = extern_outs[0];
          auto x681 = extern_outs[1];
          auto x682 = extern_outs[2];
          auto x683 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x681);
            reg = x681;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x683);
            reg = x683;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x684 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x684 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x685 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x685 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x686 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x686 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x687 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x687 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x679);
          reg = x679;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x684);
          reg = x684;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x685);
          reg = x685;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x686);
          reg = x686;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x687);
          reg = x687;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[106] = x684;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[107] = x685;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[108] = x686;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[109] = x687;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":104:55)
        auto x688 = x679 + x99;
        {
          extern_args[0] = x688;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x689 = extern_outs[0];
          auto x690 = extern_outs[1];
          auto x691 = extern_outs[2];
          auto x692 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x689);
            reg = x689;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x691);
            reg = x691;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x692);
            reg = x692;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x693 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x693 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x694 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x694 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x695 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x695 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x696 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x696 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x688);
          reg = x688;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x693);
          reg = x693;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x694);
          reg = x694;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x695);
          reg = x695;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x696);
          reg = x696;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[110] = x693;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[111] = x694;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[112] = x695;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[113] = x696;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":104:55)
        auto x697 = x679 + x96;
        {
          extern_args[0] = x697;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x698 = extern_outs[0];
          auto x699 = extern_outs[1];
          auto x700 = extern_outs[2];
          auto x701 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x699);
            reg = x699;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x700);
            reg = x700;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x701);
            reg = x701;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x702 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x702 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x703 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x704 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x705 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x705 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x697);
          reg = x697;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x704);
          reg = x704;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x705);
          reg = x705;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[114] = x702;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[115] = x703;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[116] = x704;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[117] = x705;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":104:55)
        auto x706 = x679 + x79;
        {
          extern_args[0] = x706;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x707 = extern_outs[0];
          auto x708 = extern_outs[1];
          auto x709 = extern_outs[2];
          auto x710 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x707);
            reg = x707;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x708);
            reg = x708;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x709);
            reg = x709;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x710);
            reg = x710;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x711 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x711 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x712 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x712 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x713 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x714 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x706);
          reg = x706;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x711);
          reg = x711;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x712);
          reg = x712;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x713);
          reg = x713;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x714);
          reg = x714;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[118] = x711;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[119] = x712;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[120] = x713;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[121] = x714;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":108:17)
      auto x715 = x99 - x482;
      if (x715 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":111:50))
        auto x716 = arg2[176 * steps + ((cycle - 1) & mask)];
        assert(x716 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/write_addr(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":110:53))
        auto x717 = arg2[119 * steps + ((cycle - 2) & mask)];
        assert(x717 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":111:7)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x716);
          reg = x716;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":115:45)
        auto x718 = x717 + x81;
        {
          extern_args[0] = x718;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x719 = extern_outs[0];
          auto x720 = extern_outs[1];
          auto x721 = extern_outs[2];
          auto x722 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x719);
            reg = x719;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x720);
            reg = x720;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x721);
            reg = x721;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x722);
            reg = x722;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x723 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x724 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x725 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x725 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x726 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x726 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x718);
          reg = x718;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x723);
          reg = x723;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x724);
          reg = x724;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x725);
          reg = x725;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x726);
          reg = x726;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[122] = x723;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[123] = x724;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[124] = x725;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[125] = x726;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":115:45)
        auto x727 = x718 + x99;
        {
          extern_args[0] = x727;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x728 = extern_outs[0];
          auto x729 = extern_outs[1];
          auto x730 = extern_outs[2];
          auto x731 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x728);
            reg = x728;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x729);
            reg = x729;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x730);
            reg = x730;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x731);
            reg = x731;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x732 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x733 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x733 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x734 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x734 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x735 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x735 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x727);
          reg = x727;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x732);
          reg = x732;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x733);
          reg = x733;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x734);
          reg = x734;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[126] = x732;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[127] = x733;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[128] = x734;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[129] = x735;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":115:45)
        auto x736 = x718 + x96;
        {
          extern_args[0] = x736;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x737 = extern_outs[0];
          auto x738 = extern_outs[1];
          auto x739 = extern_outs[2];
          auto x740 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x737);
            reg = x737;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x739);
            reg = x739;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x741 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x741 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x742 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x742 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x743 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x743 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x744 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x744 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x736);
          reg = x736;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x742);
          reg = x742;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x743);
          reg = x743;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x744);
          reg = x744;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[130] = x741;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[131] = x742;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[132] = x743;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[133] = x744;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":115:45)
        auto x745 = x718 + x79;
        {
          extern_args[0] = x745;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x746 = extern_outs[0];
          auto x747 = extern_outs[1];
          auto x748 = extern_outs[2];
          auto x749 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x746);
            reg = x746;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x747);
            reg = x747;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x748);
            reg = x748;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x749);
            reg = x749;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x750 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x750 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x751 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x751 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x752 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x752 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x753 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x753 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x745);
          reg = x745;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x750);
          reg = x750;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x751);
          reg = x751;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x752);
          reg = x752;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x753);
          reg = x753;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[134] = x750;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[135] = x751;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[136] = x752;
        // loc("zirgen/components/u32.cpp":34:5)
        arg1[137] = x753;
      }
    }
    if (x481 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x754 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x754 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x754);
        reg = x754;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":122:48))
      auto x755 = arg2[176 * steps + ((cycle - 1) & mask)];
      assert(x755 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":122:5)
      {
        auto& reg = arg2[176 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x755);
        reg = x755;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":123:19))
      auto x756 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x756 != Fp::invalid());
      {
        // loc("./zirgen/components/onehot.h":37:26)
        auto x757 = (x756 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x757);
          reg = x757;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x758 = x756 - x99;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x759 = (x758 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x759);
          reg = x759;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x760 = x756 - x96;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x761 = (x760 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x761);
          reg = x761;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x762 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x762 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x763 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x763 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x764 = x763 * x96;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x765 = x762 + x764;
      // loc("./zirgen/components/onehot.h":40:8)
      auto x766 = x765 - x756;
      // loc("./zirgen/components/onehot.h":40:8)
      assert(x766 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      {
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":127:31))
      auto x767 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x767 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":127:27)
      auto x768 = x99 - x767;
      if (x482 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x769 = arg2[6 * steps + ((cycle - 1) & mask)];
        assert(x769 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x770 = arg2[7 * steps + ((cycle - 1) & mask)];
        assert(x770 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x771 = arg2[70 * steps + ((cycle - 1) & mask)];
        assert(x771 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x772 = arg2[71 * steps + ((cycle - 1) & mask)];
        assert(x772 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x773 = arg2[8 * steps + ((cycle - 1) & mask)];
        assert(x773 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":38:10)
        auto x774 = x770 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":40:10)
        auto x775 = x771 * x82;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":41:10)
        auto x776 = x772 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":39:10)
        auto x777 = x773 * x80;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x778 = x769 + x774;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x779 = x778 + x777;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x780 = x779 + x775;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x781 = x780 + x776;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x782 = x781 - x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x783 = Fp(x782.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x783);
            reg = x783;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x784 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x784 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x785 = x782 - x784;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x786 = x785 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x787 = Fp(x786.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x787);
            reg = x787;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x788 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x788 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x789 = x786 - x788;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x790 = x789 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x791 = Fp(x790.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x791);
            reg = x791;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x792 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x792 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x793 = x790 - x792;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x794 = x793 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x795 = Fp(x794.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x795);
            reg = x795;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x796 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x796 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x797 = x794 - x796;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x798 = x797 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x798);
          reg = x798;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x799 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x799 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x800 = x99 - x799;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x801 = x799 * x800;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x801);
          reg = x801;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x802 = x96 - x799;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x803 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x803 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x804 = x803 * x802;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x804 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        {
          extern_args[0] = x90;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x805 = extern_outs[0];
          auto x806 = extern_outs[1];
          auto x807 = extern_outs[2];
          auto x808 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x805);
            reg = x805;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x806);
            reg = x806;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x808);
            reg = x808;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x809 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x809 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x810 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x810 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x811 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x811 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x812 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x812 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x809);
          reg = x809;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x810);
          reg = x810;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x811);
          reg = x811;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x812);
          reg = x812;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x813 = x809 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[72] = x813;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x814 = x810 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[73] = x814;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x815 = x811 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[74] = x815;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x816 = x812 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[75] = x816;
        {
          extern_args[0] = x89;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x817 = extern_outs[0];
          auto x818 = extern_outs[1];
          auto x819 = extern_outs[2];
          auto x820 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x817);
            reg = x817;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x818);
            reg = x818;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x819);
            reg = x819;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x820);
            reg = x820;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x821 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x821 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x822 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x822 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x823 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x823 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x824 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x824 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x821);
          reg = x821;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x822);
          reg = x822;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x823);
          reg = x823;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x824);
          reg = x824;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x825 = x821 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[76] = x825;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x826 = x822 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[77] = x826;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x827 = x823 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[78] = x827;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x828 = x824 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[79] = x828;
        {
          extern_args[0] = x88;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x829 = extern_outs[0];
          auto x830 = extern_outs[1];
          auto x831 = extern_outs[2];
          auto x832 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x829);
            reg = x829;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x830);
            reg = x830;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x831);
            reg = x831;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x832);
            reg = x832;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x833 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x833 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x834 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x834 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x835 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x835 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x836 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x836 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x833);
          reg = x833;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x834);
          reg = x834;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x835);
          reg = x835;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x836);
          reg = x836;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x837 = x833 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[80] = x837;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x838 = x834 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[81] = x838;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x839 = x835 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[82] = x839;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x840 = x836 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[83] = x840;
        {
          extern_args[0] = x87;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x841 = extern_outs[0];
          auto x842 = extern_outs[1];
          auto x843 = extern_outs[2];
          auto x844 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x841);
            reg = x841;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x842);
            reg = x842;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x843);
            reg = x843;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x844);
            reg = x844;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x845 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x845 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x846 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x846 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x847 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x847 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x848 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x848 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x845);
          reg = x845;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x846);
          reg = x846;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x847);
          reg = x847;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x848);
          reg = x848;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x849 = x845 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[84] = x849;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x850 = x846 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[85] = x850;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x851 = x847 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[86] = x851;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x852 = x848 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[87] = x852;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:52)
        auto x853 = x799 * x81;
        // loc("zirgen/components/u32.cpp":95:20)
        auto x854 = x784 + x754;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:41)
        auto x855 = x796 + x853;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x856 = x854 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[68] = x856;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x857 = x788 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[69] = x857;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x858 = x792 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[70] = x858;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x859 = x855 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[71] = x859;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":140:17)
      auto x860 = x99 - x482;
      if (x860 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x861 = arg2[6 * steps + ((cycle - 1) & mask)];
        assert(x861 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x862 = arg2[7 * steps + ((cycle - 1) & mask)];
        assert(x862 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x863 = arg2[70 * steps + ((cycle - 1) & mask)];
        assert(x863 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x864 = arg2[71 * steps + ((cycle - 1) & mask)];
        assert(x864 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x865 = arg2[8 * steps + ((cycle - 1) & mask)];
        assert(x865 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":38:10)
        auto x866 = x862 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":40:10)
        auto x867 = x863 * x82;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":41:10)
        auto x868 = x864 * x77;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":39:10)
        auto x869 = x865 * x80;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x870 = x861 + x866;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x871 = x870 + x869;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x872 = x871 + x867;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x873 = x872 + x868;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
        auto x874 = x873 - x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x875 = x874 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x876 = Fp(x875.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x876);
            reg = x876;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x877 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x877 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x878 = x875 - x877;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x879 = x878 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x880 = Fp(x879.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x880);
            reg = x880;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x881 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x881 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x882 = x879 - x881;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x883 = x882 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x884 = Fp(x883.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x885 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x885 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x886 = x883 - x885;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x887 = x886 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x888 = Fp(x887.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x888);
            reg = x888;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x889 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x890 = x887 - x889;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x891 = x890 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x891);
          reg = x891;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x892 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x892 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x893 = x99 - x892;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x894 = x892 * x893;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x894);
          reg = x894;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x895 = x96 - x892;
        // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x896 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x896 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x897 = x896 * x895;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x897 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        {
          extern_args[0] = x86;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x898 = extern_outs[0];
          auto x899 = extern_outs[1];
          auto x900 = extern_outs[2];
          auto x901 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x898);
            reg = x898;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x899);
            reg = x899;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x900);
            reg = x900;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x901);
            reg = x901;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x902 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x902 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x903 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x903 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x904 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x904 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x905 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x905 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x902);
          reg = x902;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x903);
          reg = x903;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x904);
          reg = x904;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x905);
          reg = x905;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x906 = x902 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[88] = x906;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x907 = x903 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[89] = x907;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x908 = x904 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[90] = x908;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x909 = x905 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[91] = x909;
        {
          extern_args[0] = x85;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x910 = extern_outs[0];
          auto x911 = extern_outs[1];
          auto x912 = extern_outs[2];
          auto x913 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x910);
            reg = x910;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x911);
            reg = x911;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x912);
            reg = x912;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x913);
            reg = x913;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x914 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x914 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x915 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x915 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x916 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x916 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x917 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x917 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x914);
          reg = x914;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x915);
          reg = x915;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x916);
          reg = x916;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x917);
          reg = x917;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x918 = x914 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[92] = x918;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x919 = x915 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[93] = x919;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x920 = x916 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[94] = x920;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x921 = x917 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[95] = x921;
        {
          extern_args[0] = x84;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x922 = extern_outs[0];
          auto x923 = extern_outs[1];
          auto x924 = extern_outs[2];
          auto x925 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x922);
            reg = x922;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x923);
            reg = x923;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x924);
            reg = x924;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x925);
            reg = x925;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x926 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x926 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x927 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x927 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x928 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x928 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x929 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x929 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x926);
          reg = x926;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x927);
          reg = x927;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x928);
          reg = x928;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x929);
          reg = x929;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x930 = x926 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[96] = x930;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x931 = x927 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[97] = x931;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x932 = x928 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[98] = x932;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x933 = x929 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[99] = x933;
        {
          extern_args[0] = x83;
          extern_args[1] = x98;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x934 = extern_outs[0];
          auto x935 = extern_outs[1];
          auto x936 = extern_outs[2];
          auto x937 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x934);
            reg = x934;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x935);
            reg = x935;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x936);
            reg = x936;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x937);
            reg = x937;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x938 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x938 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x939 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x939 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x940 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x940 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x941 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x941 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x938);
          reg = x938;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x939);
          reg = x939;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x940);
          reg = x940;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x941);
          reg = x941;
        }
        // loc("zirgen/components/u32.cpp":40:19)
        auto x942 = x938 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[100] = x942;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x943 = x939 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[101] = x943;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x944 = x940 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[102] = x944;
        // loc("zirgen/components/u32.cpp":40:19)
        auto x945 = x941 * x768;
        // loc("zirgen/components/u32.cpp":40:5)
        arg1[103] = x945;
      }
    }
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":150:3)
    {
      auto& reg = arg2[100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x65);
      reg = x65;
    }
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x946 = arg2[6 * steps + ((cycle - 0) & mask)];
    assert(x946 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x947 = arg2[7 * steps + ((cycle - 0) & mask)];
    assert(x947 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x948 = arg2[70 * steps + ((cycle - 0) & mask)];
    assert(x948 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x949 = arg2[71 * steps + ((cycle - 0) & mask)];
    assert(x949 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x950 = arg2[8 * steps + ((cycle - 0) & mask)];
    assert(x950 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":38:10)
    auto x951 = x947 * x93;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":40:10)
    auto x952 = x948 * x82;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":41:10)
    auto x953 = x949 * x77;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":39:10)
    auto x954 = x950 * x80;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x955 = x946 + x951;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x956 = x955 + x954;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x957 = x956 + x952;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x958 = x957 + x953;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x959 = x958 - x81;
    extern_args[0] = x483;
    extern_args[1] = x959;
    extern_log(ctx, cycle, "%u: Reset: PC = %10x", extern_args, extern_outs);
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:25))
  auto x960 = arg0[6 * steps + ((cycle - 0) & mask)];
  assert(x960 != Fp::invalid());
  if (x960 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x961 = arg0[0 * steps + ((cycle - 0) & mask)];
    assert(x961 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x962 = arg2[6 * steps + ((cycle - 1) & mask)];
    assert(x962 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x963 = arg2[7 * steps + ((cycle - 1) & mask)];
    assert(x963 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x964 = arg2[70 * steps + ((cycle - 1) & mask)];
    assert(x964 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x965 = arg2[71 * steps + ((cycle - 1) & mask)];
    assert(x965 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x966 = arg2[8 * steps + ((cycle - 1) & mask)];
    assert(x966 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":38:10)
    auto x967 = x963 * x93;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":40:10)
    auto x968 = x964 * x82;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":41:10)
    auto x969 = x965 * x77;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":39:10)
    auto x970 = x966 * x80;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x971 = x962 + x967;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x972 = x971 + x970;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x973 = x972 + x968;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x974 = x973 + x969;
    // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":37:10)
    auto x975 = x974 - x81;
    {
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":233:45))
      auto x976 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x976 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":234:24)
      auto x977 = x976 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":234:24)
      auto x978 = (x977 == 0) ? Fp(1) : Fp(0);
      if (x978 != 0) {
        extern_args[0] = x961;
        extern_args[1] = x975;
        extern_log(ctx, cycle, "%u: BODY pc: %10x", extern_args, extern_outs);
        extern_args[0] = x975;
        extern_trace(ctx, cycle, "", extern_args, extern_outs);
        extern_args[0] = x961;
        extern_args[1] = x975;
        extern_getMajor(ctx, cycle, "", extern_args, extern_outs);
        auto x979 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x980 = (x979 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x980);
            reg = x980;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x981 = x979 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x982 = (x981 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x982);
            reg = x982;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x983 = x979 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x984 = (x983 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x984);
            reg = x984;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x985 = x979 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x986 = (x985 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x986);
            reg = x986;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x987 = x979 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x988 = (x987 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x988);
            reg = x988;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x989 = x979 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x990 = (x989 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x990);
            reg = x990;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x991 = x979 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x992 = (x991 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x992);
            reg = x992;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x993 = x979 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x994 = (x993 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x994);
            reg = x994;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x995 = x979 - x67;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x996 = (x995 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x996);
            reg = x996;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x997 = x979 - x66;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x998 = (x997 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x998);
            reg = x998;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x999 = x979 - x76;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1000 = (x999 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1000);
            reg = x1000;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1001 = x979 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1002 = (x1001 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1003 = x979 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1004 = (x1003 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1004);
            reg = x1004;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1005 = x979 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1006 = (x1005 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1007 = x979 - x72;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1008 = (x1007 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1008);
            reg = x1008;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1009 = x979 - x71;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1010 = (x1009 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1011 = arg2[102 * steps + ((cycle - 0) & mask)];
        assert(x1011 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1012 = arg2[103 * steps + ((cycle - 0) & mask)];
        assert(x1012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1013 = arg2[104 * steps + ((cycle - 0) & mask)];
        assert(x1013 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1014 = arg2[105 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1015 = arg2[106 * steps + ((cycle - 0) & mask)];
        assert(x1015 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1016 = arg2[107 * steps + ((cycle - 0) & mask)];
        assert(x1016 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1017 = arg2[108 * steps + ((cycle - 0) & mask)];
        assert(x1017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1018 = arg2[109 * steps + ((cycle - 0) & mask)];
        assert(x1018 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1019 = arg2[110 * steps + ((cycle - 0) & mask)];
        assert(x1019 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1020 = arg2[111 * steps + ((cycle - 0) & mask)];
        assert(x1020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1021 = arg2[112 * steps + ((cycle - 0) & mask)];
        assert(x1021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1022 = arg2[113 * steps + ((cycle - 0) & mask)];
        assert(x1022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1023 = arg2[114 * steps + ((cycle - 0) & mask)];
        assert(x1023 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1024 = arg2[115 * steps + ((cycle - 0) & mask)];
        assert(x1024 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1025 = arg2[116 * steps + ((cycle - 0) & mask)];
        assert(x1025 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1026 = x1012 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1027 = x1013 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1028 = x1014 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1029 = x1015 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1030 = x1016 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1031 = x1017 * x68;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1032 = x1018 * x67;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1033 = x1019 * x66;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1034 = x1020 * x76;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1035 = x1021 * x75;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1036 = x1022 * x74;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1037 = x1023 * x73;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1038 = x1024 * x72;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1039 = x1025 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1040 = x1011 + x1026;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1041 = x1040 + x1027;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1042 = x1041 + x1028;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1043 = x1042 + x1029;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1044 = x1043 + x1030;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1045 = x1044 + x1031;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1046 = x1045 + x1032;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1047 = x1046 + x1033;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1048 = x1047 + x1034;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1049 = x1048 + x1035;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1050 = x1049 + x1036;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1051 = x1050 + x1037;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1052 = x1051 + x1038;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1053 = x1052 + x1039;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1054 = x1053 - x979;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x1054 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":241:20)
      auto x1055 = x99 - x978;
      if (x1055 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":242:47)
        auto x1056 = x976 - x71;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":242:47)
        auto x1057 = (x1056 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":242:47)
        auto x1058 = x99 - x1057;
        if (x1058 != 0) {
          extern_args[0] = x961;
          extern_args[1] = x975;
          extern_args[2] = x976;
          extern_log(ctx, cycle, "%u: BODY pc: %10x, major = %u", extern_args, extern_outs);
        }
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1059 = (x976 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1059);
            reg = x1059;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1060 = x976 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1061 = (x1060 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1061);
            reg = x1061;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1062 = x976 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1063 = (x1062 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1063);
            reg = x1063;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1064 = x976 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1065 = (x1064 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1065);
            reg = x1065;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1066 = x976 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1067 = (x1066 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1067);
            reg = x1067;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1068 = x976 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1069 = (x1068 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1069);
            reg = x1069;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1070 = x976 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1071 = (x1070 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1071);
            reg = x1071;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1072 = x976 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1073 = (x1072 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1073);
            reg = x1073;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1074 = x976 - x67;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1075 = (x1074 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1075);
            reg = x1075;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1076 = x976 - x66;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1077 = (x1076 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1077);
            reg = x1077;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1078 = x976 - x76;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1079 = (x1078 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1079);
            reg = x1079;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1080 = x976 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1081 = (x1080 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1081);
            reg = x1081;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1082 = x976 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1083 = (x1082 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1083);
            reg = x1083;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1084 = x976 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1085 = (x1084 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1085);
            reg = x1085;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1086 = x976 - x72;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1087 = (x1086 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1087);
            reg = x1087;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1057);
            reg = x1057;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1088 = arg2[102 * steps + ((cycle - 0) & mask)];
        assert(x1088 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1089 = arg2[103 * steps + ((cycle - 0) & mask)];
        assert(x1089 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1090 = arg2[104 * steps + ((cycle - 0) & mask)];
        assert(x1090 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1091 = arg2[105 * steps + ((cycle - 0) & mask)];
        assert(x1091 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1092 = arg2[106 * steps + ((cycle - 0) & mask)];
        assert(x1092 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1093 = arg2[107 * steps + ((cycle - 0) & mask)];
        assert(x1093 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1094 = arg2[108 * steps + ((cycle - 0) & mask)];
        assert(x1094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1095 = arg2[109 * steps + ((cycle - 0) & mask)];
        assert(x1095 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1096 = arg2[110 * steps + ((cycle - 0) & mask)];
        assert(x1096 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1097 = arg2[111 * steps + ((cycle - 0) & mask)];
        assert(x1097 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1098 = arg2[112 * steps + ((cycle - 0) & mask)];
        assert(x1098 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1099 = arg2[113 * steps + ((cycle - 0) & mask)];
        assert(x1099 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1100 = arg2[114 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1101 = arg2[115 * steps + ((cycle - 0) & mask)];
        assert(x1101 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1102 = arg2[116 * steps + ((cycle - 0) & mask)];
        assert(x1102 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1103 = x1089 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1104 = x1090 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1105 = x1091 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1106 = x1092 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1107 = x1093 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1108 = x1094 * x68;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1109 = x1095 * x67;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1110 = x1096 * x66;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1111 = x1097 * x76;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1112 = x1098 * x75;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1113 = x1099 * x74;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1114 = x1100 * x73;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1115 = x1101 * x72;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1116 = x1102 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1117 = x1088 + x1103;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1118 = x1117 + x1104;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1119 = x1118 + x1105;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1120 = x1119 + x1106;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1121 = x1120 + x1107;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1122 = x1121 + x1108;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1123 = x1122 + x1109;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1124 = x1123 + x1110;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1125 = x1124 + x1111;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1126 = x1125 + x1112;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1127 = x1126 + x1113;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1128 = x1127 + x1114;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1129 = x1128 + x1115;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1130 = x1129 + x1116;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1131 = x1130 - x976;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x1131 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[0](Reg)"("./zirgen/components/mux.h":49:25))
    auto x1132 = arg2[101 * steps + ((cycle - 0) & mask)];
    assert(x1132 != Fp::invalid());
    if (x1132 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1133 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x1133 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1133);
        reg = x1133;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37))
      auto x1134 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x1134 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      auto x1135 = x1134 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      assert(x1135 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:113");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":116:41)
      auto x1136 = x975 * x78;
      {
        extern_args[0] = x1136;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x1137 = extern_outs[0];
        auto x1138 = extern_outs[1];
        auto x1139 = extern_outs[2];
        auto x1140 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1137);
          reg = x1137;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1138);
          reg = x1138;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1139);
          reg = x1139;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1140);
          reg = x1140;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1141 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x1141 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1142 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x1142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1143 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x1143 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1144 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x1144 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1136);
        reg = x1136;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1141);
        reg = x1141;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1142);
        reg = x1142;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1143);
        reg = x1143;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1144);
        reg = x1144;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x1145 = Fp(x1144.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x1146 = x1145 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1146);
          reg = x1146;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x1147 = Fp(x1144.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x1148 = x1147 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1148);
          reg = x1148;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x1149 = Fp(x1144.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x1150 = x1149 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1150);
          reg = x1150;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x1151 = Fp(x1144.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x1152 = x1151 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1152);
          reg = x1152;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x1153 = Fp(x1144.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x1154 = x1153 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1154);
          reg = x1154;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x1155 = Fp(x1144.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1155);
          reg = x1155;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x1156 = Fp(x1143.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x1157 = x1156 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1157);
          reg = x1157;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x1158 = Fp(x1143.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x1159 = x1158 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1159);
          reg = x1159;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x1160 = Fp(x1143.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x1161 = x1160 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1161);
          reg = x1161;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x1162 = Fp(x1143.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x1163 = x1162 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1163);
          reg = x1163;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x1164 = Fp(x1143.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1164);
          reg = x1164;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x1165 = Fp(x1142.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x1166 = x1165 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1166);
          reg = x1166;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x1167 = Fp(x1142.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x1168 = x1167 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1168);
          reg = x1168;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x1169 = Fp(x1142.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x1170 = x1169 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1170);
          reg = x1170;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x1171 = Fp(x1142.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x1172 = x1171 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1172);
          reg = x1172;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x1173 = Fp(x1142.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1173);
          reg = x1173;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x1174 = Fp(x1141.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x1175 = x1174 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1175);
          reg = x1175;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x1176 = Fp(x1141.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1176);
          reg = x1176;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1177 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x1177 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1178 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x1178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1179 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x1179 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1180 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x1180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1181 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x1181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1182 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x1182 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x1183 = x1179 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1184 = x1180 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x1185 = x1177 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x1186 = x1178 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1187 = x1184 + x1186;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1188 = x1187 + x1185;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1189 = x1188 + x1182;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x1190 = x1183 + x1189;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x1191 = x1190 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x1192 = x1191 + x1181;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x1193 = x1144 - x1192;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x1193 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1194 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x1194 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1195 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x1195 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1196 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x1196 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1197 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x1197 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1198 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x1198 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1199 = x1194 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x1200 = x1195 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x1201 = x1196 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1202 = x1199 + x1200;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1203 = x1202 + x1197;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1204 = x1203 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1205 = x1204 + x1201;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1206 = x1205 + x1198;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x1207 = x1143 - x1206;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x1207 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1208 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x1208 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1209 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x1209 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1210 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x1210 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1211 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x1211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1212 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x1212 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1213 = x1208 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x1214 = x1209 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x1215 = x1210 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x1216 = x1214 + x1211;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x1217 = x1216 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1218 = x1213 + x1217;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1219 = x1218 + x1215;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1220 = x1219 + x1212;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x1221 = x1142 - x1220;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x1221 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1222 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x1222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x1223 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x1223 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x1224 = x1222 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x1225 = x1224 + x1223;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x1226 = x1141 - x1225;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x1226 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x1141;
        extern_args[1] = x1142;
        extern_args[2] = x1143;
        extern_args[3] = x1144;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x1227 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1228 = (x1227 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1228);
            reg = x1228;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1229 = x1227 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1230 = (x1229 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1230);
            reg = x1230;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1231 = x1227 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1232 = (x1231 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1232);
            reg = x1232;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1233 = x1227 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1234 = (x1233 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1234);
            reg = x1234;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1235 = x1227 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1236 = (x1235 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1236);
            reg = x1236;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1237 = x1227 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1238 = (x1237 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1238);
            reg = x1238;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1239 = x1227 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1240 = (x1239 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1240);
            reg = x1240;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1241 = x1227 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1242 = (x1241 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1242);
            reg = x1242;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1243 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x1243 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1244 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x1244 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1245 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x1245 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1246 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x1246 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1247 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x1247 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1248 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x1248 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1249 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x1249 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1250 = x1244 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1251 = x1245 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1252 = x1246 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1253 = x1247 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1254 = x1248 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1255 = x1249 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1256 = x1243 + x1250;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1257 = x1256 + x1251;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1258 = x1257 + x1252;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1259 = x1258 + x1253;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1260 = x1259 + x1254;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1261 = x1260 + x1255;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1262 = x1261 - x1227;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x1262 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68))
        auto x1263 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x1263 != Fp::invalid());
        if (x1263 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68))
        auto x1264 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x1264 != Fp::invalid());
        if (x1264 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69))
        auto x1265 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x1265 != Fp::invalid());
        if (x1265 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x91);
            reg = x91;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69))
        auto x1266 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x1266 != Fp::invalid());
        if (x1266 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69))
        auto x1267 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x1267 != Fp::invalid());
        if (x1267 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68))
        auto x1268 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x1268 != Fp::invalid());
        if (x1268 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68))
        auto x1269 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x1269 != Fp::invalid());
        if (x1269 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68))
        auto x1270 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x1270 != Fp::invalid());
        if (x1270 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1271 = x1177 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1272 = x1179 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1273 = x1181 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1274 = x1179 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1275 = x1182 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1276 = x1180 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1277 = x1271 + x1275;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1278 = x1272 + x1276;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1279 = x1278 + x1178;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1280 = x1273 + x1203;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1281 = x1277 + x1280;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1281);
            reg = x1281;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1279);
            reg = x1279;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1274);
            reg = x1274;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1274);
            reg = x1274;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:57)
      auto x1282 = x1133 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x1283 = x51 - x1282;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1284 = x1196 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x1285 = x1198 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1286 = x1284 + x1285;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1287 = x1286 + x1208;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x1288 = x1283 + x1287;
      {
        extern_args[0] = x1288;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x1289 = extern_outs[0];
        auto x1290 = extern_outs[1];
        auto x1291 = extern_outs[2];
        auto x1292 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1289);
          reg = x1289;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1290);
          reg = x1290;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1291);
          reg = x1291;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1292);
          reg = x1292;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1293 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x1293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1294 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x1294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1295 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x1295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1296 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x1296 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1288);
        reg = x1288;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1293);
        reg = x1293;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1294);
        reg = x1294;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1295);
        reg = x1295;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1296);
        reg = x1296;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x1297 = x1181 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x1298 = x1297 + x1203;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:39)
      auto x1299 = x1283 + x1298;
      {
        extern_args[0] = x1299;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x1300 = extern_outs[0];
        auto x1301 = extern_outs[1];
        auto x1302 = extern_outs[2];
        auto x1303 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1300);
          reg = x1300;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1301);
          reg = x1301;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1302);
          reg = x1302;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1303);
          reg = x1303;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1304 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x1304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1305 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x1305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1306 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1307 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1299);
        reg = x1299;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1304);
        reg = x1304;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1305);
        reg = x1305;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1307);
        reg = x1307;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1308 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x1308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1309 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x1309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1310 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x1310 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1311 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x1311 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1312 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x1312 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1313 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x1313 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1314 = x1312 * x963;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1315 = x1312 * x966;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1316 = x1313 * x1308;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1317 = x1313 * x1309;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1318 = x1313 * x1310;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1319 = x1313 * x1311;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:52)
      auto x1320 = x965 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":143:17)
      auto x1321 = x99 - x1312;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":145:17)
      auto x1322 = x99 - x1313;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x1323 = x962 - x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:41)
      auto x1324 = x964 + x1320;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1325 = x1321 * x1293;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1326 = x1321 * x1294;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1327 = x1321 * x1295;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1328 = x1321 * x1296;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1329 = x1322 * x1304;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1330 = x1322 * x1305;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1331 = x1322 * x1306;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1332 = x1322 * x1307;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1333 = x1312 * x1324;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1334 = x1312 * x1323;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1335 = x1325 + x1334;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1336 = x1326 + x1314;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1337 = x1327 + x1315;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1338 = x1328 + x1333;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1339 = x1329 + x1316;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1340 = x1330 + x1317;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1341 = x1331 + x1318;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1342 = x1332 + x1319;
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x1343 = Fp(x1338.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x1344 = x1343 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1344);
          reg = x1344;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x1345 = Fp(x1338.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x1346 = x1345 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1346);
          reg = x1346;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1347 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x1347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1348 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1349 = x1348 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x1350 = x1347 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1351 = x1349 + x1350;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x1352 = x1338 - x1351;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x1352 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x1353 = Fp(x1342.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x1354 = x1353 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1354);
          reg = x1354;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x1355 = Fp(x1342.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x1356 = x1355 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1356);
          reg = x1356;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1357 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x1357 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1358 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x1358 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1359 = x1358 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x1360 = x1357 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1361 = x1359 + x1360;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x1362 = x1342 - x1361;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x1362 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1339);
        reg = x1339;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1340);
        reg = x1340;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1341);
        reg = x1341;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[205 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1342);
        reg = x1342;
      }
      {
        // loc("zirgen/components/u32.cpp":119:20)
        auto x1363 = Fp(x1335.asUInt32() & x1339.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x1364 = Fp(x1336.asUInt32() & x1340.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x1365 = Fp(x1337.asUInt32() & x1341.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x1366 = Fp(x1338.asUInt32() & x1342.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1364);
          reg = x1364;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1366);
          reg = x1366;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1367 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x1367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1368 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x1368 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1369 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x1369 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1370 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x1370 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1371 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x1371 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1372 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x1372 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1373 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x1373 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1374 = x1367 * x1335;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1375 = x1367 * x1336;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1376 = x1367 * x1337;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1377 = x1367 * x1338;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1378 = x1368 * x1339;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1379 = x1368 * x1340;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1380 = x1368 * x1341;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1381 = x1368 * x1342;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1382 = x1369 * x1370;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1383 = x1369 * x1371;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1384 = x1369 * x1372;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x1385 = x1369 * x1373;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1386 = x1374 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1387 = x1375 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1388 = x1376 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1389 = x1377 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1390 = x1386 + x1378;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1391 = x1387 + x1379;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1392 = x1388 + x1380;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1393 = x1389 + x1381;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1394 = x1392 + x1384;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1395 = x1390 + x1382;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1396 = x1391 + x1383;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x1397 = x1393 + x1385;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x1398 = x1396 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x1399 = x1395 + x1398;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1400 = Fp(x1399.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1400);
          reg = x1400;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1401 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x1401 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1402 = x1399 - x1401;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1403 = x1402 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1404 = Fp(x1403.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1404);
          reg = x1404;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1405 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x1405 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1406 = x1403 - x1405;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1407 = x1406 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1407);
        reg = x1407;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x1408 = x1397 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1409 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x1409 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x1410 = x1409 + x1394;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x1411 = x1410 + x1408;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1412 = Fp(x1411.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1412);
          reg = x1412;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1413 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x1413 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1414 = x1411 - x1413;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1415 = x1414 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1416 = Fp(x1415.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1416);
          reg = x1416;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1417 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x1417 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1418 = x1415 - x1417;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1419 = x1418 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1419);
        reg = x1419;
      }
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x1420 = Fp(x1417.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x1421 = x1420 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1421);
          reg = x1421;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x1422 = Fp(x1417.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x1423 = x1422 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1423);
          reg = x1423;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1424 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x1424 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1425 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x1425 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1426 = x1424 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x1427 = x1425 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x1428 = x1426 + x1427;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x1429 = x1417 - x1428;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x1429 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:45)
      auto x1430 = x99 - x1348;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:23)
      auto x1431 = x99 - x1358;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:34)
      auto x1432 = x99 - x1424;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x1433 = x1348 * x1431;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x1434 = x1433 * x1432;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x1435 = x1430 * x1358;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x1436 = x1435 * x1424;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x1437 = x1434 + x1436;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:3)
      {
        auto& reg = arg2[211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1437);
        reg = x1437;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x1438 = arg2[211 * steps + ((cycle - 0) & mask)];
      assert(x1438 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x1439 = x1438 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x1440 = x1439 * x1424;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x1441 = x1438 + x1424;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x1442 = x1441 - x1440;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:3)
      {
        auto& reg = arg2[212 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1442);
        reg = x1442;
      }
      // loc("zirgen/components/u32.cpp":143:26)
      auto x1443 = x1405 * x93;
      // loc("zirgen/components/u32.cpp":143:12)
      auto x1444 = x1401 + x1443;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1445 = (x1444 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1445);
          reg = x1445;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1446 = inv(x1444);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1446);
          reg = x1446;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1447 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x1447 != Fp::invalid());
      if (x1447 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x1444 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1448 = x99 - x1447;
      if (x1448 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1449 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x1449 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1450 = x1444 * x1449;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1451 = x1450 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x1451 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:27)
      auto x1452 = x1417 * x93;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x1453 = x1413 + x1452;
      // loc("zirgen/components/u32.cpp":144:47)
      auto x1454 = x1448 * x80;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x1455 = x1453 + x1454;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1456 = (x1455 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1456);
          reg = x1456;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1457 = inv(x1455);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1457);
          reg = x1457;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1458 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x1458 != Fp::invalid());
      if (x1458 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x1455 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1459 = x99 - x1458;
      if (x1459 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1460 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x1460 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1461 = x1455 * x1460;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1462 = x1461 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x1462 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1463 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x1463 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1464 = arg2[212 * steps + ((cycle - 0) & mask)];
      assert(x1464 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:10)
      auto x1465 = x99 - x1463;
      extern_args[0] = x1308;
      extern_args[1] = x1309;
      extern_args[2] = x1310;
      extern_args[3] = x1311;
      extern_args[4] = x1287;
      extern_args[5] = x1293;
      extern_args[6] = x1294;
      extern_args[7] = x1295;
      extern_args[8] = x1296;
      extern_args[9] = x1298;
      extern_args[10] = x1304;
      extern_args[11] = x1305;
      extern_args[12] = x1306;
      extern_args[13] = x1307;
      extern_args[14] = x1335;
      extern_args[15] = x1336;
      extern_args[16] = x1337;
      extern_args[17] = x1338;
      extern_args[18] = x1339;
      extern_args[19] = x1340;
      extern_args[20] = x1341;
      extern_args[21] = x1342;
      extern_args[22] = x1401;
      extern_args[23] = x1405;
      extern_args[24] = x1413;
      extern_args[25] = x1417;
      extern_args[26] = x1458;
      extern_args[27] = x1464;
      extern_args[28] = x1465;
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x1466 = x1210 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x1467 = x1212 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x1468 = x1466 + x1467;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x1469 = x1468 + x1222;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1470 = (x1469 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1470);
          reg = x1470;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1471 = inv(x1469);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1471);
          reg = x1471;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1472 = arg2[217 * steps + ((cycle - 0) & mask)];
      assert(x1472 != Fp::invalid());
      if (x1472 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x1469 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1473 = x99 - x1472;
      if (x1473 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1474 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x1474 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1475 = x1469 * x1474;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1476 = x1475 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x1476 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":165:13)
      auto x1477 = x975 + x81;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68))
      auto x1478 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x1478 != Fp::invalid());
      if (x1478 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
        auto x1479 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
        assert(x1479 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
        assert(x1216 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:38");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1480 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1481 = Fp(x1480.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1481);
            reg = x1481;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1482 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1482 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1483 = x1480 - x1482;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1484 = x1483 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1485 = Fp(x1484.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1486 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1486 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1487 = x1484 - x1486;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1488 = x1487 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1489 = Fp(x1488.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1489);
            reg = x1489;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1490 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1490 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1491 = x1488 - x1490;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1492 = x1491 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1493 = Fp(x1492.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1493);
            reg = x1493;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1494 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1494 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1495 = x1492 - x1494;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1496 = x1495 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1496);
          reg = x1496;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1497 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1497 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1498 = x99 - x1497;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1499 = x1497 * x1498;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1499);
          reg = x1499;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1500 = x96 - x1497;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1501 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1501 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1502 = x1501 * x1500;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1502 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1503 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1503 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1503);
          reg = x1503;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":38:68)
          auto x1504 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1504;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1505 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1505 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1506 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1506 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1507 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1507 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1508 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1508 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1504);
            reg = x1504;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1505);
            reg = x1505;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1506);
            reg = x1506;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1507);
            reg = x1507;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1508);
            reg = x1508;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68))
      auto x1509 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x1509 != Fp::invalid());
      if (x1509 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        auto x1510 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        assert(x1510 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        assert(x1216 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        auto x1511 = x1190 - x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        assert(x1511 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:39");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1512 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1513 = Fp(x1512.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1513);
            reg = x1513;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1514 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1514 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1515 = x1512 - x1514;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1516 = x1515 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1517 = Fp(x1516.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1517);
            reg = x1517;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1518 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1518 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1519 = x1516 - x1518;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1520 = x1519 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1521 = Fp(x1520.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1521);
            reg = x1521;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1522 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1522 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1523 = x1520 - x1522;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1524 = x1523 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1525 = Fp(x1524.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1525);
            reg = x1525;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1526 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1526 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1527 = x1524 - x1526;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1528 = x1527 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1528);
          reg = x1528;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1529 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1529 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1530 = x99 - x1529;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1531 = x1529 * x1530;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1531);
          reg = x1531;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1532 = x96 - x1529;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1533 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1533 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1534 = x1533 * x1532;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1534 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1535 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1535 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1535);
          reg = x1535;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":39:68)
          auto x1536 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1536;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1537 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1537 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1538 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1538 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1539 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1539 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1540 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1540 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1536);
            reg = x1536;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1537);
            reg = x1537;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1538);
            reg = x1538;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1539);
            reg = x1539;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1540);
            reg = x1540;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69))
      auto x1541 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x1541 != Fp::invalid());
      if (x1541 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        auto x1542 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        assert(x1542 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        auto x1543 = x1216 - x81;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        assert(x1543 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:40");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x91);
          reg = x91;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1544 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1545 = Fp(x1544.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1545);
            reg = x1545;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1546 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1546 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1547 = x1544 - x1546;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1548 = x1547 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1549 = Fp(x1548.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1549);
            reg = x1549;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1550 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1550 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1551 = x1548 - x1550;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1552 = x1551 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1553 = Fp(x1552.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1553);
            reg = x1553;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1554 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1554 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1555 = x1552 - x1554;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1556 = x1555 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1557 = Fp(x1556.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1557);
            reg = x1557;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1558 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1558 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1559 = x1556 - x1558;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1560 = x1559 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1560);
          reg = x1560;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1561 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1561 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1562 = x99 - x1561;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1563 = x1561 * x1562;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1563);
          reg = x1563;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1564 = x96 - x1561;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1565 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1565 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1566 = x1565 * x1564;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1566 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1567 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1567 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1567);
          reg = x1567;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":40:69)
          auto x1568 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1568;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1569 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1569 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1570 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1570 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1571 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1571 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1572 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1572 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1568);
            reg = x1568;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1569);
            reg = x1569;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1570);
            reg = x1570;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1571);
            reg = x1571;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1572);
            reg = x1572;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69))
      auto x1573 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x1573 != Fp::invalid());
      if (x1573 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        auto x1574 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        assert(x1574 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        auto x1575 = x1216 - x69;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        assert(x1575 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:41");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1576 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1577 = Fp(x1576.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1577);
            reg = x1577;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1578 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1578 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1579 = x1576 - x1578;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1580 = x1579 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1581 = Fp(x1580.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1581);
            reg = x1581;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1582 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1582 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1583 = x1580 - x1582;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1584 = x1583 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1585 = Fp(x1584.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1585);
            reg = x1585;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1586 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1586 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1587 = x1584 - x1586;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1588 = x1587 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1589 = Fp(x1588.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1589);
            reg = x1589;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1590 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1590 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1591 = x1588 - x1590;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1592 = x1591 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1592);
          reg = x1592;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1593 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1593 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1594 = x99 - x1593;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1595 = x1593 * x1594;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1595);
          reg = x1595;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1596 = x96 - x1593;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1597 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1597 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1598 = x1597 * x1596;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1598 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1599 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1599 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1599);
          reg = x1599;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":41:69)
          auto x1600 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1600;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1601 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1601 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1602 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1602 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1603 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1603 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1604 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1604 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1600);
            reg = x1600;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1601);
            reg = x1601;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1602);
            reg = x1602;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1603);
            reg = x1603;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1604);
            reg = x1604;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69))
      auto x1605 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      if (x1605 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        auto x1606 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        assert(x1606 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        auto x1607 = x1216 - x68;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        assert(x1607 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:42");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1608 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1609 = Fp(x1608.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1609);
            reg = x1609;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1610 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1610 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1611 = x1608 - x1610;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1612 = x1611 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1613 = Fp(x1612.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1613);
            reg = x1613;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1614 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1614 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1615 = x1612 - x1614;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1616 = x1615 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1617 = Fp(x1616.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1617);
            reg = x1617;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1618 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1618 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1619 = x1616 - x1618;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1620 = x1619 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1621 = Fp(x1620.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1621);
            reg = x1621;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1622 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1622 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1623 = x1620 - x1622;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1624 = x1623 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1624);
          reg = x1624;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1625 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1625 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1626 = x99 - x1625;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1627 = x1625 * x1626;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1627);
          reg = x1627;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1628 = x96 - x1625;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1629 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1629 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1630 = x1629 * x1628;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1630 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1631 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1631 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1631);
          reg = x1631;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":42:69)
          auto x1632 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1632;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1633 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1633 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1634 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1634 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1635 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1635 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1636 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1636 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1632);
            reg = x1632;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1633);
            reg = x1633;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1634);
            reg = x1634;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1635);
            reg = x1635;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1636);
            reg = x1636;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68))
      auto x1637 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x1637 != Fp::invalid());
      if (x1637 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        auto x1638 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        assert(x1638 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        auto x1639 = x1216 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        assert(x1639 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:43");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1640 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1641 = Fp(x1640.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1641);
            reg = x1641;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1642 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1642 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1643 = x1640 - x1642;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1644 = x1643 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1645 = Fp(x1644.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1645);
            reg = x1645;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1646 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1646 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1647 = x1644 - x1646;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1648 = x1647 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1649 = Fp(x1648.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1650 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1650 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1651 = x1648 - x1650;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1652 = x1651 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1653 = Fp(x1652.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1654 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1654 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1655 = x1652 - x1654;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1656 = x1655 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1657 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1657 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1658 = x99 - x1657;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1659 = x1657 * x1658;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1660 = x96 - x1657;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1661 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1661 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1662 = x1661 * x1660;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1662 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1663 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1663 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1663);
          reg = x1663;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1464;
          extern_args[2] = x98;
          extern_args[3] = x98;
          extern_args[4] = x98;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":43:68)
          auto x1664 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1464);
            reg = x1464;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          {
            extern_args[0] = x1664;
            extern_args[1] = x1464;
            extern_args[2] = x98;
            extern_args[3] = x98;
            extern_args[4] = x98;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1665 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1665 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1666 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1666 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1667 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1667 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1668 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1668 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1664);
            reg = x1664;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1666);
            reg = x1666;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1667);
            reg = x1667;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1668);
            reg = x1668;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68))
      auto x1669 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x1669 != Fp::invalid());
      if (x1669 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        auto x1670 = x1223 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        assert(x1670 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        auto x1671 = x1216 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        assert(x1671 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        assert(x1190 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:44");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1672 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1673 = Fp(x1672.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1673);
            reg = x1673;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1674 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1674 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1675 = x1672 - x1674;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1676 = x1675 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1677 = Fp(x1676.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1677);
            reg = x1677;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1678 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1678 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1679 = x1676 - x1678;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1680 = x1679 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1681 = Fp(x1680.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1681);
            reg = x1681;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1682 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1682 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1683 = x1680 - x1682;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1684 = x1683 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1685 = Fp(x1684.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1685);
            reg = x1685;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1686 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1686 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1687 = x1684 - x1686;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1688 = x1687 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1688);
          reg = x1688;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1689 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1689 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1690 = x99 - x1689;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1691 = x1689 * x1690;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1691);
          reg = x1691;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1692 = x96 - x1689;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1693 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1693 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1694 = x1693 * x1692;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1694 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1695 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1695 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1695);
          reg = x1695;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1465;
          extern_args[2] = x98;
          extern_args[3] = x98;
          extern_args[4] = x98;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":44:68)
          auto x1696 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1465);
            reg = x1465;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          {
            extern_args[0] = x1696;
            extern_args[1] = x1465;
            extern_args[2] = x98;
            extern_args[3] = x98;
            extern_args[4] = x98;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1697 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1697 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1698 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1698 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1699 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1699 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1700 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1700 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1696);
            reg = x1696;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1699);
            reg = x1699;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1700);
            reg = x1700;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68))
      auto x1701 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x1701 != Fp::invalid());
      if (x1701 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68)
        auto x1702 = x1223 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68)
        assert(x1702 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:45");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68)
        assert(x1216 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:45");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x1703 = x1177 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x1704 = x1179 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x1705 = x1179 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x1706 = x1182 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x1707 = x1180 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x1708 = x1703 + x1706;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x1709 = x1704 + x1707;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x1710 = x1709 + x1178;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x1711 = x1708 + x1298;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1711);
          reg = x1711;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1710);
          reg = x1710;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1705);
          reg = x1705;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1705);
          reg = x1705;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x1712 = x1477 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1713 = Fp(x1712.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1714 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x1714 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1715 = x1712 - x1714;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1716 = x1715 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1717 = Fp(x1716.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1718 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x1718 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1719 = x1716 - x1718;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1720 = x1719 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1721 = Fp(x1720.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1721);
            reg = x1721;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1722 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x1722 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1723 = x1720 - x1722;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1724 = x1723 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x1725 = Fp(x1724.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1725);
            reg = x1725;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1726 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x1726 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x1727 = x1724 - x1726;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x1728 = x1727 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1728);
          reg = x1728;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1729 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x1729 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x1730 = x99 - x1729;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x1731 = x1729 * x1730;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1731);
          reg = x1731;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x1732 = x96 - x1729;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1733 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x1733 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x1734 = x1733 * x1732;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x1734 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1735 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x1735 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1735);
          reg = x1735;
        }
        if (x1473 != 0) {
          extern_args[0] = x1469;
          extern_args[1] = x1401;
          extern_args[2] = x1405;
          extern_args[3] = x1413;
          extern_args[4] = x1417;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":45:68)
          auto x1736 = x1283 + x1469;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1401);
            reg = x1401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1405);
            reg = x1405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1413);
            reg = x1413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1417);
            reg = x1417;
          }
          {
            extern_args[0] = x1736;
            extern_args[1] = x1401;
            extern_args[2] = x1405;
            extern_args[3] = x1413;
            extern_args[4] = x1417;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1737 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x1737 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1738 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x1738 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1739 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x1739 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1740 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x1740 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1736);
            reg = x1736;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1737);
            reg = x1737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1738);
            reg = x1738;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1739);
            reg = x1739;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1740);
            reg = x1740;
          }
        }
        if (x1472 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1741 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x1741 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1742 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x1742 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x1743 = x1741 * x1742;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x1744 = x99 - x1742;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x1745 = x1743 * x1744;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x1745 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[1](Reg)"("./zirgen/components/mux.h":49:25))
    auto x1746 = arg2[102 * steps + ((cycle - 0) & mask)];
    assert(x1746 != Fp::invalid());
    if (x1746 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1747 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x1747 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1747);
        reg = x1747;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37))
      auto x1748 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x1748 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      auto x1749 = x1748 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      assert(x1749 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:113");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":116:41)
      auto x1750 = x975 * x78;
      {
        extern_args[0] = x1750;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x1751 = extern_outs[0];
        auto x1752 = extern_outs[1];
        auto x1753 = extern_outs[2];
        auto x1754 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1751);
          reg = x1751;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1752);
          reg = x1752;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1755 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x1755 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1756 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x1756 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1757 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x1757 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1758 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x1758 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1750);
        reg = x1750;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1755);
        reg = x1755;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1756);
        reg = x1756;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1757);
        reg = x1757;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1758);
        reg = x1758;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x1759 = Fp(x1758.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x1760 = x1759 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1760);
          reg = x1760;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x1761 = Fp(x1758.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x1762 = x1761 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1762);
          reg = x1762;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x1763 = Fp(x1758.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x1764 = x1763 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1764);
          reg = x1764;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x1765 = Fp(x1758.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x1766 = x1765 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1766);
          reg = x1766;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x1767 = Fp(x1758.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x1768 = x1767 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1768);
          reg = x1768;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x1769 = Fp(x1758.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1769);
          reg = x1769;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x1770 = Fp(x1757.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x1771 = x1770 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1771);
          reg = x1771;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x1772 = Fp(x1757.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x1773 = x1772 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1773);
          reg = x1773;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x1774 = Fp(x1757.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x1775 = x1774 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1775);
          reg = x1775;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x1776 = Fp(x1757.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x1777 = x1776 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1777);
          reg = x1777;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x1778 = Fp(x1757.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1778);
          reg = x1778;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x1779 = Fp(x1756.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x1780 = x1779 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1780);
          reg = x1780;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x1781 = Fp(x1756.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x1782 = x1781 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1782);
          reg = x1782;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x1783 = Fp(x1756.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x1784 = x1783 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1784);
          reg = x1784;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x1785 = Fp(x1756.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x1786 = x1785 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1786);
          reg = x1786;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x1787 = Fp(x1756.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1787);
          reg = x1787;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x1788 = Fp(x1755.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x1789 = x1788 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1789);
          reg = x1789;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x1790 = Fp(x1755.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1790);
          reg = x1790;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1791 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x1791 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1792 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x1792 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1793 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x1793 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1794 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x1794 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1795 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x1795 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1796 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x1796 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x1797 = x1793 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1798 = x1794 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x1799 = x1791 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x1800 = x1792 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1801 = x1798 + x1800;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1802 = x1801 + x1799;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x1803 = x1802 + x1796;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x1804 = x1797 + x1803;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x1805 = x1804 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x1806 = x1805 + x1795;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x1807 = x1758 - x1806;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x1807 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1808 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x1808 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1809 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x1809 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1810 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x1810 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1811 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x1811 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1812 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x1812 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1813 = x1808 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x1814 = x1809 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x1815 = x1810 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1816 = x1813 + x1814;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x1817 = x1816 + x1811;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1818 = x1817 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1819 = x1818 + x1815;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x1820 = x1819 + x1812;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x1821 = x1757 - x1820;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x1821 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1822 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x1822 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1823 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x1823 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1824 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x1824 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1825 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x1825 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1826 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x1826 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1827 = x1822 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x1828 = x1823 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x1829 = x1824 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x1830 = x1828 + x1825;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x1831 = x1830 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1832 = x1827 + x1831;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1833 = x1832 + x1829;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x1834 = x1833 + x1826;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x1835 = x1756 - x1834;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x1835 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1836 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x1836 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x1837 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x1837 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x1838 = x1836 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x1839 = x1838 + x1837;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x1840 = x1755 - x1839;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x1840 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x1755;
        extern_args[1] = x1756;
        extern_args[2] = x1757;
        extern_args[3] = x1758;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x1841 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1842 = (x1841 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1842);
            reg = x1842;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1843 = x1841 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1844 = (x1843 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1844);
            reg = x1844;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1845 = x1841 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1846 = (x1845 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1846);
            reg = x1846;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1847 = x1841 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1848 = (x1847 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1848);
            reg = x1848;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1849 = x1841 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1850 = (x1849 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1851 = x1841 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1852 = (x1851 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1852);
            reg = x1852;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1853 = x1841 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1854 = (x1853 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1855 = x1841 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1856 = (x1855 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1856);
            reg = x1856;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1857 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x1857 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1858 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x1858 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1859 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x1859 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1860 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x1860 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1861 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x1861 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1862 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x1862 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x1863 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x1863 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1864 = x1858 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1865 = x1859 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1866 = x1860 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1867 = x1861 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1868 = x1862 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1869 = x1863 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1870 = x1857 + x1864;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1871 = x1870 + x1865;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1872 = x1871 + x1866;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1873 = x1872 + x1867;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1874 = x1873 + x1868;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1875 = x1874 + x1869;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1876 = x1875 - x1841;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x1876 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69))
        auto x1877 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x1877 != Fp::invalid());
        if (x1877 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1878 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1879 = x1793 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1880 = x1795 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1881 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1882 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1883 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1884 = x1878 + x1882;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1885 = x1879 + x1883;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1886 = x1885 + x1792;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1887 = x1880 + x1817;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1888 = x1884 + x1887;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1888);
            reg = x1888;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1886);
            reg = x1886;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1881);
            reg = x1881;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x91);
            reg = x91;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69))
        auto x1889 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x1889 != Fp::invalid());
        if (x1889 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1890 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1891 = x1793 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1892 = x1795 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1893 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1894 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1895 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1896 = x1890 + x1894;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1897 = x1891 + x1895;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1898 = x1897 + x1792;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1899 = x1892 + x1817;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1900 = x1896 + x1899;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1900);
            reg = x1900;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1898);
            reg = x1898;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1893);
            reg = x1893;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1893);
            reg = x1893;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69))
        auto x1901 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x1901 != Fp::invalid());
        if (x1901 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1902 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1903 = x1793 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1904 = x1795 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1905 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1906 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1907 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1908 = x1902 + x1906;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1909 = x1903 + x1907;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1910 = x1909 + x1792;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1911 = x1904 + x1817;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1912 = x1908 + x1911;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1912);
            reg = x1912;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1910);
            reg = x1910;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1905);
            reg = x1905;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1905);
            reg = x1905;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68))
        auto x1913 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x1913 != Fp::invalid());
        if (x1913 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1914 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1915 = x1793 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1916 = x1795 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1917 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1918 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1919 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1920 = x1914 + x1918;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1921 = x1915 + x1919;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1922 = x1921 + x1792;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1923 = x1916 + x1817;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1924 = x1920 + x1923;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1924);
            reg = x1924;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1917);
            reg = x1917;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1917);
            reg = x1917;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68))
        auto x1925 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x1925 != Fp::invalid());
        if (x1925 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1926 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1927 = x1793 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1928 = x1795 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x1929 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x1930 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x1931 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1932 = x1926 + x1930;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1933 = x1927 + x1931;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x1934 = x1933 + x1792;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x1935 = x1928 + x1817;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x1936 = x1932 + x1935;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1936);
            reg = x1936;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1934);
            reg = x1934;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1929);
            reg = x1929;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1929);
            reg = x1929;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68))
        auto x1937 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x1937 != Fp::invalid());
        if (x1937 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1938 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1939 = x1793 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x1940 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x1941 = x1836 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x1942 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x1943 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x1944 = x1826 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x1945 = x1824 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1946 = x1938 + x1942;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1947 = x1939 + x1941;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1948 = x1946 + x1945;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1949 = x1947 + x1943;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1950 = x1948 + x1944;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1951 = x1949 + x1792;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1950);
            reg = x1950;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1951);
            reg = x1951;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1940);
            reg = x1940;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1940);
            reg = x1940;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68))
        auto x1952 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x1952 != Fp::invalid());
        if (x1952 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1953 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1954 = x1793 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x1955 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x1956 = x1836 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x1957 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x1958 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x1959 = x1826 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x1960 = x1824 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1961 = x1953 + x1957;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1962 = x1954 + x1956;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1963 = x1961 + x1960;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1964 = x1962 + x1958;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1965 = x1963 + x1959;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1966 = x1964 + x1792;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1965);
            reg = x1965;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1966);
            reg = x1966;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1955);
            reg = x1955;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1955);
            reg = x1955;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68))
        auto x1967 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x1967 != Fp::invalid());
        if (x1967 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1968 = x1791 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1969 = x1793 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x1970 = x1793 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x1971 = x1836 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x1972 = x1796 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x1973 = x1794 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x1974 = x1826 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x1975 = x1824 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1976 = x1968 + x1972;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1977 = x1969 + x1971;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1978 = x1976 + x1975;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1979 = x1977 + x1973;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x1980 = x1978 + x1974;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x1981 = x1979 + x1792;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1980);
            reg = x1980;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1981);
            reg = x1981;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1970);
            reg = x1970;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1970);
            reg = x1970;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:57)
      auto x1982 = x1747 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x1983 = x51 - x1982;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1984 = x1810 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x1985 = x1812 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1986 = x1984 + x1985;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x1987 = x1986 + x1822;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x1988 = x1983 + x1987;
      {
        extern_args[0] = x1988;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x1989 = extern_outs[0];
        auto x1990 = extern_outs[1];
        auto x1991 = extern_outs[2];
        auto x1992 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1989);
          reg = x1989;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1990);
          reg = x1990;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1991);
          reg = x1991;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1992);
          reg = x1992;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1993 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x1993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1994 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x1994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1995 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x1995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1996 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x1996 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1988);
        reg = x1988;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1993);
        reg = x1993;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1994);
        reg = x1994;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1995);
        reg = x1995;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1996);
        reg = x1996;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x1997 = x1795 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x1998 = x1997 + x1817;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:39)
      auto x1999 = x1983 + x1998;
      {
        extern_args[0] = x1999;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x2000 = extern_outs[0];
        auto x2001 = extern_outs[1];
        auto x2002 = extern_outs[2];
        auto x2003 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2000);
          reg = x2000;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2001);
          reg = x2001;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2002);
          reg = x2002;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2003);
          reg = x2003;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2004 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x2004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2005 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x2005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2006 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x2006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2007 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x2007 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1999);
        reg = x1999;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2004);
        reg = x2004;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2005);
        reg = x2005;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2006);
        reg = x2006;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2007);
        reg = x2007;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2008 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x2008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2009 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x2009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2010 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x2010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2011 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x2011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2012 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x2012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2013 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x2013 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2014 = x2012 * x963;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2015 = x2012 * x966;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2016 = x2013 * x2008;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2017 = x2013 * x2009;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2018 = x2013 * x2010;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2019 = x2013 * x2011;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:52)
      auto x2020 = x965 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":143:17)
      auto x2021 = x99 - x2012;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":145:17)
      auto x2022 = x99 - x2013;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x2023 = x962 - x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:41)
      auto x2024 = x964 + x2020;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2025 = x2021 * x1993;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2026 = x2021 * x1994;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2027 = x2021 * x1995;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2028 = x2021 * x1996;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2029 = x2022 * x2004;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2030 = x2022 * x2005;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2031 = x2022 * x2006;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2032 = x2022 * x2007;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2033 = x2012 * x2024;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2034 = x2012 * x2023;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2035 = x2025 + x2034;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2036 = x2026 + x2014;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2037 = x2027 + x2015;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2038 = x2028 + x2033;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2039 = x2029 + x2016;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2040 = x2030 + x2017;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2041 = x2031 + x2018;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2042 = x2032 + x2019;
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2043 = Fp(x2038.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2044 = x2043 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2044);
          reg = x2044;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2045 = Fp(x2038.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2046 = x2045 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2046);
          reg = x2046;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2047 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x2047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2048 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x2048 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2049 = x2048 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2050 = x2047 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2051 = x2049 + x2050;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2052 = x2038 - x2051;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2052 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2053 = Fp(x2042.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2054 = x2053 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2054);
          reg = x2054;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2055 = Fp(x2042.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2056 = x2055 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2056);
          reg = x2056;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2057 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x2057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2058 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x2058 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2059 = x2058 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2060 = x2057 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2061 = x2059 + x2060;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2062 = x2042 - x2061;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2062 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2039);
        reg = x2039;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2040);
        reg = x2040;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2041);
        reg = x2041;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[205 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2042);
        reg = x2042;
      }
      {
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2063 = Fp(x2035.asUInt32() & x2039.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2064 = Fp(x2036.asUInt32() & x2040.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2065 = Fp(x2037.asUInt32() & x2041.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2066 = Fp(x2038.asUInt32() & x2042.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2063);
          reg = x2063;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2064);
          reg = x2064;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2065);
          reg = x2065;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2066);
          reg = x2066;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2067 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x2067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2068 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x2068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2069 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x2069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2070 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x2070 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2071 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x2071 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2072 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x2072 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2073 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x2073 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2074 = x2067 * x2035;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2075 = x2067 * x2036;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2076 = x2067 * x2037;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2077 = x2067 * x2038;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2078 = x2068 * x2039;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2079 = x2068 * x2040;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2080 = x2068 * x2041;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2081 = x2068 * x2042;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2082 = x2069 * x2070;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2083 = x2069 * x2071;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2084 = x2069 * x2072;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2085 = x2069 * x2073;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2086 = x2074 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2087 = x2075 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2088 = x2076 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2089 = x2077 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2090 = x2086 + x2078;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2091 = x2087 + x2079;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2092 = x2088 + x2080;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2093 = x2089 + x2081;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2094 = x2092 + x2084;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2095 = x2090 + x2082;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2096 = x2091 + x2083;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2097 = x2093 + x2085;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x2098 = x2096 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x2099 = x2095 + x2098;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2100 = Fp(x2099.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2100);
          reg = x2100;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2101 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x2101 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2102 = x2099 - x2101;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2103 = x2102 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2104 = Fp(x2103.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2104);
          reg = x2104;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2105 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x2105 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2106 = x2103 - x2105;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2107 = x2106 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2107);
        reg = x2107;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x2108 = x2097 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2109 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x2109 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x2110 = x2109 + x2094;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x2111 = x2110 + x2108;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2112 = Fp(x2111.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2112);
          reg = x2112;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2113 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x2113 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2114 = x2111 - x2113;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2115 = x2114 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2116 = Fp(x2115.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2116);
          reg = x2116;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2117 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x2117 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2118 = x2115 - x2117;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2119 = x2118 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2119);
        reg = x2119;
      }
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2120 = Fp(x2117.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2121 = x2120 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2121);
          reg = x2121;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2122 = Fp(x2117.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2123 = x2122 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2123);
          reg = x2123;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2124 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x2124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2125 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x2125 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2126 = x2124 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2127 = x2125 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2128 = x2126 + x2127;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2129 = x2117 - x2128;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2129 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:45)
      auto x2130 = x99 - x2048;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:23)
      auto x2131 = x99 - x2058;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:34)
      auto x2132 = x99 - x2124;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2133 = x2048 * x2131;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2134 = x2133 * x2132;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x2135 = x2130 * x2058;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x2136 = x2135 * x2124;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2137 = x2134 + x2136;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:3)
      {
        auto& reg = arg2[211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2137);
        reg = x2137;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x2138 = arg2[211 * steps + ((cycle - 0) & mask)];
      assert(x2138 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x2139 = x2138 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x2140 = x2139 * x2124;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x2141 = x2138 + x2124;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x2142 = x2141 - x2140;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:3)
      {
        auto& reg = arg2[212 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2142);
        reg = x2142;
      }
      // loc("zirgen/components/u32.cpp":143:26)
      auto x2143 = x2105 * x93;
      // loc("zirgen/components/u32.cpp":143:12)
      auto x2144 = x2101 + x2143;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2145 = (x2144 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2146 = inv(x2144);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2146);
          reg = x2146;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2147 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x2147 != Fp::invalid());
      if (x2147 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2144 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2148 = x99 - x2147;
      if (x2148 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2149 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x2149 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2150 = x2144 * x2149;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2151 = x2150 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2151 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:27)
      auto x2152 = x2117 * x93;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x2153 = x2113 + x2152;
      // loc("zirgen/components/u32.cpp":144:47)
      auto x2154 = x2148 * x80;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x2155 = x2153 + x2154;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2156 = (x2155 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2157 = inv(x2155);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2157);
          reg = x2157;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2158 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x2158 != Fp::invalid());
      if (x2158 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2155 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2159 = x99 - x2158;
      if (x2159 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2160 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x2160 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2161 = x2155 * x2160;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2162 = x2161 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2162 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2163 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x2163 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2164 = arg2[212 * steps + ((cycle - 0) & mask)];
      assert(x2164 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:10)
      auto x2165 = x99 - x2163;
      extern_args[0] = x2008;
      extern_args[1] = x2009;
      extern_args[2] = x2010;
      extern_args[3] = x2011;
      extern_args[4] = x1987;
      extern_args[5] = x1993;
      extern_args[6] = x1994;
      extern_args[7] = x1995;
      extern_args[8] = x1996;
      extern_args[9] = x1998;
      extern_args[10] = x2004;
      extern_args[11] = x2005;
      extern_args[12] = x2006;
      extern_args[13] = x2007;
      extern_args[14] = x2035;
      extern_args[15] = x2036;
      extern_args[16] = x2037;
      extern_args[17] = x2038;
      extern_args[18] = x2039;
      extern_args[19] = x2040;
      extern_args[20] = x2041;
      extern_args[21] = x2042;
      extern_args[22] = x2101;
      extern_args[23] = x2105;
      extern_args[24] = x2113;
      extern_args[25] = x2117;
      extern_args[26] = x2158;
      extern_args[27] = x2164;
      extern_args[28] = x2165;
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2166 = x1824 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x2167 = x1826 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2168 = x2166 + x2167;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2169 = x2168 + x1836;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2170 = (x2169 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2170);
          reg = x2170;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2171 = inv(x2169);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2171);
          reg = x2171;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2172 = arg2[217 * steps + ((cycle - 0) & mask)];
      assert(x2172 != Fp::invalid());
      if (x2172 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2169 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2173 = x99 - x2172;
      if (x2173 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2174 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x2174 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2175 = x2169 * x2174;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2176 = x2175 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2176 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":165:13)
      auto x2177 = x975 + x81;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69))
      auto x2178 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x2178 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":71:17)
      auto x2179 = x2011 * x49;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:13)
      auto x2180 = x2158 * x2177;
      // loc("zirgen/components/u32.cpp":68:25)
      auto x2181 = x2009 * x93;
      // loc("zirgen/components/u32.cpp":68:49)
      auto x2182 = x2010 * x80;
      // loc("zirgen/components/u32.cpp":71:16)
      auto x2183 = x2179 * x50;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":175:36)
      auto x2184 = x99 - x2164;
      // loc("zirgen/components/u32.cpp":68:13)
      auto x2185 = x2008 + x2181;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":175:35)
      auto x2186 = x2184 * x2177;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:35)
      auto x2187 = x2159 * x2177;
      // loc("zirgen/components/u32.cpp":68:13)
      auto x2188 = x2185 + x2182;
      // loc("zirgen/components/u32.cpp":71:10)
      auto x2189 = x2188 + x2183;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":166:14)
      auto x2190 = x975 + x2189;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":175:13)
      auto x2191 = x2164 * x2190;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:13)
      auto x2192 = x2158 * x2190;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:34)
      auto x2193 = x2159 * x2190;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":175:13)
      auto x2194 = x2191 + x2186;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":173:13)
      auto x2195 = x2192 + x2187;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":174:13)
      auto x2196 = x2180 + x2193;
      if (x2178 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
        auto x2197 = x1837 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
        assert(x2197 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:46");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
        auto x2198 = x1830 - x81;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
        assert(x2198 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:46");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2199 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2200 = x1793 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x2201 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x2202 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x2203 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2204 = x2199 + x2202;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2205 = x2200 + x2203;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2206 = x2205 + x1792;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2207 = x2204 + x1998;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2207);
          reg = x2207;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2206);
          reg = x2206;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2201);
          reg = x2201;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2201);
          reg = x2201;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":43:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":44:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":45:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x91);
          reg = x91;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2208 = x2177 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2209 = Fp(x2208.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2209);
            reg = x2209;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2210 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2210 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2211 = x2208 - x2210;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2212 = x2211 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2213 = Fp(x2212.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2213);
            reg = x2213;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2214 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2214 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2215 = x2212 - x2214;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2216 = x2215 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2217 = Fp(x2216.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2217);
            reg = x2217;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2218 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2218 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2219 = x2216 - x2218;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2220 = x2219 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2221 = Fp(x2220.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2221);
            reg = x2221;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2222 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2222 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2223 = x2220 - x2222;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2224 = x2223 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2224);
          reg = x2224;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2225 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2225 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2226 = x99 - x2225;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2227 = x2225 * x2226;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2227);
          reg = x2227;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2228 = x96 - x2225;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2229 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2229 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2230 = x2229 * x2228;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2230 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2231 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2231 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2231);
          reg = x2231;
        }
        if (x2173 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":46:69)
          auto x2232 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2232;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2233 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2233 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2234 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2234 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2235 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2235 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2236 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2236 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2232);
            reg = x2232;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2234);
            reg = x2234;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2235);
            reg = x2235;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2236);
            reg = x2236;
          }
        }
        if (x2172 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69))
      auto x2237 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x2237 != Fp::invalid());
      if (x2237 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
        auto x2238 = x1837 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
        assert(x2238 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:47");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
        auto x2239 = x1830 - x69;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
        assert(x2239 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:47");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2240 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2241 = x1793 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x2242 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x2243 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x2244 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2245 = x2240 + x2243;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2246 = x2241 + x2244;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2247 = x2246 + x1792;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2248 = x2245 + x1998;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2248);
          reg = x2248;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2247);
          reg = x2247;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2242);
          reg = x2242;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2242);
          reg = x2242;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":38:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":39:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":40:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2249 = x2177 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2250 = Fp(x2249.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2250);
            reg = x2250;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2251 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2251 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2252 = x2249 - x2251;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2253 = x2252 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2254 = Fp(x2253.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2254);
            reg = x2254;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2255 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2255 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2256 = x2253 - x2255;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2257 = x2256 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2258 = Fp(x2257.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2258);
            reg = x2258;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2259 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2259 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2260 = x2257 - x2259;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2261 = x2260 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2262 = Fp(x2261.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2262);
            reg = x2262;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2263 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2263 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2264 = x2261 - x2263;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2265 = x2264 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2265);
          reg = x2265;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2266 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2266 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2267 = x99 - x2266;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2268 = x2266 * x2267;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2268);
          reg = x2268;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2269 = x96 - x2266;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2270 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2270 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2271 = x2270 * x2269;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2271 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2272 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2272 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2272);
          reg = x2272;
        }
        if (x2173 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":47:69)
          auto x2273 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2273;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2274 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2274 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2275 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2275 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2276 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2276 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2277 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2277 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2273);
            reg = x2273;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2275);
            reg = x2275;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2276);
            reg = x2276;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2277);
            reg = x2277;
          }
        }
        if (x2172 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69))
      auto x2278 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x2278 != Fp::invalid());
      if (x2278 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
        auto x2279 = x1837 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
        assert(x2279 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:48");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
        auto x2280 = x1830 - x68;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
        assert(x2280 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:48");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2281 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2282 = x1793 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x2283 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x2284 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x2285 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2286 = x2281 + x2284;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2287 = x2282 + x2285;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2288 = x2287 + x1792;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2289 = x2286 + x1998;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2289);
          reg = x2289;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2288);
          reg = x2288;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2283);
          reg = x2283;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2283);
          reg = x2283;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":33:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":34:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":35:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2290 = x2177 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2291 = Fp(x2290.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2291);
            reg = x2291;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2292 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2292 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2293 = x2290 - x2292;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2294 = x2293 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2295 = Fp(x2294.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2295);
            reg = x2295;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2296 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2296 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2297 = x2294 - x2296;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2298 = x2297 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2299 = Fp(x2298.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2299);
            reg = x2299;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2300 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2300 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2301 = x2298 - x2300;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2302 = x2301 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2303 = Fp(x2302.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2303);
            reg = x2303;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2304 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2304 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2305 = x2302 - x2304;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2306 = x2305 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2306);
          reg = x2306;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2307 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2307 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2308 = x99 - x2307;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2309 = x2307 * x2308;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2309);
          reg = x2309;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2310 = x96 - x2307;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2311 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2311 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2312 = x2311 * x2310;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2312 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2313 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2313 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2313);
          reg = x2313;
        }
        if (x2173 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":48:69)
          auto x2314 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2314;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2315 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2315 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2316 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2316 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2317 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2317 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2318 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2318 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2314);
            reg = x2314;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2315);
            reg = x2315;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2318);
            reg = x2318;
          }
        }
        if (x2172 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68))
      auto x2319 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x2319 != Fp::invalid());
      if (x2319 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
        auto x2320 = x1837 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
        assert(x2320 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:49");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
        auto x2321 = x1830 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
        assert(x2321 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:49");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2322 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2323 = x1793 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x2324 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x2325 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x2326 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2327 = x2322 + x2325;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2328 = x2323 + x2326;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2329 = x2328 + x1792;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2330 = x2327 + x1998;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2330);
          reg = x2330;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2329);
          reg = x2329;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2324);
          reg = x2324;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2324);
          reg = x2324;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2331 = x2177 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2332 = Fp(x2331.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2332);
            reg = x2332;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2333 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2333 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2334 = x2331 - x2333;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2335 = x2334 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2336 = Fp(x2335.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2336);
            reg = x2336;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2337 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2337 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2338 = x2335 - x2337;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2339 = x2338 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2340 = Fp(x2339.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2340);
            reg = x2340;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2341 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2341 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2342 = x2339 - x2341;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2343 = x2342 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2344 = Fp(x2343.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2344);
            reg = x2344;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2345 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2345 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2346 = x2343 - x2345;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2347 = x2346 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2347);
          reg = x2347;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2348 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2348 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2349 = x99 - x2348;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2350 = x2348 * x2349;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2350);
          reg = x2350;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2351 = x96 - x2348;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2352 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2352 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2353 = x2352 * x2351;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2353 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2354 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2354 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2354);
          reg = x2354;
        }
        if (x2173 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2164;
          extern_args[2] = x98;
          extern_args[3] = x98;
          extern_args[4] = x98;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":49:68)
          auto x2355 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2164);
            reg = x2164;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          {
            extern_args[0] = x2355;
            extern_args[1] = x2164;
            extern_args[2] = x98;
            extern_args[3] = x98;
            extern_args[4] = x98;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2356 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2356 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2357 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2357 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2358 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2358 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2359 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2359 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2355);
            reg = x2355;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2356);
            reg = x2356;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2357);
            reg = x2357;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2358);
            reg = x2358;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2359);
            reg = x2359;
          }
        }
        if (x2172 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68))
      auto x2360 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      if (x2360 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
        auto x2361 = x1837 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
        assert(x2361 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:50");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
        auto x2362 = x1830 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
        assert(x2362 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:50");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2363 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2364 = x1793 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x2365 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x2366 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x2367 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2368 = x2363 + x2366;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2369 = x2364 + x2367;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x2370 = x2369 + x1792;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x2371 = x2368 + x1998;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2371);
          reg = x2371;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2370);
          reg = x2370;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2365);
          reg = x2365;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2365);
          reg = x2365;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2372 = x2177 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2373 = Fp(x2372.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2373);
            reg = x2373;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2374 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2374 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2375 = x2372 - x2374;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2376 = x2375 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2377 = Fp(x2376.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2377);
            reg = x2377;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2378 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2378 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2379 = x2376 - x2378;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2380 = x2379 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2381 = Fp(x2380.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2381);
            reg = x2381;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2382 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2382 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2383 = x2380 - x2382;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2384 = x2383 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2385 = Fp(x2384.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2385);
            reg = x2385;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2386 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2386 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2387 = x2384 - x2386;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2388 = x2387 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2388);
          reg = x2388;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2389 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2389 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2390 = x99 - x2389;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2391 = x2389 * x2390;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2391);
          reg = x2391;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2392 = x96 - x2389;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2393 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2393 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2394 = x2393 * x2392;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2394 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2395 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2395 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2395);
          reg = x2395;
        }
        if (x2173 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2165;
          extern_args[2] = x98;
          extern_args[3] = x98;
          extern_args[4] = x98;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":50:68)
          auto x2396 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2165);
            reg = x2165;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          {
            extern_args[0] = x2396;
            extern_args[1] = x2165;
            extern_args[2] = x98;
            extern_args[3] = x98;
            extern_args[4] = x98;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2397 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2397 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2398 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2398 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2399 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2399 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2400 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2400 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2396);
            reg = x2396;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2397);
            reg = x2397;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2398);
            reg = x2398;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2399);
            reg = x2399;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2400);
            reg = x2400;
          }
        }
        if (x2172 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68))
      auto x2401 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x2401 != Fp::invalid());
      if (x2401 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
        auto x2402 = x1837 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
        assert(x2402 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:51");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
        assert(x1830 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:51");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2403 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2404 = x1793 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x2405 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x2406 = x1836 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x2407 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x2408 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2409 = x2403 + x2407;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2410 = x2404 + x2406;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2411 = x2409 + x2166;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2412 = x2410 + x2408;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2413 = x2411 + x2167;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2414 = x2412 + x1792;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2413);
          reg = x2413;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2414);
          reg = x2414;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2405);
          reg = x2405;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2405);
          reg = x2405;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2415 = x2195 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2416 = Fp(x2415.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2416);
            reg = x2416;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2417 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2417 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2418 = x2415 - x2417;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2419 = x2418 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2420 = Fp(x2419.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2420);
            reg = x2420;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2421 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2421 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2422 = x2419 - x2421;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2423 = x2422 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2424 = Fp(x2423.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2424);
            reg = x2424;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2425 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2425 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2426 = x2423 - x2425;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2427 = x2426 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2428 = Fp(x2427.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2428);
            reg = x2428;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2429 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2429 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2430 = x2427 - x2429;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2431 = x2430 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2431);
          reg = x2431;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2432 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2432 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2433 = x99 - x2432;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2434 = x2432 * x2433;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2434);
          reg = x2434;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2435 = x96 - x2432;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2436 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2436 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2437 = x2436 * x2435;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2437 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2438 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2438 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2438);
          reg = x2438;
        }
        if (x98 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
          auto x2439 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2439;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2440 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2440 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2441 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2441 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2442 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2442 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2443 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2443 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2439);
            reg = x2439;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2442);
            reg = x2442;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2443);
            reg = x2443;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":51:68)
        auto x2444 = x2172 + x99;
        if (x2444 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68))
      auto x2445 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x2445 != Fp::invalid());
      if (x2445 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        auto x2446 = x1837 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        assert(x2446 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:52");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        auto x2447 = x1830 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        assert(x2447 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:52");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2448 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2449 = x1793 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x2450 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x2451 = x1836 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x2452 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x2453 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2454 = x2448 + x2452;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2455 = x2449 + x2451;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2456 = x2454 + x2166;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2457 = x2455 + x2453;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2458 = x2456 + x2167;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2459 = x2457 + x1792;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2458);
          reg = x2458;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2459);
          reg = x2459;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2450);
          reg = x2450;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2450);
          reg = x2450;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2460 = x2196 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2461 = Fp(x2460.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2462 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2462 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2463 = x2460 - x2462;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2464 = x2463 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2465 = Fp(x2464.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2466 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2466 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2467 = x2464 - x2466;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2468 = x2467 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2469 = Fp(x2468.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2470 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2470 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2471 = x2468 - x2470;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2472 = x2471 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2473 = Fp(x2472.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2473);
            reg = x2473;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2474 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2474 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2475 = x2472 - x2474;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2476 = x2475 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2476);
          reg = x2476;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2477 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2477 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2478 = x99 - x2477;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2479 = x2477 * x2478;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2479);
          reg = x2479;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2480 = x96 - x2477;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2481 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2481 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2482 = x2481 * x2480;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2482 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2483 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2483 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2483);
          reg = x2483;
        }
        if (x98 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
          auto x2484 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2484;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2485 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2485 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2486 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2486 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2487 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2487 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2488 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2488 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2484);
            reg = x2484;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2485);
            reg = x2485;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2486);
            reg = x2486;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2487);
            reg = x2487;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2488);
            reg = x2488;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":52:68)
        auto x2489 = x2172 + x99;
        if (x2489 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68))
      auto x2490 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x2490 != Fp::invalid());
      if (x2490 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        auto x2491 = x1837 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        assert(x2491 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:53");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        auto x2492 = x1830 - x81;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        assert(x2492 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:53");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2493 = x1791 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2494 = x1793 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x2495 = x1793 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x2496 = x1836 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x2497 = x1796 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x2498 = x1794 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2499 = x2493 + x2497;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2500 = x2494 + x2496;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2501 = x2499 + x2166;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2502 = x2500 + x2498;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2503 = x2501 + x2167;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2504 = x2502 + x1792;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2503);
          reg = x2503;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2504);
          reg = x2504;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2495);
          reg = x2495;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2495);
          reg = x2495;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2505 = x2194 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2506 = Fp(x2505.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2506);
            reg = x2506;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2507 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2507 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2508 = x2505 - x2507;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2509 = x2508 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2510 = Fp(x2509.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2510);
            reg = x2510;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2511 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2511 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2512 = x2509 - x2511;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2513 = x2512 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2514 = Fp(x2513.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2514);
            reg = x2514;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2515 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2515 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2516 = x2513 - x2515;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2517 = x2516 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2518 = Fp(x2517.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2518);
            reg = x2518;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2519 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2519 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2520 = x2517 - x2519;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2521 = x2520 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2521);
          reg = x2521;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2522 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2522 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2523 = x99 - x2522;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x2524 = x2522 * x2523;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2524);
          reg = x2524;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x2525 = x96 - x2522;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2526 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x2526 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x2527 = x2526 * x2525;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x2527 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2528 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x2528 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2528);
          reg = x2528;
        }
        if (x98 != 0) {
          extern_args[0] = x2169;
          extern_args[1] = x2101;
          extern_args[2] = x2105;
          extern_args[3] = x2113;
          extern_args[4] = x2117;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
          auto x2529 = x1983 + x2169;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2101);
            reg = x2101;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2117);
            reg = x2117;
          }
          {
            extern_args[0] = x2529;
            extern_args[1] = x2101;
            extern_args[2] = x2105;
            extern_args[3] = x2113;
            extern_args[4] = x2117;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2530 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x2530 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2531 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x2531 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2532 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x2532 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2533 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x2533 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2529);
            reg = x2529;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2530);
            reg = x2530;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2531);
            reg = x2531;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2532);
            reg = x2532;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2533);
            reg = x2533;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":53:68)
        auto x2534 = x2172 + x99;
        if (x2534 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2535 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x2535 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2536 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x2536 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x2537 = x2535 * x2536;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x2538 = x99 - x2536;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x2539 = x2537 * x2538;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x2539 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[2](Reg)"("./zirgen/components/mux.h":49:25))
    auto x2540 = arg2[103 * steps + ((cycle - 0) & mask)];
    assert(x2540 != Fp::invalid());
    if (x2540 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2541 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x2541 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2541);
        reg = x2541;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37))
      auto x2542 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x2542 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      auto x2543 = x2542 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":113:37)
      assert(x2543 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:113");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":116:41)
      auto x2544 = x975 * x78;
      {
        extern_args[0] = x2544;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x2545 = extern_outs[0];
        auto x2546 = extern_outs[1];
        auto x2547 = extern_outs[2];
        auto x2548 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2545);
          reg = x2545;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2546);
          reg = x2546;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2547);
          reg = x2547;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2548);
          reg = x2548;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2549 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x2549 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2550 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x2550 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2551 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x2551 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2552 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x2552 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2544);
        reg = x2544;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2549);
        reg = x2549;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2550);
        reg = x2550;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2551);
        reg = x2551;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2552);
        reg = x2552;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x2553 = Fp(x2552.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x2554 = x2553 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2554);
          reg = x2554;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x2555 = Fp(x2552.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x2556 = x2555 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2556);
          reg = x2556;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x2557 = Fp(x2552.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x2558 = x2557 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2558);
          reg = x2558;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x2559 = Fp(x2552.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x2560 = x2559 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2560);
          reg = x2560;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x2561 = Fp(x2552.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x2562 = x2561 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2562);
          reg = x2562;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x2563 = Fp(x2552.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2563);
          reg = x2563;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x2564 = Fp(x2551.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x2565 = x2564 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2565);
          reg = x2565;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x2566 = Fp(x2551.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x2567 = x2566 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x2568 = Fp(x2551.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x2569 = x2568 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2569);
          reg = x2569;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x2570 = Fp(x2551.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x2571 = x2570 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2571);
          reg = x2571;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x2572 = Fp(x2551.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2572);
          reg = x2572;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x2573 = Fp(x2550.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x2574 = x2573 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2574);
          reg = x2574;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x2575 = Fp(x2550.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x2576 = x2575 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2576);
          reg = x2576;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x2577 = Fp(x2550.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x2578 = x2577 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2578);
          reg = x2578;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x2579 = Fp(x2550.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x2580 = x2579 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2580);
          reg = x2580;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x2581 = Fp(x2550.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2581);
          reg = x2581;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x2582 = Fp(x2549.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x2583 = x2582 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2583);
          reg = x2583;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x2584 = Fp(x2549.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2584);
          reg = x2584;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2585 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x2585 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2586 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x2586 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2587 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x2587 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2588 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x2588 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2589 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x2589 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2590 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x2590 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x2591 = x2587 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x2592 = x2588 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x2593 = x2585 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x2594 = x2586 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x2595 = x2592 + x2594;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x2596 = x2595 + x2593;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x2597 = x2596 + x2590;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x2598 = x2591 + x2597;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x2599 = x2598 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x2600 = x2599 + x2589;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x2601 = x2552 - x2600;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x2601 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2602 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x2602 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2603 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x2603 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2604 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x2604 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2605 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x2605 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2606 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x2606 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x2607 = x2602 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x2608 = x2603 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x2609 = x2604 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x2610 = x2607 + x2608;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x2611 = x2610 + x2605;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x2612 = x2611 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x2613 = x2612 + x2609;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x2614 = x2613 + x2606;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x2615 = x2551 - x2614;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x2615 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2616 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x2616 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2617 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x2617 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2618 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x2618 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2619 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x2619 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2620 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x2620 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x2621 = x2616 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x2622 = x2617 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x2623 = x2618 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x2624 = x2622 + x2619;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x2625 = x2624 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x2626 = x2621 + x2625;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x2627 = x2626 + x2623;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x2628 = x2627 + x2620;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x2629 = x2550 - x2628;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x2629 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2630 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x2630 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x2631 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x2631 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x2632 = x2630 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x2633 = x2632 + x2631;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x2634 = x2549 - x2633;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x2634 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x2549;
        extern_args[1] = x2550;
        extern_args[2] = x2551;
        extern_args[3] = x2552;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x2635 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2636 = (x2635 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2637 = x2635 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2638 = (x2637 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2638);
            reg = x2638;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2639 = x2635 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2640 = (x2639 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2640);
            reg = x2640;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2641 = x2635 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2642 = (x2641 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2642);
            reg = x2642;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2643 = x2635 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2644 = (x2643 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2644);
            reg = x2644;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2645 = x2635 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2646 = (x2645 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2646);
            reg = x2646;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2647 = x2635 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2648 = (x2647 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2648);
            reg = x2648;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2649 = x2635 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2650 = (x2649 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2650);
            reg = x2650;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2651 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x2651 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2652 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x2652 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2653 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x2653 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2654 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x2654 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2655 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x2655 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2656 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x2656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2657 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x2657 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2658 = x2652 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2659 = x2653 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2660 = x2654 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2661 = x2655 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2662 = x2656 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2663 = x2657 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2664 = x2651 + x2658;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2665 = x2664 + x2659;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2666 = x2665 + x2660;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2667 = x2666 + x2661;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2668 = x2667 + x2662;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2669 = x2668 + x2663;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x2670 = x2669 - x2635;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x2670 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68))
        auto x2671 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x2671 != Fp::invalid());
        if (x2671 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2672 = x2585 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2673 = x2587 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x2674 = x2587 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x2675 = x2630 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x2676 = x2590 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x2677 = x2588 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x2678 = x2620 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x2679 = x2618 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2680 = x2672 + x2676;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2681 = x2673 + x2675;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2682 = x2680 + x2679;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2683 = x2681 + x2677;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2684 = x2682 + x2678;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2685 = x2683 + x2586;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2684);
            reg = x2684;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2685);
            reg = x2685;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2674);
            reg = x2674;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2674);
            reg = x2674;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68))
        auto x2686 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x2686 != Fp::invalid());
        if (x2686 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2687 = x2585 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2688 = x2587 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x2689 = x2587 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x2690 = x2630 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x2691 = x2590 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x2692 = x2588 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x2693 = x2620 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x2694 = x2618 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2695 = x2687 + x2691;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2696 = x2688 + x2690;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2697 = x2695 + x2694;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2698 = x2696 + x2692;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2699 = x2697 + x2693;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2700 = x2698 + x2586;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2699);
            reg = x2699;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2700);
            reg = x2700;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2689);
            reg = x2689;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2689);
            reg = x2689;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68))
        auto x2701 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x2701 != Fp::invalid());
        if (x2701 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2702 = x2585 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2703 = x2587 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
          auto x2704 = x2587 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
          auto x2705 = x2630 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
          auto x2706 = x2590 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
          auto x2707 = x2588 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:51)
          auto x2708 = x2620 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:36)
          auto x2709 = x2618 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2710 = x2702 + x2706;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2711 = x2703 + x2705;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2712 = x2710 + x2709;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2713 = x2711 + x2707;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
          auto x2714 = x2712 + x2708;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
          auto x2715 = x2713 + x2586;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2714);
            reg = x2714;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2715);
            reg = x2715;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2704);
            reg = x2704;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2704);
            reg = x2704;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68))
        auto x2716 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x2716 != Fp::invalid());
        if (x2716 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
          auto x2717 = x2585 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
          auto x2718 = x2587 * x46;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x2719 = x2589 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":109:7)
          auto x2720 = x2587 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:39)
          auto x2721 = x2605 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:21)
          auto x2722 = x2590 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:54)
          auto x2723 = x2588 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
          auto x2724 = x2717 + x2722;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
          auto x2725 = x2718 + x2609;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
          auto x2726 = x2725 + x2606;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x2727 = x2719 + x2611;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
          auto x2728 = x2724 + x2727;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
          auto x2729 = x2728 - x2605;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
          auto x2730 = x2626 + x2721;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
          auto x2731 = x2730 + x2723;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
          auto x2732 = x2731 + x2586;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2732);
            reg = x2732;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2726);
            reg = x2726;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2720);
            reg = x2720;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68))
        auto x2733 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x2733 != Fp::invalid());
        if (x2733 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x2734 = x2585 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x2735 = x2587 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x2736 = x2589 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x2737 = x2587 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x2738 = x2590 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x2739 = x2588 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x2740 = x2734 + x2738;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x2741 = x2735 + x2739;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x2742 = x2741 + x2586;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x2743 = x2736 + x2611;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x2744 = x2740 + x2743;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2744);
            reg = x2744;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2742);
            reg = x2742;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68))
        auto x2745 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x2745 != Fp::invalid());
        if (x2745 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2626);
            reg = x2626;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2614);
            reg = x2614;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2600);
            reg = x2600;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":48:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":49:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":50:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68))
        auto x2746 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x2746 != Fp::invalid());
        if (x2746 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2626);
            reg = x2626;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2614);
            reg = x2614;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2600);
            reg = x2600;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:57)
      auto x2747 = x2541 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x2748 = x51 - x2747;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x2749 = x2604 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x2750 = x2606 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x2751 = x2749 + x2750;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x2752 = x2751 + x2616;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":138:39)
      auto x2753 = x2748 + x2752;
      {
        extern_args[0] = x2753;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x2754 = extern_outs[0];
        auto x2755 = extern_outs[1];
        auto x2756 = extern_outs[2];
        auto x2757 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2754);
          reg = x2754;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2755);
          reg = x2755;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2756);
          reg = x2756;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2757);
          reg = x2757;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2758 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x2758 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2759 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x2759 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2760 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x2760 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2761 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x2761 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2753);
        reg = x2753;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2758);
        reg = x2758;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2759);
        reg = x2759;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2760);
        reg = x2760;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2761);
        reg = x2761;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x2762 = x2589 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x2763 = x2762 + x2611;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":139:39)
      auto x2764 = x2748 + x2763;
      {
        extern_args[0] = x2764;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x2765 = extern_outs[0];
        auto x2766 = extern_outs[1];
        auto x2767 = extern_outs[2];
        auto x2768 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2765);
          reg = x2765;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2766);
          reg = x2766;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2767);
          reg = x2767;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2768);
          reg = x2768;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2769 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x2769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2770 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x2770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2771 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x2771 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2772 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x2772 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2764);
        reg = x2764;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2769);
        reg = x2769;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2770);
        reg = x2770;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2771);
        reg = x2771;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2772);
        reg = x2772;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2773 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x2773 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2774 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x2774 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2775 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x2775 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2776 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x2776 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2777 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x2777 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2778 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x2778 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2779 = x2777 * x963;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2780 = x2777 * x966;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2781 = x2778 * x2773;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2782 = x2778 * x2774;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2783 = x2778 * x2775;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2784 = x2778 * x2776;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:52)
      auto x2785 = x965 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":143:17)
      auto x2786 = x99 - x2777;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":145:17)
      auto x2787 = x99 - x2778;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x2788 = x962 - x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:41)
      auto x2789 = x964 + x2785;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2790 = x2786 * x2758;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2791 = x2786 * x2759;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2792 = x2786 * x2760;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2793 = x2786 * x2761;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2794 = x2787 * x2769;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2795 = x2787 * x2770;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2796 = x2787 * x2771;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2797 = x2787 * x2772;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2798 = x2777 * x2789;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2799 = x2777 * x2788;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2800 = x2790 + x2799;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2801 = x2791 + x2779;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2802 = x2792 + x2780;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2803 = x2793 + x2798;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2804 = x2794 + x2781;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2805 = x2795 + x2782;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2806 = x2796 + x2783;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2807 = x2797 + x2784;
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2808 = Fp(x2803.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2809 = x2808 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2809);
          reg = x2809;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2810 = Fp(x2803.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2811 = x2810 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2811);
          reg = x2811;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2812 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x2812 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2813 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x2813 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2814 = x2813 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2815 = x2812 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2816 = x2814 + x2815;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2817 = x2803 - x2816;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2817 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2818 = Fp(x2807.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2819 = x2818 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2819);
          reg = x2819;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2820 = Fp(x2807.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2821 = x2820 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2821);
          reg = x2821;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2822 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x2822 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2823 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x2823 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2824 = x2823 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2825 = x2822 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2826 = x2824 + x2825;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2827 = x2807 - x2826;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2827 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2804);
        reg = x2804;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2805);
        reg = x2805;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2806);
        reg = x2806;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[205 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2807);
        reg = x2807;
      }
      {
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2828 = Fp(x2800.asUInt32() & x2804.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2829 = Fp(x2801.asUInt32() & x2805.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2830 = Fp(x2802.asUInt32() & x2806.asUInt32());
        // loc("zirgen/components/u32.cpp":119:20)
        auto x2831 = Fp(x2803.asUInt32() & x2807.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2828);
          reg = x2828;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2829);
          reg = x2829;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2831);
          reg = x2831;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2832 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x2832 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2833 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x2833 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2834 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x2834 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2835 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x2835 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2836 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x2836 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2837 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x2837 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2838 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x2838 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2839 = x2832 * x2800;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2840 = x2832 * x2801;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2841 = x2832 * x2802;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2842 = x2832 * x2803;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2843 = x2833 * x2804;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2844 = x2833 * x2805;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2845 = x2833 * x2806;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2846 = x2833 * x2807;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2847 = x2834 * x2835;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2848 = x2834 * x2836;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2849 = x2834 * x2837;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x2850 = x2834 * x2838;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2851 = x2839 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2852 = x2840 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2853 = x2841 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2854 = x2842 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2855 = x2851 + x2843;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2856 = x2852 + x2844;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2857 = x2853 + x2845;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2858 = x2854 + x2846;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2859 = x2857 + x2849;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2860 = x2855 + x2847;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2861 = x2856 + x2848;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x2862 = x2858 + x2850;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x2863 = x2861 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x2864 = x2860 + x2863;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2865 = Fp(x2864.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2866 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x2866 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2867 = x2864 - x2866;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2868 = x2867 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2869 = Fp(x2868.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2870 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x2870 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2871 = x2868 - x2870;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2872 = x2871 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2872);
        reg = x2872;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x2873 = x2862 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2874 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x2874 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x2875 = x2874 + x2859;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x2876 = x2875 + x2873;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2877 = Fp(x2876.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2877);
          reg = x2877;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2878 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x2878 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2879 = x2876 - x2878;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2880 = x2879 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2881 = Fp(x2880.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2881);
          reg = x2881;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2882 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x2882 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2883 = x2880 - x2882;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2884 = x2883 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2884);
        reg = x2884;
      }
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x2885 = Fp(x2882.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x2886 = x2885 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2886);
          reg = x2886;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x2887 = Fp(x2882.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x2888 = x2887 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2888);
          reg = x2888;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2889 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2890 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x2890 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2891 = x2889 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x2892 = x2890 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x2893 = x2891 + x2892;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x2894 = x2882 - x2893;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x2894 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:45)
      auto x2895 = x99 - x2813;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:23)
      auto x2896 = x99 - x2823;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:34)
      auto x2897 = x99 - x2889;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2898 = x2813 * x2896;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2899 = x2898 * x2897;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x2900 = x2895 * x2823;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:44)
      auto x2901 = x2900 * x2889;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:17)
      auto x2902 = x2899 + x2901;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":69:3)
      {
        auto& reg = arg2[211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2902);
        reg = x2902;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x2903 = arg2[211 * steps + ((cycle - 0) & mask)];
      assert(x2903 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x2904 = x2903 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:27)
      auto x2905 = x2904 * x2889;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x2906 = x2903 + x2889;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:11)
      auto x2907 = x2906 - x2905;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":71:3)
      {
        auto& reg = arg2[212 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2907);
        reg = x2907;
      }
      // loc("zirgen/components/u32.cpp":143:26)
      auto x2908 = x2870 * x93;
      // loc("zirgen/components/u32.cpp":143:12)
      auto x2909 = x2866 + x2908;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2910 = (x2909 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2910);
          reg = x2910;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2911 = inv(x2909);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2911);
          reg = x2911;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2912 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x2912 != Fp::invalid());
      if (x2912 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2909 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2913 = x99 - x2912;
      if (x2913 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2914 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x2914 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2915 = x2909 * x2914;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2916 = x2915 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2916 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:27)
      auto x2917 = x2882 * x93;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x2918 = x2878 + x2917;
      // loc("zirgen/components/u32.cpp":144:47)
      auto x2919 = x2913 * x80;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x2920 = x2918 + x2919;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2921 = (x2920 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2921);
          reg = x2921;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2922 = inv(x2920);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2922);
          reg = x2922;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2923 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x2923 != Fp::invalid());
      if (x2923 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2920 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2924 = x99 - x2923;
      if (x2924 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2925 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x2925 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2926 = x2920 * x2925;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2927 = x2926 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2927 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2928 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x2928 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2929 = arg2[212 * steps + ((cycle - 0) & mask)];
      assert(x2929 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":97:10)
      auto x2930 = x99 - x2928;
      extern_args[0] = x2773;
      extern_args[1] = x2774;
      extern_args[2] = x2775;
      extern_args[3] = x2776;
      extern_args[4] = x2752;
      extern_args[5] = x2758;
      extern_args[6] = x2759;
      extern_args[7] = x2760;
      extern_args[8] = x2761;
      extern_args[9] = x2763;
      extern_args[10] = x2769;
      extern_args[11] = x2770;
      extern_args[12] = x2771;
      extern_args[13] = x2772;
      extern_args[14] = x2800;
      extern_args[15] = x2801;
      extern_args[16] = x2802;
      extern_args[17] = x2803;
      extern_args[18] = x2804;
      extern_args[19] = x2805;
      extern_args[20] = x2806;
      extern_args[21] = x2807;
      extern_args[22] = x2866;
      extern_args[23] = x2870;
      extern_args[24] = x2878;
      extern_args[25] = x2882;
      extern_args[26] = x2923;
      extern_args[27] = x2929;
      extern_args[28] = x2930;
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2931 = x2618 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x2932 = x2620 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2933 = x2931 + x2932;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x2934 = x2933 + x2630;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2935 = (x2934 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2935);
          reg = x2935;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2936 = inv(x2934);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2936);
          reg = x2936;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2937 = arg2[217 * steps + ((cycle - 0) & mask)];
      assert(x2937 != Fp::invalid());
      if (x2937 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x2934 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2938 = x99 - x2937;
      if (x2938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x2939 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x2939 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2940 = x2934 * x2939;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2941 = x2940 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x2941 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":165:13)
      auto x2942 = x975 + x81;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68))
      auto x2943 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x2943 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":71:17)
      auto x2944 = x2776 * x49;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":176:13)
      auto x2945 = x2929 * x2942;
      // loc("zirgen/components/u32.cpp":68:25)
      auto x2946 = x2774 * x93;
      // loc("zirgen/components/u32.cpp":68:49)
      auto x2947 = x2775 * x80;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:57)
      auto x2948 = x2878 * x80;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":172:14)
      auto x2949 = x2882 * x82;
      // loc("zirgen/components/u32.cpp":71:16)
      auto x2950 = x2944 * x50;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":176:35)
      auto x2951 = x99 - x2929;
      // loc("zirgen/components/u32.cpp":68:13)
      auto x2952 = x2773 + x2946;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":178:14)
      auto x2953 = x2930 * x2942;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":177:38)
      auto x2954 = x99 - x2930;
      // loc("zirgen/components/u32.cpp":68:13)
      auto x2955 = x2952 + x2947;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:13)
      auto x2956 = x2909 + x2948;
      // loc("zirgen/components/u32.cpp":71:10)
      auto x2957 = x2955 + x2950;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":166:14)
      auto x2958 = x975 + x2957;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":177:14)
      auto x2959 = x2930 * x2958;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":176:34)
      auto x2960 = x2951 * x2958;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":178:36)
      auto x2961 = x2954 * x2958;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":177:37)
      auto x2962 = x2954 * x2942;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":171:13)
      auto x2963 = x2956 + x2949;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":176:13)
      auto x2964 = x2945 + x2960;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":177:14)
      auto x2965 = x2959 + x2962;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":178:14)
      auto x2966 = x2953 + x2961;
      if (x2943 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        auto x2967 = x2631 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        assert(x2967 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:54");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        auto x2968 = x2624 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        assert(x2968 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:54");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2969 = x2585 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2970 = x2587 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x2971 = x2587 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x2972 = x2630 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x2973 = x2590 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x2974 = x2588 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2975 = x2969 + x2973;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2976 = x2970 + x2972;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2977 = x2975 + x2931;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2978 = x2976 + x2974;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x2979 = x2977 + x2932;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x2980 = x2978 + x2586;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2979);
          reg = x2979;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2980);
          reg = x2980;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2971);
          reg = x2971;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2971);
          reg = x2971;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x2981 = x2964 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2982 = Fp(x2981.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2983 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x2983 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2984 = x2981 - x2983;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2985 = x2984 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2986 = Fp(x2985.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2987 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x2987 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2988 = x2985 - x2987;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2989 = x2988 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2990 = Fp(x2989.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2990);
            reg = x2990;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2991 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x2991 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2992 = x2989 - x2991;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2993 = x2992 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x2994 = Fp(x2993.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2994);
            reg = x2994;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2995 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x2995 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x2996 = x2993 - x2995;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x2997 = x2996 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2997);
          reg = x2997;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2998 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x2998 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x2999 = x99 - x2998;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3000 = x2998 * x2999;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3000);
          reg = x3000;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3001 = x96 - x2998;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3002 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3002 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3003 = x3002 * x3001;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3003 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3004 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3004 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3004);
          reg = x3004;
        }
        if (x98 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x2866;
          extern_args[2] = x2870;
          extern_args[3] = x2878;
          extern_args[4] = x2882;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
          auto x3005 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2866);
            reg = x2866;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2870);
            reg = x2870;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2878);
            reg = x2878;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          {
            extern_args[0] = x3005;
            extern_args[1] = x2866;
            extern_args[2] = x2870;
            extern_args[3] = x2878;
            extern_args[4] = x2882;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3006 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3006 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3007 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3007 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3008 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3008 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3009 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3009 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3005);
            reg = x3005;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3006);
            reg = x3006;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3007);
            reg = x3007;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3008);
            reg = x3008;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3009);
            reg = x3009;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":54:68)
        auto x3010 = x2937 + x99;
        if (x3010 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68))
      auto x3011 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x3011 != Fp::invalid());
      if (x3011 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        auto x3012 = x2631 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        assert(x3012 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:55");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        auto x3013 = x2624 - x69;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        assert(x3013 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:55");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3014 = x2585 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3015 = x2587 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x3016 = x2587 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x3017 = x2630 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x3018 = x2590 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x3019 = x2588 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3020 = x3014 + x3018;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3021 = x3015 + x3017;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3022 = x3020 + x2931;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3023 = x3021 + x3019;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3024 = x3022 + x2932;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3025 = x3023 + x2586;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3024);
          reg = x3024;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3025);
          reg = x3025;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3016);
          reg = x3016;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3016);
          reg = x3016;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3026 = x2965 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3027 = Fp(x3026.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3027);
            reg = x3027;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3028 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3028 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3029 = x3026 - x3028;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3030 = x3029 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3031 = Fp(x3030.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3031);
            reg = x3031;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3032 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3032 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3033 = x3030 - x3032;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3034 = x3033 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3035 = Fp(x3034.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3035);
            reg = x3035;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3036 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3036 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3037 = x3034 - x3036;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3038 = x3037 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3039 = Fp(x3038.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3039);
            reg = x3039;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3040 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3040 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3041 = x3038 - x3040;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3042 = x3041 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3042);
          reg = x3042;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3043 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3043 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3044 = x99 - x3043;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3045 = x3043 * x3044;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3045);
          reg = x3045;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3046 = x96 - x3043;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3047 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3047 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3048 = x3047 * x3046;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3048 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3049 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3049 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3049);
          reg = x3049;
        }
        if (x98 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x2866;
          extern_args[2] = x2870;
          extern_args[3] = x2878;
          extern_args[4] = x2882;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
          auto x3050 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2866);
            reg = x2866;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2870);
            reg = x2870;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2878);
            reg = x2878;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          {
            extern_args[0] = x3050;
            extern_args[1] = x2866;
            extern_args[2] = x2870;
            extern_args[3] = x2878;
            extern_args[4] = x2882;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3051 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3051 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3052 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3052 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3053 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3053 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3054 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3054 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3050);
            reg = x3050;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3051);
            reg = x3051;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3052);
            reg = x3052;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3053);
            reg = x3053;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3054);
            reg = x3054;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":55:68)
        auto x3055 = x2937 + x99;
        if (x3055 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68))
      auto x3056 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x3056 != Fp::invalid());
      if (x3056 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        auto x3057 = x2631 - x45;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        assert(x3057 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:56");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        auto x3058 = x2624 - x68;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        assert(x3058 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:56");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3059 = x2585 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3060 = x2587 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":90:7)
        auto x3061 = x2587 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:21)
        auto x3062 = x2630 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:21)
        auto x3063 = x2590 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:35)
        auto x3064 = x2588 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3065 = x3059 + x3063;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3066 = x3060 + x3062;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3067 = x3065 + x2931;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3068 = x3066 + x3064;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":88:7)
        auto x3069 = x3067 + x2932;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":89:7)
        auto x3070 = x3068 + x2586;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3069);
          reg = x3069;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3070);
          reg = x3070;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3061);
          reg = x3061;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3061);
          reg = x3061;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":28:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":29:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":30:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3071 = x2966 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3072 = Fp(x3071.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3072);
            reg = x3072;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3073 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3073 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3074 = x3071 - x3073;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3075 = x3074 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3076 = Fp(x3075.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3076);
            reg = x3076;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3077 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3077 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3078 = x3075 - x3077;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3079 = x3078 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3080 = Fp(x3079.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3080);
            reg = x3080;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3081 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3081 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3082 = x3079 - x3081;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3083 = x3082 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3084 = Fp(x3083.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3084);
            reg = x3084;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3085 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3085 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3086 = x3083 - x3085;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3087 = x3086 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3087);
          reg = x3087;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3088 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3088 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3089 = x99 - x3088;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3090 = x3088 * x3089;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3090);
          reg = x3090;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3091 = x96 - x3088;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3092 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3092 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3093 = x3092 * x3091;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3093 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3094 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3094 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3094);
          reg = x3094;
        }
        if (x98 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x2866;
          extern_args[2] = x2870;
          extern_args[3] = x2878;
          extern_args[4] = x2882;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
          auto x3095 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2866);
            reg = x2866;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2870);
            reg = x2870;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2878);
            reg = x2878;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          {
            extern_args[0] = x3095;
            extern_args[1] = x2866;
            extern_args[2] = x2870;
            extern_args[3] = x2878;
            extern_args[4] = x2882;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3096 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3096 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3097 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3097 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3098 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3098 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3099 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3099 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3095);
            reg = x3095;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3096);
            reg = x3096;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3097);
            reg = x3097;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3098);
            reg = x3098;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3099);
            reg = x3099;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":56:68)
        auto x3100 = x2937 + x99;
        if (x3100 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68))
      auto x3101 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x3101 != Fp::invalid());
      if (x3101 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68)
        auto x3102 = x2631 - x44;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68)
        assert(x3102 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:57");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
        auto x3103 = x2585 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
        auto x3104 = x2587 * x46;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":109:7)
        auto x3105 = x2587 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:39)
        auto x3106 = x2605 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:21)
        auto x3107 = x2590 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:54)
        auto x3108 = x2588 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
        auto x3109 = x3103 + x3107;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
        auto x3110 = x3104 + x2609;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":108:7)
        auto x3111 = x3110 + x2606;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
        auto x3112 = x3109 + x2763;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":106:7)
        auto x3113 = x3112 - x2605;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
        auto x3114 = x2626 + x3106;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
        auto x3115 = x3114 + x3108;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":107:7)
        auto x3116 = x3115 + x2586;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3113);
          reg = x3113;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3116);
          reg = x3116;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3111);
          reg = x3111;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3105);
          reg = x3105;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3117 = x2958 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3118 = Fp(x3117.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3118);
            reg = x3118;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3119 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3119 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3120 = x3117 - x3119;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3121 = x3120 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3122 = Fp(x3121.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3122);
            reg = x3122;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3123 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3123 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3124 = x3121 - x3123;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3125 = x3124 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3126 = Fp(x3125.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3126);
            reg = x3126;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3127 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3127 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3128 = x3125 - x3127;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3129 = x3128 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3130 = Fp(x3129.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3130);
            reg = x3130;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3131 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3131 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3132 = x3129 - x3131;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3133 = x3132 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3133);
          reg = x3133;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3134 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3134 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3135 = x99 - x3134;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3136 = x3134 * x3135;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3136);
          reg = x3136;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3137 = x96 - x3134;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3138 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3138 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3139 = x3138 * x3137;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3139 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3140 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3140 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        if (x2938 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x962;
          extern_args[2] = x963;
          extern_args[3] = x966;
          extern_args[4] = x2789;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":57:68)
          auto x3141 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x962);
            reg = x962;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x963);
            reg = x963;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x966);
            reg = x966;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
          {
            extern_args[0] = x3141;
            extern_args[1] = x962;
            extern_args[2] = x963;
            extern_args[3] = x966;
            extern_args[4] = x2789;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3142 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3142 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3143 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3143 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3144 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3144 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3145 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3145 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3141);
            reg = x3141;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3142);
            reg = x3142;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3143);
            reg = x3143;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3144);
            reg = x3144;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3145);
            reg = x3145;
          }
        }
        if (x2937 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68))
      auto x3146 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x3146 != Fp::invalid());
      if (x3146 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68)
        auto x3147 = x2631 - x43;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68)
        assert(x3147 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:58");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68)
        assert(x2624 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:58");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3148 = x2585 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3149 = x2587 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3150 = x2587 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3151 = x2590 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3152 = x2588 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3153 = x3148 + x3151;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3154 = x3149 + x3152;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3155 = x3154 + x2586;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3156 = x3153 + x2763;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3156);
          reg = x3156;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3155);
          reg = x3155;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3150);
          reg = x3150;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3150);
          reg = x3150;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3157 = x2963 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3158 = Fp(x3157.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3158);
            reg = x3158;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3159 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3159 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3160 = x3157 - x3159;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3161 = x3160 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3162 = Fp(x3161.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3162);
            reg = x3162;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3163 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3163 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3164 = x3161 - x3163;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3165 = x3164 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3166 = Fp(x3165.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3166);
            reg = x3166;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3167 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3167 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3168 = x3165 - x3167;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3169 = x3168 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3170 = Fp(x3169.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3170);
            reg = x3170;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3171 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3171 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3172 = x3169 - x3171;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3173 = x3172 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3173);
          reg = x3173;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3174 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3174 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3175 = x99 - x3174;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3176 = x3174 * x3175;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3176);
          reg = x3176;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3177 = x96 - x3174;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3178 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3178 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3179 = x3178 * x3177;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3179 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3180 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3180 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3180);
          reg = x3180;
        }
        if (x2938 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x962;
          extern_args[2] = x963;
          extern_args[3] = x966;
          extern_args[4] = x2789;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":58:68)
          auto x3181 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x962);
            reg = x962;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x963);
            reg = x963;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x966);
            reg = x966;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
          {
            extern_args[0] = x3181;
            extern_args[1] = x962;
            extern_args[2] = x963;
            extern_args[3] = x966;
            extern_args[4] = x2789;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3182 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3182 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3183 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3183 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3184 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3184 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3185 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3185 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3181);
            reg = x3181;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3182);
            reg = x3182;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3183);
            reg = x3183;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3184);
            reg = x3184;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3185);
            reg = x3185;
          }
        }
        if (x2937 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68))
      auto x3186 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x3186 != Fp::invalid());
      if (x3186 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68)
        auto x3187 = x2631 - x42;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68)
        assert(x3187 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:59");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2626);
          reg = x2626;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2614);
          reg = x2614;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2600);
          reg = x2600;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":48:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":49:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":50:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3188 = x2942 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3189 = Fp(x3188.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3189);
            reg = x3189;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3190 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3190 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3191 = x3188 - x3190;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3192 = x3191 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3193 = Fp(x3192.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3193);
            reg = x3193;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3194 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3194 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3195 = x3192 - x3194;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3196 = x3195 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3197 = Fp(x3196.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3197);
            reg = x3197;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3198 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3198 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3199 = x3196 - x3198;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3200 = x3199 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3201 = Fp(x3200.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3201);
            reg = x3201;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3202 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3202 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3203 = x3200 - x3202;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3204 = x3203 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3204);
          reg = x3204;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3205 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3205 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3206 = x99 - x3205;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3207 = x3205 * x3206;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3207);
          reg = x3207;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3208 = x96 - x3205;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3209 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3209 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3210 = x3209 * x3208;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3210 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3211 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3211 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3211);
          reg = x3211;
        }
        if (x2938 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x2866;
          extern_args[2] = x2870;
          extern_args[3] = x2878;
          extern_args[4] = x2882;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":59:68)
          auto x3212 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2866);
            reg = x2866;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2870);
            reg = x2870;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2878);
            reg = x2878;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          {
            extern_args[0] = x3212;
            extern_args[1] = x2866;
            extern_args[2] = x2870;
            extern_args[3] = x2878;
            extern_args[4] = x2882;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3213 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3213 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3214 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3214 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3215 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3215 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3216 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3216 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3212);
            reg = x3212;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3213);
            reg = x3213;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3214);
            reg = x3214;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3215);
            reg = x3215;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3216);
            reg = x3216;
          }
        }
        if (x2937 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68))
      auto x3217 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x3217 != Fp::invalid());
      if (x3217 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68)
        auto x3218 = x2631 - x41;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68)
        assert(x3218 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:60");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2626);
          reg = x2626;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2614);
          reg = x2614;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2600);
          reg = x2600;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":19:3)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":20:3)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":23:5)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":24:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":25:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":53:3)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x3219 = x2942 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3220 = Fp(x3219.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3220);
            reg = x3220;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3221 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x3221 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3222 = x3219 - x3221;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3223 = x3222 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3224 = Fp(x3223.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3224);
            reg = x3224;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3225 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x3225 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3226 = x3223 - x3225;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3227 = x3226 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3228 = Fp(x3227.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3228);
            reg = x3228;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3229 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x3229 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3230 = x3227 - x3229;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3231 = x3230 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x3232 = Fp(x3231.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3232);
            reg = x3232;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3233 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x3233 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x3234 = x3231 - x3233;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x3235 = x3234 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3235);
          reg = x3235;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3236 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x3236 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x3237 = x99 - x3236;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x3238 = x3236 * x3237;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3238);
          reg = x3238;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x3239 = x96 - x3236;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3240 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x3240 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x3241 = x3240 * x3239;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x3241 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3242 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x3242 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3242);
          reg = x3242;
        }
        if (x2938 != 0) {
          extern_args[0] = x2934;
          extern_args[1] = x2866;
          extern_args[2] = x2870;
          extern_args[3] = x2878;
          extern_args[4] = x2882;
          extern_log(ctx, cycle, "  Writing to rd=x%u, val = %w", extern_args, extern_outs);
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":60:68)
          auto x3243 = x2748 + x2934;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2866);
            reg = x2866;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2870);
            reg = x2870;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2878);
            reg = x2878;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          {
            extern_args[0] = x3243;
            extern_args[1] = x2866;
            extern_args[2] = x2870;
            extern_args[3] = x2878;
            extern_args[4] = x2882;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3244 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x3244 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3245 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x3245 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3246 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x3246 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3247 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x3247 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3243);
            reg = x3243;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3244);
            reg = x3244;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3245);
            reg = x3245;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3246);
            reg = x3246;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3247);
            reg = x3247;
          }
        }
        if (x2937 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3248 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x3248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3249 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x3249 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x3250 = x3248 * x3249;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x3251 = x99 - x3249;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x3252 = x3250 * x3251;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x3252 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[3](Reg)"("./zirgen/components/mux.h":49:25))
    auto x3253 = arg2[104 * steps + ((cycle - 0) & mask)];
    assert(x3253 != Fp::invalid());
    if (x3253 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3254 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x3254 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3254);
        reg = x3254;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/memio.cpp":21:37))
      auto x3255 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x3255 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":21:37)
      auto x3256 = x3255 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":21:37)
      assert(x3256 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:21");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":24:41)
      auto x3257 = x975 * x78;
      {
        extern_args[0] = x3257;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x3258 = extern_outs[0];
        auto x3259 = extern_outs[1];
        auto x3260 = extern_outs[2];
        auto x3261 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3258);
          reg = x3258;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3259);
          reg = x3259;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3260);
          reg = x3260;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3261);
          reg = x3261;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3262 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x3262 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3263 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x3263 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3264 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x3264 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3265 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x3265 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3257);
        reg = x3257;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3262);
        reg = x3262;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3263);
        reg = x3263;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3264);
        reg = x3264;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3265);
        reg = x3265;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x3266 = Fp(x3265.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x3267 = x3266 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3267);
          reg = x3267;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x3268 = Fp(x3265.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x3269 = x3268 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3269);
          reg = x3269;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x3270 = Fp(x3265.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x3271 = x3270 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3271);
          reg = x3271;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x3272 = Fp(x3265.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x3273 = x3272 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3273);
          reg = x3273;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x3274 = Fp(x3265.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x3275 = x3274 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3275);
          reg = x3275;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x3276 = Fp(x3265.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3276);
          reg = x3276;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x3277 = Fp(x3264.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x3278 = x3277 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3278);
          reg = x3278;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x3279 = Fp(x3264.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x3280 = x3279 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x3281 = Fp(x3264.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x3282 = x3281 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3282);
          reg = x3282;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x3283 = Fp(x3264.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x3284 = x3283 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3284);
          reg = x3284;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x3285 = Fp(x3264.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3285);
          reg = x3285;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x3286 = Fp(x3263.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x3287 = x3286 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3287);
          reg = x3287;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x3288 = Fp(x3263.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x3289 = x3288 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3289);
          reg = x3289;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x3290 = Fp(x3263.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x3291 = x3290 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3291);
          reg = x3291;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x3292 = Fp(x3263.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x3293 = x3292 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3293);
          reg = x3293;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x3294 = Fp(x3263.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3294);
          reg = x3294;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x3295 = Fp(x3262.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x3296 = x3295 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3296);
          reg = x3296;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x3297 = Fp(x3262.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3297);
          reg = x3297;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3298 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x3298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3299 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x3299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3300 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x3300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3301 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x3301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3302 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x3302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3303 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x3303 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x3304 = x3300 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x3305 = x3301 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x3306 = x3298 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x3307 = x3299 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x3308 = x3305 + x3307;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x3309 = x3308 + x3306;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x3310 = x3309 + x3303;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x3311 = x3304 + x3310;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x3312 = x3311 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x3313 = x3312 + x3302;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x3314 = x3265 - x3313;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x3314 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3315 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x3315 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3316 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x3316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3317 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x3317 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3318 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x3318 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3319 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x3319 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x3320 = x3315 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x3321 = x3316 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x3322 = x3317 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x3323 = x3320 + x3321;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x3324 = x3323 + x3318;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x3325 = x3324 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x3326 = x3325 + x3322;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x3327 = x3326 + x3319;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x3328 = x3264 - x3327;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x3328 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3329 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x3329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3330 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x3330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3331 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x3331 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3332 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x3332 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3333 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x3333 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x3334 = x3329 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x3335 = x3330 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x3336 = x3331 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x3337 = x3335 + x3332;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x3338 = x3337 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x3339 = x3334 + x3338;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x3340 = x3339 + x3336;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x3341 = x3340 + x3333;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x3342 = x3263 - x3341;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x3342 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3343 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x3343 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x3344 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x3344 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x3345 = x3343 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x3346 = x3345 + x3344;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x3347 = x3262 - x3346;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x3347 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x3262;
        extern_args[1] = x3263;
        extern_args[2] = x3264;
        extern_args[3] = x3265;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x3348 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3349 = (x3348 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3349);
            reg = x3349;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3350 = x3348 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3351 = (x3350 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3351);
            reg = x3351;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3352 = x3348 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3353 = (x3352 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3353);
            reg = x3353;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3354 = x3348 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3355 = (x3354 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3355);
            reg = x3355;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3356 = x3348 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3357 = (x3356 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3357);
            reg = x3357;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3358 = x3348 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3359 = (x3358 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3359);
            reg = x3359;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3360 = x3348 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3361 = (x3360 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3361);
            reg = x3361;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3362 = x3348 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3363 = (x3362 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3363);
            reg = x3363;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3364 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x3364 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3365 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x3365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3366 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x3366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3367 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x3367 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3368 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x3368 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3369 = arg2[208 * steps + ((cycle - 0) & mask)];
        assert(x3369 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3370 = arg2[209 * steps + ((cycle - 0) & mask)];
        assert(x3370 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3371 = x3365 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3372 = x3366 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3373 = x3367 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3374 = x3368 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3375 = x3369 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3376 = x3370 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3377 = x3364 + x3371;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3378 = x3377 + x3372;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3379 = x3378 + x3373;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3380 = x3379 + x3374;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3381 = x3380 + x3375;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3382 = x3381 + x3376;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x3383 = x3382 - x3348;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x3383 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46))
        auto x3384 = arg2[202 * steps + ((cycle - 0) & mask)];
        assert(x3384 != Fp::invalid());
        if (x3384 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3385 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3386 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3387 = x3302 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x3388 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x3389 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x3390 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3391 = x3385 + x3389;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3392 = x3386 + x3390;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3393 = x3392 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3394 = x3387 + x3324;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3395 = x3391 + x3394;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3395);
            reg = x3395;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3393);
            reg = x3393;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3388);
            reg = x3388;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3388);
            reg = x3388;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46))
        auto x3396 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x3396 != Fp::invalid());
        if (x3396 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3397 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3398 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3399 = x3302 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x3400 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x3401 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x3402 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3403 = x3397 + x3401;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3404 = x3398 + x3402;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3405 = x3404 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3406 = x3399 + x3324;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3407 = x3403 + x3406;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3407);
            reg = x3407;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3405);
            reg = x3405;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3400);
            reg = x3400;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3400);
            reg = x3400;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46))
        auto x3408 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x3408 != Fp::invalid());
        if (x3408 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3409 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3410 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3411 = x3302 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x3412 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x3413 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x3414 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3415 = x3409 + x3413;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3416 = x3410 + x3414;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3417 = x3416 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3418 = x3411 + x3324;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3419 = x3415 + x3418;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3412);
            reg = x3412;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3412);
            reg = x3412;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46))
        auto x3420 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x3420 != Fp::invalid());
        if (x3420 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3421 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3422 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3423 = x3302 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x3424 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x3425 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x3426 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3427 = x3421 + x3425;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3428 = x3422 + x3426;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3429 = x3428 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3430 = x3423 + x3324;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3431 = x3427 + x3430;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3431);
            reg = x3431;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3429);
            reg = x3429;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3424);
            reg = x3424;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3424);
            reg = x3424;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46))
        auto x3432 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x3432 != Fp::invalid());
        if (x3432 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3433 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3434 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3435 = x3302 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
          auto x3436 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
          auto x3437 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
          auto x3438 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3439 = x3433 + x3437;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3440 = x3434 + x3438;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
          auto x3441 = x3440 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
          auto x3442 = x3435 + x3324;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
          auto x3443 = x3439 + x3442;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3443);
            reg = x3443;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3441);
            reg = x3441;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3436);
            reg = x3436;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46))
        auto x3444 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x3444 != Fp::invalid());
        if (x3444 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3445 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3446 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3447 = x3331 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
          auto x3448 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
          auto x3449 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
          auto x3450 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
          auto x3451 = x3333 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3452 = x3445 + x3449;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3453 = x3446 + x3450;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3454 = x3447 + x3451;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3455 = x3453 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3456 = x3454 + x3343;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3457 = x3452 + x3456;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3457);
            reg = x3457;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3455);
            reg = x3455;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3448);
            reg = x3448;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3448);
            reg = x3448;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46))
        auto x3458 = arg2[208 * steps + ((cycle - 0) & mask)];
        assert(x3458 != Fp::invalid());
        if (x3458 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3459 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3460 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3461 = x3331 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
          auto x3462 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
          auto x3463 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
          auto x3464 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
          auto x3465 = x3333 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3466 = x3459 + x3463;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3467 = x3460 + x3464;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3468 = x3461 + x3465;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3469 = x3467 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3470 = x3468 + x3343;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3471 = x3466 + x3470;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3471);
            reg = x3471;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3469);
            reg = x3469;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3462);
            reg = x3462;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3462);
            reg = x3462;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46))
        auto x3472 = arg2[209 * steps + ((cycle - 0) & mask)];
        assert(x3472 != Fp::invalid());
        if (x3472 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3473 = x3298 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3474 = x3300 * x52;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3475 = x3331 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
          auto x3476 = x3300 * x95;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
          auto x3477 = x3303 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
          auto x3478 = x3301 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
          auto x3479 = x3333 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3480 = x3473 + x3477;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3481 = x3474 + x3478;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3482 = x3475 + x3479;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
          auto x3483 = x3481 + x3299;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
          auto x3484 = x3482 + x3343;
          // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
          auto x3485 = x3480 + x3484;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3485);
            reg = x3485;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3483);
            reg = x3483;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3476);
            reg = x3476;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3476);
            reg = x3476;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":42:57)
      auto x3486 = x3254 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":42:39)
      auto x3487 = x51 - x3486;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x3488 = x3317 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x3489 = x3319 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x3490 = x3488 + x3489;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x3491 = x3490 + x3329;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":42:39)
      auto x3492 = x3487 + x3491;
      {
        extern_args[0] = x3492;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x3493 = extern_outs[0];
        auto x3494 = extern_outs[1];
        auto x3495 = extern_outs[2];
        auto x3496 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3493);
          reg = x3493;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3494);
          reg = x3494;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3495);
          reg = x3495;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3497 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x3497 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3498 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x3498 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3499 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x3499 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3500 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x3500 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3492);
        reg = x3492;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3497);
        reg = x3497;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3498);
        reg = x3498;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3499);
        reg = x3499;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3500);
        reg = x3500;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x3501 = x3302 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x3502 = x3501 + x3324;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":43:39)
      auto x3503 = x3487 + x3502;
      {
        extern_args[0] = x3503;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x3504 = extern_outs[0];
        auto x3505 = extern_outs[1];
        auto x3506 = extern_outs[2];
        auto x3507 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3504);
          reg = x3504;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3505);
          reg = x3505;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3506);
          reg = x3506;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3507);
          reg = x3507;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3508 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x3508 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3509 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x3509 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3510 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x3510 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3511 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x3511 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3503);
        reg = x3503;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3508);
        reg = x3508;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3509);
        reg = x3509;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3510);
        reg = x3510;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3511);
        reg = x3511;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3512 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x3512 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3513 = arg2[199 * steps + ((cycle - 0) & mask)];
      assert(x3513 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3514 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x3514 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3515 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x3515 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x3516 = x3331 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x3517 = x3333 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x3518 = x3516 + x3517;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x3519 = x3518 + x3343;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x3520 = (x3519 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3520);
          reg = x3520;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x3521 = inv(x3519);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3521);
          reg = x3521;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3522 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x3522 != Fp::invalid());
      if (x3522 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x3519 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x3523 = x99 - x3522;
      if (x3523 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3524 = arg2[211 * steps + ((cycle - 0) & mask)];
        assert(x3524 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x3525 = x3519 * x3524;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x3526 = x3525 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x3526 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":51:17)
        auto x3527 = x3497 + x3512;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":52:18)
        auto x3528 = Fp(x3527.asUInt32() & x79.asUInt32());
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3529 = (x3528 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3529);
            reg = x3529;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3530 = x3528 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3531 = (x3530 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3531);
            reg = x3531;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3532 = x3528 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3533 = (x3532 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3533);
            reg = x3533;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3534 = x3528 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3535 = (x3534 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3535);
            reg = x3535;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3536 = arg2[213 * steps + ((cycle - 0) & mask)];
        assert(x3536 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3537 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x3537 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x3538 = arg2[215 * steps + ((cycle - 0) & mask)];
        assert(x3538 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3539 = x3537 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3540 = x3538 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3541 = x3536 + x3539;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3542 = x3541 + x3540;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x3543 = x3542 - x3528;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x3543 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":53:20)
        auto x3544 = Fp(x3527.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":53:19)
        auto x3545 = x3544 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3546 = Fp(x3545.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3546);
            reg = x3546;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3547 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x3547 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":54:33)
        auto x3548 = x3547 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":54:15)
        auto x3549 = x3527 - x3542;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":54:15)
        auto x3550 = x3549 - x3548;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3550);
          reg = x3550;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":56:22)
        auto x3551 = x3550 * x78;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3551);
          reg = x3551;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":57:17)
        auto x3552 = x3498 + x3513;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":57:17)
        auto x3553 = x3552 + x3547;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":58:24)
        auto x3554 = Fp(x3553.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":59:25)
        auto x3555 = Fp(x3553.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":59:24)
        auto x3556 = x3555 * x94;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3556);
          reg = x3556;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":60:17)
        auto x3557 = x3499 + x3514;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3558 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x3558 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":60:17)
        auto x3559 = x3557 + x3558;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":61:24)
        auto x3560 = Fp(x3559.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3560);
          reg = x3560;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":62:25)
        auto x3561 = Fp(x3559.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":62:24)
        auto x3562 = x3561 * x94;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3562);
          reg = x3562;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":63:17)
        auto x3563 = x3500 + x3515;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3564 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x3564 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":63:17)
        auto x3565 = x3563 + x3564;
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":64:23)
        auto x3566 = Fp(x3565.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3566);
          reg = x3566;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":65:24)
        auto x3567 = Fp(x3565.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":65:23)
        auto x3568 = x3567 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3568);
          reg = x3568;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":66:20)
        auto x3569 = Fp(x3565.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":66:19)
        auto x3570 = x3569 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3571 = Fp(x3570.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3571);
            reg = x3571;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3572 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x3572 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3573 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x3573 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:16)
      auto x3574 = x3573 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:6)
      auto x3575 = x3572 - x3574;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":69:6)
      assert(x3575 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:69");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:6)
      auto x3576 = x3497 + x3512;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3577 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x3577 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x3578 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x3578 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x3579 = arg2[214 * steps + ((cycle - 0) & mask)];
      assert(x3579 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x3580 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x3580 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:35)
      auto x3581 = x3577 * x93;
      // loc("./zirgen/components/onehot.h":46:19)
      auto x3582 = x3579 * x96;
      // loc("./zirgen/components/onehot.h":46:19)
      auto x3583 = x3580 * x79;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:35)
      auto x3584 = x3581 + x3572;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x3585 = x3578 + x3582;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x3586 = x3585 + x3583;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:35)
      auto x3587 = x3584 + x3586;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:6)
      auto x3588 = x3576 - x3587;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":71:6)
      assert(x3588 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:71");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:6)
      auto x3589 = x3498 + x3513;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3590 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x3590 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3591 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x3591 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:46)
      auto x3592 = x3590 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:6)
      auto x3593 = x3589 + x3577;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:46)
      auto x3594 = x3592 + x3591;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:6)
      auto x3595 = x3593 - x3594;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":73:6)
      assert(x3595 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:73");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:6)
      auto x3596 = x3499 + x3514;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3597 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x3597 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3598 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x3598 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:46)
      auto x3599 = x3597 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:6)
      auto x3600 = x3596 + x3590;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:46)
      auto x3601 = x3599 + x3598;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:6)
      auto x3602 = x3600 - x3601;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":75:6)
      assert(x3602 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:75");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:6)
      auto x3603 = x3500 + x3515;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3604 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x3604 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3605 = arg2[85 * steps + ((cycle - 0) & mask)];
      assert(x3605 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3606 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x3606 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:46)
      auto x3607 = x3604 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:63)
      auto x3608 = x3605 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:6)
      auto x3609 = x3603 + x3597;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:46)
      auto x3610 = x3607 + x3608;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:46)
      auto x3611 = x3610 + x3606;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:6)
      auto x3612 = x3609 - x3611;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":77:6)
      assert(x3612 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:77");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:15)
      auto x3613 = x99 - x3605;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:28)
      auto x3614 = x96 - x3605;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:7)
      auto x3615 = x3605 * x3613;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:7)
      auto x3616 = x3615 * x3614;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":80:7)
      assert(x3616 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:80");
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3617 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x3617 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":82:7)
      auto x3618 = x3617 * x3605;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":82:7)
      auto x3619 = x3618 * x3613;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":82:7)
      assert(x3619 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/memio.cpp:82");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:14)
      auto x3620 = x3605 * x82;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":86:14)
      auto x3621 = x3591 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:68)
      auto x3622 = x3598 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:41)
      auto x3623 = x3606 * x39;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:14)
      auto x3624 = x3620 + x3623;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:14)
      auto x3625 = x3624 + x3622;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:14)
      auto x3626 = x3625 + x3621;
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":85:14)
      auto x3627 = x3626 + x3573;
      {
        extern_args[0] = x3627;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x3628 = extern_outs[0];
        auto x3629 = extern_outs[1];
        auto x3630 = extern_outs[2];
        auto x3631 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3628);
          reg = x3628;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3630);
          reg = x3630;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3631);
          reg = x3631;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3632 = arg2[141 * steps + ((cycle - 0) & mask)];
      assert(x3632 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3633 = arg2[142 * steps + ((cycle - 0) & mask)];
      assert(x3633 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3634 = arg2[143 * steps + ((cycle - 0) & mask)];
      assert(x3634 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3635 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x3635 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3627);
        reg = x3627;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3632);
        reg = x3632;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3633);
        reg = x3633;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3634);
        reg = x3634;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3635);
        reg = x3635;
      }
      extern_args[0] = x3512;
      extern_args[1] = x3513;
      extern_args[2] = x3514;
      extern_args[3] = x3515;
      extern_args[4] = x3491;
      extern_args[5] = x3497;
      extern_args[6] = x3498;
      extern_args[7] = x3499;
      extern_args[8] = x3500;
      extern_args[9] = x3502;
      extern_args[10] = x3508;
      extern_args[11] = x3509;
      extern_args[12] = x3510;
      extern_args[13] = x3511;
      extern_args[14] = x3627;
      extern_args[15] = x3586;
      extern_args[16] = x3632;
      extern_args[17] = x3633;
      extern_args[18] = x3634;
      extern_args[19] = x3635;
      extern_log(ctx, cycle, "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, Addr = %10x, lowBits = %u, loaded = %w", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":98:17)
      auto x3636 = x975 + x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x3637 = x3636 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3638 = Fp(x3637.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3638);
          reg = x3638;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3639 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x3639 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3640 = x3637 - x3639;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3641 = x3640 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3642 = Fp(x3641.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3642);
          reg = x3642;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3643 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x3643 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3644 = x3641 - x3643;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3645 = x3644 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3646 = Fp(x3645.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3646);
          reg = x3646;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3647 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x3647 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3648 = x3645 - x3647;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3649 = x3648 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x3650 = Fp(x3649.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3650);
          reg = x3650;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3651 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x3651 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x3652 = x3649 - x3651;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x3653 = x3652 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3653);
        reg = x3653;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3654 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x3654 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x3655 = x99 - x3654;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x3656 = x3654 * x3655;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3656);
        reg = x3656;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x3657 = x96 - x3654;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x3658 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x3658 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x3659 = x3658 * x3657;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x3659 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/memio.cpp":99:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x65);
        reg = x65;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46))
      auto x3660 = arg2[202 * steps + ((cycle - 0) & mask)];
      assert(x3660 != Fp::invalid());
      if (x3660 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46))
          auto x3661 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3661 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3662 = x3661 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          assert(x3662 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        }
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46))
          auto x3663 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3663 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3664 = x3663 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3665 = x3664 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          assert(x3665 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46))
        auto x3666 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3666 != Fp::invalid());
        if (x3666 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3667 = Fp(x3632.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3667);
              reg = x3667;
            }
          }
        }
        if (x3578 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3668 = Fp(x3633.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3668);
              reg = x3668;
            }
          }
        }
        if (x3579 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3669 = Fp(x3634.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3669);
              reg = x3669;
            }
          }
        }
        if (x3580 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3670 = Fp(x3635.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3670);
              reg = x3670;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3671 = arg2[29 * steps + ((cycle - 0) & mask)];
          assert(x3671 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3672 = Fp(x3671.asUInt32() & x64.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3673 = x3672 * x63;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3673);
            reg = x3673;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3674 = Fp(x3671.asUInt32() & x53.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3675 = x3674 * x96;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3675);
            reg = x3675;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3676 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x3676 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3677 = x99 - x3676;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3678 = x3676 * x3677;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        assert(x3678 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3679 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x3679 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3680 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x3680 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3681 = x3676 * x64;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3682 = x3680 * x57;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3683 = x3681 + x3682;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3684 = x3679 - x3683;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        assert(x3684 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3685 = x3666 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3686 = x3578 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3687 = x3579 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3688 = x3580 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3689 = x3676 * x95;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3690 = x3685 + x3686;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3691 = x3690 + x3687;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3692 = x3691 + x3688;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3692);
          reg = x3692;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3689);
          reg = x3689;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3689);
          reg = x3689;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3689);
          reg = x3689;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3693 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x3693 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3694 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x3694 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3695 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x3695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3696 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        extern_args[0] = x3689;
        extern_args[1] = x3693;
        extern_args[2] = x3694;
        extern_args[3] = x3695;
        extern_args[4] = x3696;
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", extern_args, extern_outs);
        if (x3523 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
          auto x3697 = x3487 + x3519;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3693);
            reg = x3693;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3695);
            reg = x3695;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3696);
            reg = x3696;
          }
          {
            extern_args[0] = x3697;
            extern_args[1] = x3693;
            extern_args[2] = x3694;
            extern_args[3] = x3695;
            extern_args[4] = x3696;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3698 = arg2[148 * steps + ((cycle - 0) & mask)];
          assert(x3698 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3699 = arg2[149 * steps + ((cycle - 0) & mask)];
          assert(x3699 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3700 = arg2[150 * steps + ((cycle - 0) & mask)];
          assert(x3700 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3701 = arg2[151 * steps + ((cycle - 0) & mask)];
          assert(x3701 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3697);
            reg = x3697;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3698);
            reg = x3698;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3699);
            reg = x3699;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3700);
            reg = x3700;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3701);
            reg = x3701;
          }
        }
        if (x3522 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        auto x3702 = x3344 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        assert(x3702 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":76:46)
        assert(x3337 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:76");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3703 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3704 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3705 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3706 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3707 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3708 = x3703 + x3706;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3709 = x3704 + x3707;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3710 = x3709 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3711 = x3708 + x3502;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3711);
          reg = x3711;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3710);
          reg = x3710;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3705);
          reg = x3705;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3705);
          reg = x3705;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46))
      auto x3712 = arg2[203 * steps + ((cycle - 0) & mask)];
      assert(x3712 != Fp::invalid());
      if (x3712 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46))
          auto x3713 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3713 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3714 = x3713 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          assert(x3714 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        }
        if (x99 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46))
          auto x3715 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3715 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3716 = x3715 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3717 = x3716 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          assert(x3717 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46))
        auto x3718 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3718 != Fp::invalid());
        if (x3718 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3719 = Fp(x3633.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3719);
              reg = x3719;
            }
          }
        }
        if (x3579 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3720 = Fp(x3635.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3720);
              reg = x3720;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3721 = arg2[29 * steps + ((cycle - 0) & mask)];
          assert(x3721 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3722 = Fp(x3721.asUInt32() & x64.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3723 = x3722 * x63;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3723);
            reg = x3723;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3724 = Fp(x3721.asUInt32() & x53.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3725 = x3724 * x96;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3725);
            reg = x3725;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3726 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x3726 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3727 = x99 - x3726;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3728 = x3726 * x3727;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        assert(x3728 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3729 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x3729 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3730 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x3730 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3731 = x3726 * x64;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3732 = x3730 * x57;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3733 = x3731 + x3732;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3734 = x3729 - x3733;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        assert(x3734 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3735 = x3718 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3736 = x3718 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3737 = x3579 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3738 = x3579 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3739 = x3726 * x95;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3740 = x3735 + x3737;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3741 = x3736 + x3738;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3740);
          reg = x3740;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3741);
          reg = x3741;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3739);
          reg = x3739;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3739);
          reg = x3739;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3742 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x3742 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3743 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x3743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3744 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x3744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3745 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x3745 != Fp::invalid());
        extern_args[0] = x3739;
        extern_args[1] = x3742;
        extern_args[2] = x3743;
        extern_args[3] = x3744;
        extern_args[4] = x3745;
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", extern_args, extern_outs);
        if (x3523 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
          auto x3746 = x3487 + x3519;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3742);
            reg = x3742;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3743);
            reg = x3743;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3744);
            reg = x3744;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3745);
            reg = x3745;
          }
          {
            extern_args[0] = x3746;
            extern_args[1] = x3742;
            extern_args[2] = x3743;
            extern_args[3] = x3744;
            extern_args[4] = x3745;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3747 = arg2[148 * steps + ((cycle - 0) & mask)];
          assert(x3747 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3748 = arg2[149 * steps + ((cycle - 0) & mask)];
          assert(x3748 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3749 = arg2[150 * steps + ((cycle - 0) & mask)];
          assert(x3749 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3750 = arg2[151 * steps + ((cycle - 0) & mask)];
          assert(x3750 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3746);
            reg = x3746;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3747);
            reg = x3747;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3748);
            reg = x3748;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3749);
            reg = x3749;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3750);
            reg = x3750;
          }
        }
        if (x3522 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3751 = x3344 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        assert(x3751 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        auto x3752 = x3337 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":77:46)
        assert(x3752 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:77");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3753 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3754 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3755 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3756 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3757 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3758 = x3753 + x3756;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3759 = x3754 + x3757;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3760 = x3759 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3761 = x3758 + x3502;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3761);
          reg = x3761;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3760);
          reg = x3760;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3755);
          reg = x3755;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3755);
          reg = x3755;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46))
      auto x3762 = arg2[204 * steps + ((cycle - 0) & mask)];
      assert(x3762 != Fp::invalid());
      if (x3762 != 0) {
        if (x99 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46))
          auto x3763 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3763 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3764 = x3763 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          assert(x3764 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        }
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46))
          auto x3765 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3765 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3766 = x3765 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3767 = x3766 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          assert(x3767 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46))
        auto x3768 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3768 != Fp::invalid());
        if (x3768 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3769 = Fp(x3635.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3769);
              reg = x3769;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3770 = arg2[29 * steps + ((cycle - 0) & mask)];
          assert(x3770 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3771 = Fp(x3770.asUInt32() & x64.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3772 = x3771 * x63;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3772);
            reg = x3772;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3773 = Fp(x3770.asUInt32() & x53.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3774 = x3773 * x96;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3774);
            reg = x3774;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3775 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x3775 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3776 = x99 - x3775;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3777 = x3775 * x3776;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        assert(x3777 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3778 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x3778 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3779 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x3779 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3780 = x3775 * x64;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3781 = x3779 * x57;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3782 = x3780 + x3781;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3783 = x3778 - x3782;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        assert(x3783 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3784 = x3768 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3785 = x3768 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3786 = x3768 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3787 = x3768 * x3635;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3784);
          reg = x3784;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3785);
          reg = x3785;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3786);
          reg = x3786;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3787);
          reg = x3787;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3788 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x3788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3789 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x3789 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3790 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x3790 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3791 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x3791 != Fp::invalid());
        extern_args[0] = x98;
        extern_args[1] = x3788;
        extern_args[2] = x3789;
        extern_args[3] = x3790;
        extern_args[4] = x3791;
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", extern_args, extern_outs);
        if (x3523 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
          auto x3792 = x3487 + x3519;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3788);
            reg = x3788;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3789);
            reg = x3789;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3790);
            reg = x3790;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3791);
            reg = x3791;
          }
          {
            extern_args[0] = x3792;
            extern_args[1] = x3788;
            extern_args[2] = x3789;
            extern_args[3] = x3790;
            extern_args[4] = x3791;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3793 = arg2[148 * steps + ((cycle - 0) & mask)];
          assert(x3793 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3794 = arg2[149 * steps + ((cycle - 0) & mask)];
          assert(x3794 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3795 = arg2[150 * steps + ((cycle - 0) & mask)];
          assert(x3795 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3796 = arg2[151 * steps + ((cycle - 0) & mask)];
          assert(x3796 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3792);
            reg = x3792;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3793);
            reg = x3793;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3794);
            reg = x3794;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3795);
            reg = x3795;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3796);
            reg = x3796;
          }
        }
        if (x3522 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3797 = x3344 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        assert(x3797 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        auto x3798 = x3337 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":78:46)
        assert(x3798 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:78");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3799 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3800 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3801 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3802 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3803 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3804 = x3799 + x3802;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3805 = x3800 + x3803;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3806 = x3805 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3807 = x3804 + x3502;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3807);
          reg = x3807;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3806);
          reg = x3806;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3801);
          reg = x3801;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3801);
          reg = x3801;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46))
      auto x3808 = arg2[205 * steps + ((cycle - 0) & mask)];
      assert(x3808 != Fp::invalid());
      if (x3808 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46))
          auto x3809 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3809 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3810 = x3809 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          assert(x3810 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        }
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46))
          auto x3811 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3811 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3812 = x3811 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3813 = x3812 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          assert(x3813 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46))
        auto x3814 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3814 != Fp::invalid());
        if (x3814 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3815 = Fp(x3632.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3815);
              reg = x3815;
            }
          }
        }
        if (x3578 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3816 = Fp(x3633.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3816);
              reg = x3816;
            }
          }
        }
        if (x3579 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3817 = Fp(x3634.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3817);
              reg = x3817;
            }
          }
        }
        if (x3580 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3818 = Fp(x3635.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3818);
              reg = x3818;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3819 = arg2[29 * steps + ((cycle - 0) & mask)];
          assert(x3819 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3820 = Fp(x3819.asUInt32() & x64.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3821 = x3820 * x63;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3821);
            reg = x3821;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3822 = Fp(x3819.asUInt32() & x53.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3823 = x3822 * x96;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3823);
            reg = x3823;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3824 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x3824 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3825 = x99 - x3824;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3826 = x3824 * x3825;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        assert(x3826 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3827 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x3827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3828 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x3828 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3829 = x3824 * x64;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3830 = x3828 * x57;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3831 = x3829 + x3830;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3832 = x3827 - x3831;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        assert(x3832 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3833 = x3814 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3834 = x3578 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3835 = x3579 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3836 = x3580 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3837 = x3833 + x3834;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3838 = x3837 + x3835;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3839 = x3838 + x3836;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3839);
          reg = x3839;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3840 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x3840 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3841 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x3841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3842 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x3842 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3843 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x3843 != Fp::invalid());
        extern_args[0] = x98;
        extern_args[1] = x3840;
        extern_args[2] = x3841;
        extern_args[3] = x3842;
        extern_args[4] = x3843;
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", extern_args, extern_outs);
        if (x3523 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
          auto x3844 = x3487 + x3519;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3840);
            reg = x3840;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3841);
            reg = x3841;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3842);
            reg = x3842;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3843);
            reg = x3843;
          }
          {
            extern_args[0] = x3844;
            extern_args[1] = x3840;
            extern_args[2] = x3841;
            extern_args[3] = x3842;
            extern_args[4] = x3843;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3845 = arg2[148 * steps + ((cycle - 0) & mask)];
          assert(x3845 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3846 = arg2[149 * steps + ((cycle - 0) & mask)];
          assert(x3846 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3847 = arg2[150 * steps + ((cycle - 0) & mask)];
          assert(x3847 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3848 = arg2[151 * steps + ((cycle - 0) & mask)];
          assert(x3848 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3844);
            reg = x3844;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3845);
            reg = x3845;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3846);
            reg = x3846;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3847);
            reg = x3847;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3848);
            reg = x3848;
          }
        }
        if (x3522 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3849 = x3344 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        assert(x3849 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        auto x3850 = x3337 - x81;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":79:46)
        assert(x3850 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:79");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3851 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3852 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3853 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3854 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3855 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3856 = x3851 + x3854;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3857 = x3852 + x3855;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3858 = x3857 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3859 = x3856 + x3502;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3859);
          reg = x3859;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3858);
          reg = x3858;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3853);
          reg = x3853;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3853);
          reg = x3853;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46))
      auto x3860 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x3860 != Fp::invalid());
      if (x3860 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46))
          auto x3861 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3861 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3862 = x3861 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          assert(x3862 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        }
        if (x99 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46))
          auto x3863 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3863 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3864 = x3863 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3865 = x3864 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          assert(x3865 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46))
        auto x3866 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3866 != Fp::invalid());
        if (x3866 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3867 = Fp(x3633.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3867);
              reg = x3867;
            }
          }
        }
        if (x3579 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3868 = Fp(x3635.asUInt32() & x95.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3868);
              reg = x3868;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3869 = arg2[29 * steps + ((cycle - 0) & mask)];
          assert(x3869 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3870 = Fp(x3869.asUInt32() & x64.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3871 = x3870 * x63;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3871);
            reg = x3871;
          }
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3872 = Fp(x3869.asUInt32() & x53.asUInt32());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3873 = x3872 * x96;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3873);
            reg = x3873;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3874 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x3874 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3875 = x99 - x3874;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3876 = x3874 * x3875;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        assert(x3876 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3877 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x3877 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3878 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x3878 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3879 = x3874 * x64;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3880 = x3878 * x57;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3881 = x3879 + x3880;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3882 = x3877 - x3881;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        assert(x3882 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3883 = x3866 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3884 = x3866 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3885 = x3579 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3886 = x3579 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3887 = x3883 + x3885;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3888 = x3884 + x3886;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3887);
          reg = x3887;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3888);
          reg = x3888;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3889 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x3889 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3890 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x3890 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3891 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x3891 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3892 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x3892 != Fp::invalid());
        extern_args[0] = x98;
        extern_args[1] = x3889;
        extern_args[2] = x3890;
        extern_args[3] = x3891;
        extern_args[4] = x3892;
        extern_log(ctx, cycle, "  fillByte = %4x, extended: %w", extern_args, extern_outs);
        if (x3523 != 0) {
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
          auto x3893 = x3487 + x3519;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3889);
            reg = x3889;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3890);
            reg = x3890;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3891);
            reg = x3891;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3892);
            reg = x3892;
          }
          {
            extern_args[0] = x3893;
            extern_args[1] = x3889;
            extern_args[2] = x3890;
            extern_args[3] = x3891;
            extern_args[4] = x3892;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3894 = arg2[148 * steps + ((cycle - 0) & mask)];
          assert(x3894 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3895 = arg2[149 * steps + ((cycle - 0) & mask)];
          assert(x3895 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3896 = arg2[150 * steps + ((cycle - 0) & mask)];
          assert(x3896 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3897 = arg2[151 * steps + ((cycle - 0) & mask)];
          assert(x3897 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3893);
            reg = x3893;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3894);
            reg = x3894;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3895);
            reg = x3895;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3896);
            reg = x3896;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3897);
            reg = x3897;
          }
        }
        if (x3522 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3898 = x3344 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        assert(x3898 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        auto x3899 = x3337 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":80:46)
        assert(x3899 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:80");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3900 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3901 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":72:7)
        auto x3902 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
        auto x3903 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:21)
        auto x3904 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3905 = x3900 + x3903;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3906 = x3901 + x3904;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":71:7)
        auto x3907 = x3906 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
        auto x3908 = x3905 + x3502;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3908);
          reg = x3908;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3907);
          reg = x3907;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46))
      auto x3909 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x3909 != Fp::invalid());
      if (x3909 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46))
          auto x3910 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3910 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
          auto x3911 = x3910 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
          assert(x3911 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        }
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46))
          auto x3912 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3912 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
          auto x3913 = x3912 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
          auto x3914 = x3913 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
          assert(x3914 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46))
        auto x3915 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3915 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3916 = x3915 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3917 = x3578 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3918 = x3579 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3919 = x3580 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3920 = x99 - x3915;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3921 = x99 - x3578;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3922 = x99 - x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3923 = x99 - x3580;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3924 = x3920 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3925 = x3921 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3926 = x3922 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3927 = x3923 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3928 = x3916 + x3924;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3929 = x3917 + x3925;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3930 = x3918 + x3926;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3931 = x3919 + x3927;
        extern_args[0] = x3928;
        extern_args[1] = x3929;
        extern_args[2] = x3930;
        extern_args[3] = x3931;
        extern_log(ctx, cycle, "  writeVal = %w", extern_args, extern_outs);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3928);
          reg = x3928;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3929);
          reg = x3929;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3930);
          reg = x3930;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3931);
          reg = x3931;
        }
        {
          extern_args[0] = x3627;
          extern_args[1] = x3928;
          extern_args[2] = x3929;
          extern_args[3] = x3930;
          extern_args[4] = x3931;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3932 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x3932 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3933 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x3933 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3934 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x3934 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3935 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x3935 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3932);
          reg = x3932;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3933);
          reg = x3933;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3934);
          reg = x3934;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3935);
          reg = x3935;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        auto x3936 = x3344 - x38;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        assert(x3936 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":81:46)
        assert(x3337 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:81");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3937 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3938 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
        auto x3939 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
        auto x3940 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
        auto x3941 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3942 = x3937 + x3940;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3943 = x3938 + x3941;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3944 = x3943 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3945 = x3942 + x3519;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3945);
          reg = x3945;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3944);
          reg = x3944;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3939);
          reg = x3939;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3939);
          reg = x3939;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46))
      auto x3946 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x3946 != Fp::invalid());
      if (x3946 != 0) {
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46))
          auto x3947 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3947 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
          auto x3948 = x3947 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
          assert(x3948 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        }
        if (x99 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46))
          auto x3949 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3949 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
          auto x3950 = x3949 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
          auto x3951 = x3950 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
          assert(x3951 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46))
        auto x3952 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3952 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3953 = x3952 * x3509;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3954 = x3952 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3955 = x3579 * x3509;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3956 = x3579 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3957 = x99 - x3952;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3958 = x99 - x3579;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3959 = x3957 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3960 = x3957 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3961 = x3958 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3962 = x3958 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3963 = x3954 + x3959;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3964 = x3953 + x3960;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3965 = x3956 + x3961;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3966 = x3955 + x3962;
        extern_args[0] = x3963;
        extern_args[1] = x3964;
        extern_args[2] = x3965;
        extern_args[3] = x3966;
        extern_log(ctx, cycle, "  writeVal = %w", extern_args, extern_outs);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3963);
          reg = x3963;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3964);
          reg = x3964;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3965);
          reg = x3965;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3966);
          reg = x3966;
        }
        {
          extern_args[0] = x3627;
          extern_args[1] = x3963;
          extern_args[2] = x3964;
          extern_args[3] = x3965;
          extern_args[4] = x3966;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3967 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x3967 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3968 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x3968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3969 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x3969 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3970 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x3970 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3967);
          reg = x3967;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3968);
          reg = x3968;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3969);
          reg = x3969;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3970);
          reg = x3970;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3971 = x3344 - x38;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        assert(x3971 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        auto x3972 = x3337 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":82:46)
        assert(x3972 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:82");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3973 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3974 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
        auto x3975 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
        auto x3976 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
        auto x3977 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3978 = x3973 + x3976;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3979 = x3974 + x3977;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x3980 = x3979 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x3981 = x3978 + x3519;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3981);
          reg = x3981;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3980);
          reg = x3980;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3975);
          reg = x3975;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3975);
          reg = x3975;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46))
      auto x3982 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x3982 != Fp::invalid());
      if (x3982 != 0) {
        if (x99 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46))
          auto x3983 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3983 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
          auto x3984 = x3983 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
          assert(x3984 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        }
        if (x98 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46))
          auto x3985 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x3985 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
          auto x3986 = x3985 + x3579;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
          auto x3987 = x3986 - x99;
          // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
          assert(x3987 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46))
        auto x3988 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x3988 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3989 = x3988 * x3510;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3990 = x3988 * x3509;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3991 = x3988 * x3511;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3992 = x3988 * x3508;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3993 = x99 - x3988;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3994 = x3993 * x3632;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3995 = x3993 * x3633;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3996 = x3993 * x3634;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3997 = x3993 * x3635;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3998 = x3992 + x3994;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x3999 = x3990 + x3995;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x4000 = x3989 + x3996;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x4001 = x3991 + x3997;
        extern_args[0] = x3998;
        extern_args[1] = x3999;
        extern_args[2] = x4000;
        extern_args[3] = x4001;
        extern_log(ctx, cycle, "  writeVal = %w", extern_args, extern_outs);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3998);
          reg = x3998;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3999);
          reg = x3999;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4000);
          reg = x4000;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4001);
          reg = x4001;
        }
        {
          extern_args[0] = x3627;
          extern_args[1] = x3998;
          extern_args[2] = x3999;
          extern_args[3] = x4000;
          extern_args[4] = x4001;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4002 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x4002 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4003 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x4003 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4004 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x4004 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4005 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x4005 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4002);
          reg = x4002;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4003);
          reg = x4003;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4005);
          reg = x4005;
        }
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x4006 = x3344 - x38;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        assert(x4006 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        auto x4007 = x3337 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":83:46)
        assert(x4007 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:83");
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x4008 = x3298 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x4009 = x3300 * x52;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":81:7)
        auto x4010 = x3300 * x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:21)
        auto x4011 = x3303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:21)
        auto x4012 = x3301 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x4013 = x4008 + x4011;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x4014 = x4009 + x4012;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":80:7)
        auto x4015 = x4014 + x3299;
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":79:7)
        auto x4016 = x4013 + x3519;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4016);
          reg = x4016;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4010);
          reg = x4010;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4010);
          reg = x4010;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4017 = x3617 * x3654;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4018 = x4017 * x3655;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x4018 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[4](Reg)"("./zirgen/components/mux.h":49:25))
    auto x4019 = arg2[105 * steps + ((cycle - 0) & mask)];
    assert(x4019 != Fp::invalid());
    if (x4019 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4020 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x4020 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4020);
        reg = x4020;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":21:37))
      auto x4021 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x4021 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":21:37)
      auto x4022 = x4021 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":21:37)
      assert(x4022 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/multiply.cpp:21");
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":24:41)
      auto x4023 = x975 * x78;
      {
        extern_args[0] = x4023;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4024 = extern_outs[0];
        auto x4025 = extern_outs[1];
        auto x4026 = extern_outs[2];
        auto x4027 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4024);
          reg = x4024;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4025);
          reg = x4025;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4026);
          reg = x4026;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4027);
          reg = x4027;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4028 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x4028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4029 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x4029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4030 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4031 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x4031 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4023);
        reg = x4023;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4028);
        reg = x4028;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4029);
        reg = x4029;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4030);
        reg = x4030;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4031);
        reg = x4031;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x4032 = Fp(x4031.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x4033 = x4032 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x4034 = Fp(x4031.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x4035 = x4034 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4035);
          reg = x4035;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x4036 = Fp(x4031.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x4037 = x4036 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x4038 = Fp(x4031.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x4039 = x4038 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4039);
          reg = x4039;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x4040 = Fp(x4031.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x4041 = x4040 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4041);
          reg = x4041;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x4042 = Fp(x4031.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4042);
          reg = x4042;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x4043 = Fp(x4030.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x4044 = x4043 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4044);
          reg = x4044;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x4045 = Fp(x4030.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x4046 = x4045 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4046);
          reg = x4046;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x4047 = Fp(x4030.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x4048 = x4047 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4048);
          reg = x4048;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x4049 = Fp(x4030.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x4050 = x4049 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4050);
          reg = x4050;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x4051 = Fp(x4030.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4051);
          reg = x4051;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x4052 = Fp(x4029.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x4053 = x4052 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4053);
          reg = x4053;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x4054 = Fp(x4029.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x4055 = x4054 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4055);
          reg = x4055;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x4056 = Fp(x4029.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x4057 = x4056 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4057);
          reg = x4057;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x4058 = Fp(x4029.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x4059 = x4058 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4059);
          reg = x4059;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x4060 = Fp(x4029.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4060);
          reg = x4060;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x4061 = Fp(x4028.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x4062 = x4061 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4062);
          reg = x4062;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x4063 = Fp(x4028.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4064 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x4064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4065 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x4065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4066 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x4066 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4067 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x4067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4068 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x4068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4069 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x4069 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x4070 = x4066 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4071 = x4067 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x4072 = x4064 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x4073 = x4065 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4074 = x4071 + x4073;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4075 = x4074 + x4072;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4076 = x4075 + x4069;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x4077 = x4070 + x4076;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x4078 = x4077 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x4079 = x4078 + x4068;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x4080 = x4031 - x4079;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x4080 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4081 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x4081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4082 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x4082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4083 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x4083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4084 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x4084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4085 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x4085 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4086 = x4081 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x4087 = x4082 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x4088 = x4083 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4089 = x4086 + x4087;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4090 = x4089 + x4084;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4091 = x4090 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4092 = x4091 + x4088;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4093 = x4092 + x4085;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x4094 = x4030 - x4093;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x4094 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4095 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x4095 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4096 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x4096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4097 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4098 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x4098 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4099 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x4099 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4100 = x4095 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x4101 = x4096 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x4102 = x4097 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x4103 = x4101 + x4098;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x4104 = x4103 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4105 = x4100 + x4104;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4106 = x4105 + x4102;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4107 = x4106 + x4099;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x4108 = x4029 - x4107;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x4108 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4109 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x4109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4110 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x4110 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x4111 = x4109 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x4112 = x4111 + x4110;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x4113 = x4028 - x4112;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x4113 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x4028;
        extern_args[1] = x4029;
        extern_args[2] = x4030;
        extern_args[3] = x4031;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x4114 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4115 = (x4114 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4115);
            reg = x4115;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4116 = x4114 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4117 = (x4116 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4117);
            reg = x4117;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4118 = x4114 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4119 = (x4118 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4119);
            reg = x4119;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4120 = x4114 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4121 = (x4120 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4121);
            reg = x4121;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4122 = x4114 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4123 = (x4122 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4123);
            reg = x4123;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4124 = x4114 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4125 = (x4124 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4125);
            reg = x4125;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4126 = x4114 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4127 = (x4126 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4127);
            reg = x4127;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4128 = x4114 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4129 = (x4128 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4129);
            reg = x4129;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4130 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x4130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4131 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x4131 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4132 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x4132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4133 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x4133 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4134 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x4134 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4135 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x4135 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4136 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x4136 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4137 = x4131 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4138 = x4132 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4139 = x4133 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4140 = x4134 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4141 = x4135 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4142 = x4136 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4143 = x4130 + x4137;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4144 = x4143 + x4138;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4145 = x4144 + x4139;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4146 = x4145 + x4140;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4147 = x4146 + x4141;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4148 = x4147 + x4142;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x4149 = x4148 - x4114;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x4149 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      extern_args[0] = x98;
      extern_args[1] = x98;
      extern_args[2] = x98;
      extern_args[3] = x98;
      extern_args[4] = x98;
      extern_log(ctx, cycle, "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":58:57)
      auto x4150 = x4020 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":58:39)
      auto x4151 = x51 - x4150;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49))
      auto x4152 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x4152 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49))
      auto x4153 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x4153 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49))
      auto x4154 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x4154 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49))
      auto x4155 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x4155 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49))
      auto x4156 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x4156 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4157 = x4083 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x4158 = x4085 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4159 = x4157 + x4158;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4160 = x4159 + x4095;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":58:39)
      auto x4161 = x4151 + x4160;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
      auto x4162 = x4152 + x4153;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
      auto x4163 = x4162 + x4154;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
      auto x4164 = x4155 + x4156;
      {
        extern_args[0] = x4161;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4165 = extern_outs[0];
        auto x4166 = extern_outs[1];
        auto x4167 = extern_outs[2];
        auto x4168 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4165);
          reg = x4165;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4166);
          reg = x4166;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4167);
          reg = x4167;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4168);
          reg = x4168;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4169 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x4169 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4170 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x4170 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4171 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x4171 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4172 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x4172 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4161);
        reg = x4161;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4169);
        reg = x4169;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4170);
        reg = x4170;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4171);
        reg = x4171;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4172);
        reg = x4172;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x4173 = x4068 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x4174 = x4173 + x4090;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":59:39)
      auto x4175 = x4151 + x4174;
      {
        extern_args[0] = x4175;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4176 = extern_outs[0];
        auto x4177 = extern_outs[1];
        auto x4178 = extern_outs[2];
        auto x4179 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4176);
          reg = x4176;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4177);
          reg = x4177;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4178);
          reg = x4178;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4179);
          reg = x4179;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4180 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x4180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4181 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x4181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4182 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x4182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4183 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x4183 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4175);
        reg = x4175;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4180);
        reg = x4180;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4181);
        reg = x4181;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4182);
        reg = x4182;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4183);
        reg = x4183;
      }
      extern_args[0] = x4160;
      extern_args[1] = x4169;
      extern_args[2] = x4170;
      extern_args[3] = x4171;
      extern_args[4] = x4172;
      extern_args[5] = x4174;
      extern_args[6] = x4180;
      extern_args[7] = x4181;
      extern_args[8] = x4182;
      extern_args[9] = x4183;
      extern_log(ctx, cycle, "  rs1=x%u -> %w, rs2=x%u -> %w", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":65:35)
      auto x4184 = x99 - x4156;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4185 = x4064 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
      auto x4186 = x4069 * x61;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4187 = x4184 * x4180;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4188 = x4185 + x4186;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4189 = x4188 + x4174;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4190 = x4156 * x4189;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4191 = x4190 + x4187;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:16)
        auto x4192 = Fp(x4191.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":67:15)
        auto x4193 = x4192 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4193);
          reg = x4193;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":68:16)
        auto x4194 = Fp(x4191.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":68:15)
        auto x4195 = x4194 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4195);
          reg = x4195;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":69:14)
        auto x4196 = Fp(x4191.asUInt32() & x36.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4197 = Fp(x4196.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4197);
            reg = x4197;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4198 = Fp(x4196.asUInt32() & x96.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4199 = x4198 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4199);
            reg = x4199;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4200 = Fp(x4196.asUInt32() & x81.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4201 = x4200 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4201);
            reg = x4201;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4202 = Fp(x4196.asUInt32() & x67.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4203 = x4202 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4203);
            reg = x4203;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4204 = Fp(x4196.asUInt32() & x65.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4205 = x4204 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4205);
            reg = x4205;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4206 = arg2[191 * steps + ((cycle - 0) & mask)];
          assert(x4206 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4207 = arg2[192 * steps + ((cycle - 0) & mask)];
          assert(x4207 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4208 = arg2[193 * steps + ((cycle - 0) & mask)];
          assert(x4208 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4209 = arg2[195 * steps + ((cycle - 0) & mask)];
          assert(x4209 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4210 = arg2[194 * steps + ((cycle - 0) & mask)];
          assert(x4210 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:42)
          auto x4211 = x4207 * x79;
          // loc("zirgen/components/u32.cpp":195:21)
          auto x4212 = x4208 * x71;
          // loc("zirgen/components/u32.cpp":196:15)
          auto x4213 = x4209 * x96;
          // loc("zirgen/components/u32.cpp":195:17)
          auto x4214 = x4212 + x99;
          // loc("zirgen/components/u32.cpp":196:15)
          auto x4215 = x4213 + x4210;
          // loc("zirgen/components/u32.cpp":195:58)
          auto x4216 = x4206 + x99;
          // loc("zirgen/components/u32.cpp":195:38)
          auto x4217 = x4211 + x99;
          // loc("zirgen/components/u32.cpp":198:13)
          auto x4218 = (x4215 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":195:16)
          auto x4219 = x4214 * x4217;
          // loc("zirgen/components/u32.cpp":195:16)
          auto x4220 = x4219 * x4216;
          // loc("zirgen/components/u32.cpp":198:34)
          auto x4221 = x4215 - x99;
          // loc("zirgen/components/u32.cpp":198:55)
          auto x4222 = x4215 - x96;
          // loc("zirgen/components/u32.cpp":198:76)
          auto x4223 = x4215 - x79;
          // loc("zirgen/components/u32.cpp":198:34)
          auto x4224 = (x4221 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:55)
          auto x4225 = (x4222 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:76)
          auto x4226 = (x4223 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:9)
          auto x4227 = x4218 * x4220;
          // loc("zirgen/components/u32.cpp":198:30)
          auto x4228 = x4224 * x4220;
          // loc("zirgen/components/u32.cpp":198:51)
          auto x4229 = x4225 * x4220;
          // loc("zirgen/components/u32.cpp":198:72)
          auto x4230 = x4226 * x4220;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4227);
            reg = x4227;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4228);
            reg = x4228;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4229);
            reg = x4229;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4230);
            reg = x4230;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4231 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x4231 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4232 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x4232 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4233 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x4233 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4234 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x4234 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4235 = arg2[195 * steps + ((cycle - 0) & mask)];
        assert(x4235 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4236 = x4232 * x96;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4237 = x4233 * x81;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4238 = x4234 * x67;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4239 = x4235 * x65;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4240 = x4231 + x4236;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4241 = x4240 + x4237;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4242 = x4241 + x4238;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4243 = x4242 + x4239;
        // loc("zirgen/components/u32.cpp":201:6)
        auto x4244 = x4243 - x4196;
        // loc("zirgen/components/u32.cpp":201:6)
        assert(x4244 == 0 && "eqz failed at: zirgen/components/u32.cpp:201");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4245 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x4245 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4246 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x4246 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4247 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x4247 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4248 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x4248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4249 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x4249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4250 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x4250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4251 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x4251 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:23)
      auto x4252 = x4251 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:37)
      auto x4253 = x4245 * x61;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4254 = x4247 * x96;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4255 = x4248 * x81;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4256 = x4249 * x67;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4257 = x4250 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:23)
      auto x4258 = x4252 + x4253;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4259 = x4246 + x4254;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4260 = x4259 + x4255;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4261 = x4260 + x4256;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4262 = x4261 + x4257;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:23)
      auto x4263 = x4258 + x4262;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:6)
      auto x4264 = x4191 - x4263;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":71:6)
      assert(x4264 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/multiply.cpp:71");
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":74:42)
      auto x4265 = x99 - x4164;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4266 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x4266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4267 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x4267 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4268 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x4268 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4269 = arg2[199 * steps + ((cycle - 0) & mask)];
      assert(x4269 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4270 = x4164 * x4266;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4271 = x4164 * x4267;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4272 = x4164 * x4268;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4273 = x4164 * x4269;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4274 = x4265 * x4180;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4275 = x4265 * x4181;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4276 = x4265 * x4182;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4277 = x4265 * x4183;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4278 = x4270 + x4274;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4279 = x4271 + x4275;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4280 = x4272 + x4276;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4281 = x4273 + x4277;
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x4282 = Fp(x4172.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x4283 = x4282 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4283);
          reg = x4283;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x4284 = Fp(x4172.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x4285 = x4284 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4285);
          reg = x4285;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4286 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x4286 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4287 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x4287 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x4288 = x4287 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x4289 = x4286 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x4290 = x4288 + x4289;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x4291 = x4172 - x4290;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x4291 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x4292 = Fp(x4281.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x4293 = x4292 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4293);
          reg = x4293;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x4294 = Fp(x4281.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x4295 = x4294 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4295);
          reg = x4295;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4296 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x4296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4297 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x4297 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x4298 = x4297 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x4299 = x4296 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x4300 = x4298 + x4299;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x4301 = x4281 - x4300;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x4301 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/components/u32.cpp":219:13)
      auto x4302 = x4152 * x4297;
      // loc("zirgen/components/u32.cpp":219:3)
      {
        auto& reg = arg2[202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4302);
        reg = x4302;
      }
      // loc("zirgen/components/u32.cpp":220:13)
      auto x4303 = x4162 * x4287;
      // loc("zirgen/components/u32.cpp":220:3)
      {
        auto& reg = arg2[203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4303);
        reg = x4303;
      }
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4304 = x4169 * x4278;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4305 = x4170 * x4278;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4306 = x4169 * x4279;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4307 = x4305 + x4306;
      // loc("zirgen/components/u32.cpp":237:19)
      auto x4308 = x4307 * x93;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4309 = x4304 + x4308;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4310 = Fp(x4309.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4310);
          reg = x4310;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4311 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x4311 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4312 = x4309 - x4311;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4313 = x4312 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4314 = Fp(x4313.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4314);
          reg = x4314;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4315 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x4315 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4316 = x4313 - x4315;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4317 = x4316 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4318 = Fp(x4317.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4318);
          reg = x4318;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4319 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x4319 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4320 = x4317 - x4319;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4321 = x4320 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4321);
        reg = x4321;
      }
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4322 = x4171 * x4278;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4323 = x4172 * x4278;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4324 = x4169 * x4280;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4325 = x4169 * x4281;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4326 = x4170 * x4279;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4327 = x4170 * x4280;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4328 = x4171 * x4279;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4329 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x4329 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":225:19)
      auto x4330 = x4329 * x93;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4331 = x4322 + x4326;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4332 = x4323 + x4328;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4333 = x4331 + x4324;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4334 = x4332 + x4327;
      // loc("zirgen/components/u32.cpp":225:13)
      auto x4335 = x4319 + x4330;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4336 = x4334 + x4325;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4337 = x4335 + x4333;
      // loc("zirgen/components/u32.cpp":237:19)
      auto x4338 = x4336 * x93;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4339 = x4337 + x4338;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4340 = Fp(x4339.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4340);
          reg = x4340;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4341 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x4341 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4342 = x4339 - x4341;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4343 = x4342 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4344 = Fp(x4343.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4344);
          reg = x4344;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4345 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x4345 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4346 = x4343 - x4345;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4347 = x4346 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4348 = Fp(x4347.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4349 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x4349 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4350 = x4347 - x4349;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4351 = x4350 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4351);
        reg = x4351;
      }
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4352 = x4172 * x4279;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4353 = x4172 * x4280;
      // loc("zirgen/components/u32.cpp":241:37)
      auto x4354 = x4279 * x93;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4355 = x4170 * x4281;
      // loc("zirgen/components/u32.cpp":240:53)
      auto x4356 = x4170 * x93;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4357 = x4171 * x4280;
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4358 = x4171 * x4281;
      // loc("zirgen/components/u32.cpp":241:22)
      auto x4359 = x4278 + x4354;
      // loc("zirgen/components/u32.cpp":240:38)
      auto x4360 = x4169 + x4356;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4361 = arg2[202 * steps + ((cycle - 0) & mask)];
      assert(x4361 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4362 = arg2[203 * steps + ((cycle - 0) & mask)];
      assert(x4362 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4363 = arg2[85 * steps + ((cycle - 0) & mask)];
      assert(x4363 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":240:30)
      auto x4364 = x4361 * x4360;
      // loc("zirgen/components/u32.cpp":241:14)
      auto x4365 = x4362 * x4359;
      // loc("zirgen/components/u32.cpp":225:19)
      auto x4366 = x4363 * x93;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4367 = x4352 + x4357;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4368 = x4353 + x4358;
      // loc("zirgen/components/u32.cpp":235:20)
      auto x4369 = x4367 + x4355;
      // loc("zirgen/components/u32.cpp":237:19)
      auto x4370 = x4368 * x93;
      // loc("zirgen/components/u32.cpp":225:13)
      auto x4371 = x4349 + x4366;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4372 = x4371 + x4369;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4373 = x4372 + x4370;
      // loc("zirgen/components/u32.cpp":240:13)
      auto x4374 = x4373 + x35;
      // loc("zirgen/components/u32.cpp":240:13)
      auto x4375 = x4374 - x4364;
      // loc("zirgen/components/u32.cpp":240:13)
      auto x4376 = x4375 - x4365;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4377 = Fp(x4376.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4377);
          reg = x4377;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4378 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x4378 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4379 = x4376 - x4378;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4380 = x4379 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4381 = Fp(x4380.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4381);
          reg = x4381;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4382 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x4382 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4383 = x4380 - x4382;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4384 = x4383 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4385 = Fp(x4384.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4385);
          reg = x4385;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4386 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x4386 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4387 = x4384 - x4386;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4388 = x4387 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4388);
        reg = x4388;
      }
      // loc("zirgen/components/u32.cpp":235:31)
      auto x4389 = x4172 * x4281;
      // loc("zirgen/components/u32.cpp":245:37)
      auto x4390 = x4281 * x93;
      // loc("zirgen/components/u32.cpp":244:53)
      auto x4391 = x4172 * x93;
      // loc("zirgen/components/u32.cpp":245:22)
      auto x4392 = x4280 + x4390;
      // loc("zirgen/components/u32.cpp":244:38)
      auto x4393 = x4171 + x4391;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/U32Mul/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4394 = arg2[86 * steps + ((cycle - 0) & mask)];
      assert(x4394 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":244:30)
      auto x4395 = x4361 * x4393;
      // loc("zirgen/components/u32.cpp":245:14)
      auto x4396 = x4362 * x4392;
      // loc("zirgen/components/u32.cpp":225:19)
      auto x4397 = x4394 * x93;
      // loc("zirgen/components/u32.cpp":225:13)
      auto x4398 = x4386 + x4397;
      // loc("zirgen/components/u32.cpp":237:13)
      auto x4399 = x4398 + x4389;
      // loc("zirgen/components/u32.cpp":244:13)
      auto x4400 = x4399 + x34;
      // loc("zirgen/components/u32.cpp":244:13)
      auto x4401 = x4400 - x4395;
      // loc("zirgen/components/u32.cpp":244:13)
      auto x4402 = x4401 - x4396;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4403 = Fp(x4402.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4403);
          reg = x4403;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4404 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x4404 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4405 = x4402 - x4404;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4406 = x4405 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4407 = Fp(x4406.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4407);
          reg = x4407;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4408 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x4408 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4409 = x4406 - x4408;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4410 = x4409 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4410);
        reg = x4410;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4411 = x4097 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x4412 = x4099 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4413 = x4411 + x4412;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4414 = x4413 + x4109;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x4415 = (x4414 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4415);
          reg = x4415;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x4416 = inv(x4414);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4416);
          reg = x4416;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4417 = arg2[204 * steps + ((cycle - 0) & mask)];
      assert(x4417 != Fp::invalid());
      if (x4417 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x4414 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x4418 = x99 - x4417;
      if (x4418 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4419 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x4419 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4420 = x4414 * x4419;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4421 = x4420 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x4421 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":82:17)
      auto x4422 = x975 + x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x4423 = x4422 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4424 = Fp(x4423.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4424);
          reg = x4424;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4425 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x4425 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4426 = x4423 - x4425;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4427 = x4426 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4428 = Fp(x4427.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4428);
          reg = x4428;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4429 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x4429 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4430 = x4427 - x4429;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4431 = x4430 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4432 = Fp(x4431.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4432);
          reg = x4432;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4433 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x4433 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4434 = x4431 - x4433;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4435 = x4434 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x4436 = Fp(x4435.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4436);
          reg = x4436;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4437 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x4437 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x4438 = x4435 - x4437;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x4439 = x4438 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4439);
        reg = x4439;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4440 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x4440 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x4441 = x99 - x4440;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x4442 = x4440 * x4441;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4442);
        reg = x4442;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x4443 = x96 - x4440;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4444 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x4444 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x4445 = x4444 * x4443;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x4445 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":83:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x65);
        reg = x65;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":84:38)
      auto x4446 = x4163 * x4418;
      if (x4446 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":85:29)
        auto x4447 = x4151 + x4414;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4378);
          reg = x4378;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4382);
          reg = x4382;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4404);
          reg = x4404;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4408);
          reg = x4408;
        }
        {
          extern_args[0] = x4447;
          extern_args[1] = x4378;
          extern_args[2] = x4382;
          extern_args[3] = x4404;
          extern_args[4] = x4408;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4448 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x4448 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4449 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x4449 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4450 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x4450 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4451 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x4451 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4447);
          reg = x4447;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4448);
          reg = x4448;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4449);
          reg = x4449;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4450);
          reg = x4450;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4451);
          reg = x4451;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":87:44)
      auto x4452 = x99 - x4163;
      // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":87:44)
      auto x4453 = x4452 * x4418;
      if (x4453 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/multiply.cpp":88:29)
        auto x4454 = x4151 + x4414;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4311);
          reg = x4311;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4315);
          reg = x4315;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4341);
          reg = x4341;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4345);
          reg = x4345;
        }
        {
          extern_args[0] = x4454;
          extern_args[1] = x4311;
          extern_args[2] = x4315;
          extern_args[3] = x4341;
          extern_args[4] = x4345;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4455 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x4455 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4456 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x4456 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4457 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x4457 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4458 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x4458 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4454);
          reg = x4454;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4455);
          reg = x4455;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4456);
          reg = x4456;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4457);
          reg = x4457;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4458);
          reg = x4458;
        }
      }
      if (x4417 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49))
      auto x4459 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x4459 != Fp::invalid());
      if (x4459 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49)
        auto x4460 = x4110 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49)
        assert(x4460 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49)
        assert(x4103 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49)
        auto x4461 = x4077 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":101:49)
        assert(x4461 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:101");
      }
      if (x4152 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        auto x4462 = x4110 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        assert(x4462 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        auto x4463 = x4103 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        assert(x4463 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        auto x4464 = x4077 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":102:49)
        assert(x4464 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:102");
      }
      if (x4153 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        auto x4465 = x4110 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        assert(x4465 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        auto x4466 = x4103 - x96;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        assert(x4466 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        auto x4467 = x4077 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":103:49)
        assert(x4467 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:103");
      }
      if (x4154 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        auto x4468 = x4110 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        assert(x4468 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        auto x4469 = x4103 - x79;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        assert(x4469 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        auto x4470 = x4077 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":104:49)
        assert(x4470 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:104");
      }
      if (x4155 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49)
        auto x4471 = x4110 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49)
        assert(x4471 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49)
        auto x4472 = x4103 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49)
        assert(x4472 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":105:49)
        assert(x4077 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:105");
      }
      if (x4156 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
        auto x4473 = x4110 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
        assert(x4473 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
        auto x4474 = x4103 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
        assert(x4474 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":106:49)
        assert(x4077 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:106");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4475 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x4475 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4476 = x4475 * x4440;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4477 = x4476 * x4441;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x4477 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[5](Reg)"("./zirgen/components/mux.h":49:25))
    auto x4478 = arg2[106 * steps + ((cycle - 0) & mask)];
    assert(x4478 != Fp::invalid());
    if (x4478 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4479 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x4479 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4479);
        reg = x4479;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/divide.cpp":21:37))
      auto x4480 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x4480 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":21:37)
      auto x4481 = x4480 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":21:37)
      assert(x4481 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:21");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":24:41)
      auto x4482 = x975 * x78;
      {
        extern_args[0] = x4482;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4483 = extern_outs[0];
        auto x4484 = extern_outs[1];
        auto x4485 = extern_outs[2];
        auto x4486 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4487 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x4487 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4488 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x4488 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4489 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x4489 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4490 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x4490 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4482);
        reg = x4482;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4487);
        reg = x4487;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4488);
        reg = x4488;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4489);
        reg = x4489;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4490);
        reg = x4490;
      }
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:16)
        auto x4491 = Fp(x4490.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":11:15)
        auto x4492 = x4491 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4492);
          reg = x4492;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:17)
        auto x4493 = Fp(x4490.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":12:16)
        auto x4494 = x4493 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4494);
          reg = x4494;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:16)
        auto x4495 = Fp(x4490.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":13:15)
        auto x4496 = x4495 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4496);
          reg = x4496;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:16)
        auto x4497 = Fp(x4490.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":14:15)
        auto x4498 = x4497 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4498);
          reg = x4498;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:17)
        auto x4499 = Fp(x4490.asUInt32() & x69.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":15:16)
        auto x4500 = x4499 * x57;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":16:17)
        auto x4501 = Fp(x4490.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:17)
        auto x4502 = Fp(x4489.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":17:16)
        auto x4503 = x4502 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:18)
        auto x4504 = Fp(x4489.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":18:17)
        auto x4505 = x4504 * x62;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4505);
          reg = x4505;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:17)
        auto x4506 = Fp(x4489.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":19:16)
        auto x4507 = x4506 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:18)
        auto x4508 = Fp(x4489.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":20:17)
        auto x4509 = x4508 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":21:18)
        auto x4510 = Fp(x4489.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4510);
          reg = x4510;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:17)
        auto x4511 = Fp(x4488.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":22:16)
        auto x4512 = x4511 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4512);
          reg = x4512;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:19)
        auto x4513 = Fp(x4488.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":23:18)
        auto x4514 = x4513 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4514);
          reg = x4514;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:20)
        auto x4515 = Fp(x4488.asUInt32() & x54.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":24:19)
        auto x4516 = x4515 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4516);
          reg = x4516;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:17)
        auto x4517 = Fp(x4488.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":25:16)
        auto x4518 = x4517 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4518);
          reg = x4518;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":26:17)
        auto x4519 = Fp(x4488.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4519);
          reg = x4519;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:16)
        auto x4520 = Fp(x4487.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":27:15)
        auto x4521 = x4520 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:18)
        auto x4522 = Fp(x4487.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":28:5)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4522);
          reg = x4522;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4523 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x4523 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4524 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x4524 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4525 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x4525 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4526 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x4526 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4527 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x4527 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4528 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x4528 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x4529 = x4525 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4530 = x4526 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:39)
      auto x4531 = x4523 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:25)
      auto x4532 = x4524 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4533 = x4530 + x4532;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4534 = x4533 + x4531;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":57:10)
      auto x4535 = x4534 + x4528;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":53:10)
      auto x4536 = x4529 + x4535;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x4537 = x4536 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:21)
      auto x4538 = x4537 + x4527;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      auto x4539 = x4490 - x4538;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":30:6)
      assert(x4539 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4540 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x4540 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4541 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x4541 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4542 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x4542 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4543 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x4543 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4544 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x4544 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4545 = x4540 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:37)
      auto x4546 = x4541 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:69)
      auto x4547 = x4542 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4548 = x4545 + x4546;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:22)
      auto x4549 = x4548 + x4543;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4550 = x4549 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4551 = x4550 + x4547;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:21)
      auto x4552 = x4551 + x4544;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      auto x4553 = x4489 - x4552;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":31:6)
      assert(x4553 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4554 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x4554 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4555 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x4555 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4556 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x4556 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4557 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x4557 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4558 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x4558 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4559 = x4554 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x4560 = x4555 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:53)
      auto x4561 = x4556 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":49:10)
      auto x4562 = x4560 + x4557;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:36)
      auto x4563 = x4562 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4564 = x4559 + x4563;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4565 = x4564 + x4561;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:21)
      auto x4566 = x4565 + x4558;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      auto x4567 = x4488 - x4566;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":32:6)
      assert(x4567 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4568 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x4568 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4569 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x4569 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x4570 = x4568 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:21)
      auto x4571 = x4570 + x4569;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      auto x4572 = x4487 - x4571;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":33:6)
      assert(x4572 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/decode.cpp:33");
      {
        extern_args[0] = x4487;
        extern_args[1] = x4488;
        extern_args[2] = x4489;
        extern_args[3] = x4490;
        extern_getMinor(ctx, cycle, "", extern_args, extern_outs);
        auto x4573 = extern_outs[0];
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4574 = (x4573 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4574);
            reg = x4574;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4575 = x4573 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4576 = (x4575 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4576);
            reg = x4576;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4577 = x4573 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4578 = (x4577 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4578);
            reg = x4578;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4579 = x4573 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4580 = (x4579 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4580);
            reg = x4580;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4581 = x4573 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4582 = (x4581 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4582);
            reg = x4582;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4583 = x4573 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4584 = (x4583 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4584);
            reg = x4584;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4585 = x4573 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4586 = (x4585 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4586);
            reg = x4586;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4587 = x4573 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4588 = (x4587 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4588);
            reg = x4588;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4589 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x4589 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4590 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x4590 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4591 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x4591 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4592 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x4592 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4593 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x4593 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4594 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x4594 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4595 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x4595 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4596 = x4590 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4597 = x4591 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4598 = x4592 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4599 = x4593 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4600 = x4594 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4601 = x4595 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4602 = x4589 + x4596;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4603 = x4602 + x4597;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4604 = x4603 + x4598;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4605 = x4604 + x4599;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4606 = x4605 + x4600;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4607 = x4606 + x4601;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x4608 = x4607 - x4573;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x4608 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49))
      auto x4609 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x4609 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49))
      auto x4610 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x4610 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49))
      auto x4611 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x4611 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49))
      auto x4612 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x4612 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49))
      auto x4613 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x4613 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49))
      auto x4614 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x4614 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49))
      auto x4615 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x4615 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
      auto x4616 = x4609 + x4610;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
      auto x4617 = x4610 + x4611;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
      auto x4618 = x4612 + x4613;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
      auto x4619 = x4616 + x4613;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
      auto x4620 = x4618 + x4614;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
      auto x4621 = x4614 + x4615;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
      auto x4622 = x4613 + x4615;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
      auto x4623 = x4619 + x4615;
      // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
      auto x4624 = x4620 + x4615;
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4623);
        reg = x4623;
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4622);
        reg = x4622;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4625 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x4625 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4626 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x4626 != Fp::invalid());
      extern_args[0] = x4621;
      extern_args[1] = x4624;
      extern_args[2] = x4625;
      extern_args[3] = x4626;
      extern_args[4] = x4617;
      extern_log(ctx, cycle, "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":60:57)
      auto x4627 = x4479 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":60:39)
      auto x4628 = x51 - x4627;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4629 = x4542 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:26)
      auto x4630 = x4544 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4631 = x4629 + x4630;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":37:10)
      auto x4632 = x4631 + x4554;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":60:39)
      auto x4633 = x4628 + x4632;
      {
        extern_args[0] = x4633;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4634 = extern_outs[0];
        auto x4635 = extern_outs[1];
        auto x4636 = extern_outs[2];
        auto x4637 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4634);
          reg = x4634;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4635);
          reg = x4635;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4636);
          reg = x4636;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4637);
          reg = x4637;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4638 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x4638 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4639 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x4639 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4640 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x4640 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4641 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x4641 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4633);
        reg = x4633;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4638);
        reg = x4638;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4639);
        reg = x4639;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4640);
        reg = x4640;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4641);
        reg = x4641;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x4642 = x4527 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":41:10)
      auto x4643 = x4642 + x4549;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":61:39)
      auto x4644 = x4628 + x4643;
      {
        extern_args[0] = x4644;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x4645 = extern_outs[0];
        auto x4646 = extern_outs[1];
        auto x4647 = extern_outs[2];
        auto x4648 = extern_outs[3];
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4645);
          reg = x4645;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4646);
          reg = x4646;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4647);
          reg = x4647;
        }
        // loc("zirgen/components/u32.cpp":88:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4648);
          reg = x4648;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4649 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x4649 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4650 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x4650 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4651 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x4651 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4652 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x4652 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = arg2[131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4644);
        reg = x4644;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = arg2[132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x961);
        reg = x961;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = arg2[133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4649);
        reg = x4649;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4650);
        reg = x4650;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4651);
        reg = x4651;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4652);
        reg = x4652;
      }
      extern_args[0] = x4632;
      extern_args[1] = x4638;
      extern_args[2] = x4639;
      extern_args[3] = x4640;
      extern_args[4] = x4641;
      extern_args[5] = x4643;
      extern_args[6] = x4649;
      extern_args[7] = x4650;
      extern_args[8] = x4651;
      extern_args[9] = x4652;
      extern_log(ctx, cycle, "  rs1=x%u -> %w, rs2=x%u -> %w", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":67:35)
      auto x4653 = x99 - x4621;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4654 = x4523 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:21)
      auto x4655 = x4528 * x61;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4656 = x4653 * x4649;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4657 = x4654 + x4655;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":70:7)
      auto x4658 = x4657 + x4643;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4659 = x4621 * x4658;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4660 = x4659 + x4656;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:16)
        auto x4661 = Fp(x4660.asUInt32() & x37.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":69:15)
        auto x4662 = x4661 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4662);
          reg = x4662;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":70:16)
        auto x4663 = Fp(x4660.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":70:15)
        auto x4664 = x4663 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4664);
          reg = x4664;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":71:14)
        auto x4665 = Fp(x4660.asUInt32() & x36.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4666 = Fp(x4665.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4666);
            reg = x4666;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4667 = Fp(x4665.asUInt32() & x96.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4668 = x4667 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4668);
            reg = x4668;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4669 = Fp(x4665.asUInt32() & x81.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4670 = x4669 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4670);
            reg = x4670;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4671 = Fp(x4665.asUInt32() & x67.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4672 = x4671 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4672);
            reg = x4672;
          }
          // loc("zirgen/components/u32.cpp":193:21)
          auto x4673 = Fp(x4665.asUInt32() & x65.asUInt32());
          // loc("zirgen/components/u32.cpp":193:20)
          auto x4674 = x4673 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4674);
            reg = x4674;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4675 = arg2[191 * steps + ((cycle - 0) & mask)];
          assert(x4675 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4676 = arg2[192 * steps + ((cycle - 0) & mask)];
          assert(x4676 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4677 = arg2[193 * steps + ((cycle - 0) & mask)];
          assert(x4677 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4678 = arg2[195 * steps + ((cycle - 0) & mask)];
          assert(x4678 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4679 = arg2[194 * steps + ((cycle - 0) & mask)];
          assert(x4679 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":195:42)
          auto x4680 = x4676 * x79;
          // loc("zirgen/components/u32.cpp":195:21)
          auto x4681 = x4677 * x71;
          // loc("zirgen/components/u32.cpp":196:15)
          auto x4682 = x4678 * x96;
          // loc("zirgen/components/u32.cpp":195:17)
          auto x4683 = x4681 + x99;
          // loc("zirgen/components/u32.cpp":196:15)
          auto x4684 = x4682 + x4679;
          // loc("zirgen/components/u32.cpp":195:58)
          auto x4685 = x4675 + x99;
          // loc("zirgen/components/u32.cpp":195:38)
          auto x4686 = x4680 + x99;
          // loc("zirgen/components/u32.cpp":198:13)
          auto x4687 = (x4684 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":195:16)
          auto x4688 = x4683 * x4686;
          // loc("zirgen/components/u32.cpp":195:16)
          auto x4689 = x4688 * x4685;
          // loc("zirgen/components/u32.cpp":198:34)
          auto x4690 = x4684 - x99;
          // loc("zirgen/components/u32.cpp":198:55)
          auto x4691 = x4684 - x96;
          // loc("zirgen/components/u32.cpp":198:76)
          auto x4692 = x4684 - x79;
          // loc("zirgen/components/u32.cpp":198:34)
          auto x4693 = (x4690 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:55)
          auto x4694 = (x4691 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:76)
          auto x4695 = (x4692 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":198:9)
          auto x4696 = x4687 * x4689;
          // loc("zirgen/components/u32.cpp":198:30)
          auto x4697 = x4693 * x4689;
          // loc("zirgen/components/u32.cpp":198:51)
          auto x4698 = x4694 * x4689;
          // loc("zirgen/components/u32.cpp":198:72)
          auto x4699 = x4695 * x4689;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4696);
            reg = x4696;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4697);
            reg = x4697;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4698);
            reg = x4698;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4699);
            reg = x4699;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4700 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x4700 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4701 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x4701 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4702 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x4702 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4703 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x4703 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4704 = arg2[195 * steps + ((cycle - 0) & mask)];
        assert(x4704 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4705 = x4701 * x96;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4706 = x4702 * x81;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4707 = x4703 * x67;
        // loc("zirgen/components/u32.cpp":207:17)
        auto x4708 = x4704 * x65;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4709 = x4700 + x4705;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4710 = x4709 + x4706;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4711 = x4710 + x4707;
        // loc("zirgen/components/u32.cpp":207:11)
        auto x4712 = x4711 + x4708;
        // loc("zirgen/components/u32.cpp":201:6)
        auto x4713 = x4712 - x4665;
        // loc("zirgen/components/u32.cpp":201:6)
        assert(x4713 == 0 && "eqz failed at: zirgen/components/u32.cpp:201");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4714 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x4714 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4715 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x4715 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4716 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x4716 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4717 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x4717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4718 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x4718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4719 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x4719 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4720 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x4720 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:23)
      auto x4721 = x4720 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:37)
      auto x4722 = x4714 * x61;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4723 = x4716 * x96;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4724 = x4717 * x81;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4725 = x4718 * x67;
      // loc("zirgen/components/u32.cpp":207:17)
      auto x4726 = x4719 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:23)
      auto x4727 = x4721 + x4722;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4728 = x4715 + x4723;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4729 = x4728 + x4724;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4730 = x4729 + x4725;
      // loc("zirgen/components/u32.cpp":207:11)
      auto x4731 = x4730 + x4726;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:23)
      auto x4732 = x4727 + x4731;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:6)
      auto x4733 = x4660 - x4732;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":73:6)
      assert(x4733 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:73");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":76:42)
      auto x4734 = x99 - x4624;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4735 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x4735 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4736 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x4736 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4737 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x4737 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4738 = arg2[199 * steps + ((cycle - 0) & mask)];
      assert(x4738 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4739 = x4624 * x4735;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4740 = x4624 * x4736;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4741 = x4624 * x4737;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4742 = x4624 * x4738;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4743 = x4734 * x4649;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4744 = x4734 * x4650;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4745 = x4734 * x4651;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x4746 = x4734 * x4652;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4747 = x4739 + x4743;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4748 = x4740 + x4744;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4749 = x4741 + x4745;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x4750 = x4742 + x4746;
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = arg2[18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4747);
        reg = x4747;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4748);
        reg = x4748;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = arg2[20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4749);
        reg = x4749;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4750);
        reg = x4750;
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4751 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x4751 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4752 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x4752 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4753 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x4753 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4754 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x4754 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":87:16)
        auto x4755 = x4625 + x4626;
        extern_args[0] = x4638;
        extern_args[1] = x4639;
        extern_args[2] = x4640;
        extern_args[3] = x4641;
        extern_args[4] = x4751;
        extern_args[5] = x4752;
        extern_args[6] = x4753;
        extern_args[7] = x4754;
        extern_args[8] = x4755;
        extern_divide(ctx, cycle, "", extern_args, extern_outs);
        auto x4756 = extern_outs[0];
        auto x4757 = extern_outs[1];
        auto x4758 = extern_outs[2];
        auto x4759 = extern_outs[3];
        auto x4760 = extern_outs[4];
        auto x4761 = extern_outs[5];
        auto x4762 = extern_outs[6];
        auto x4763 = extern_outs[7];
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4756);
          reg = x4756;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4760);
          reg = x4760;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4757);
          reg = x4757;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4761);
          reg = x4761;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4758);
          reg = x4758;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4762);
          reg = x4762;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4759);
          reg = x4759;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4763);
          reg = x4763;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4764 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x4764 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4765 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x4765 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4766 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x4766 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4767 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x4767 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4768 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x4768 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4769 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x4769 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4770 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x4770 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4771 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x4771 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4772 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x4772 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4773 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x4773 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4774 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x4774 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4775 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x4775 != Fp::invalid());
      extern_args[0] = x4638;
      extern_args[1] = x4639;
      extern_args[2] = x4640;
      extern_args[3] = x4641;
      extern_args[4] = x4764;
      extern_args[5] = x4765;
      extern_args[6] = x4766;
      extern_args[7] = x4767;
      extern_args[8] = x4768;
      extern_args[9] = x4769;
      extern_args[10] = x4770;
      extern_args[11] = x4771;
      extern_args[12] = x4772;
      extern_args[13] = x4773;
      extern_args[14] = x4774;
      extern_args[15] = x4775;
      extern_log(ctx, cycle, "  numer=%w, denom=%w, quot=%w, rem=%w", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4776 = x4556 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:25)
      auto x4777 = x4558 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4778 = x4776 + x4777;
      // loc("zirgen/circuit/rv32im/v1/edsl/decode.cpp":45:10)
      auto x4779 = x4778 + x4568;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x4780 = (x4779 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4780);
          reg = x4780;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x4781 = inv(x4779);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4781);
          reg = x4781;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4782 = arg2[202 * steps + ((cycle - 0) & mask)];
      assert(x4782 != Fp::invalid());
      if (x4782 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x4779 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x4783 = x99 - x4782;
      if (x4783 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x4784 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x4784 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4785 = x4779 * x4784;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4786 = x4785 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x4786 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":98:37)
      auto x4787 = x4617 * x4783;
      if (x4787 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":100:22)
        auto x4788 = x4628 + x4779;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4772);
          reg = x4772;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4773);
          reg = x4773;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4774);
          reg = x4774;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4775);
          reg = x4775;
        }
        {
          extern_args[0] = x4788;
          extern_args[1] = x4772;
          extern_args[2] = x4773;
          extern_args[3] = x4774;
          extern_args[4] = x4775;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4789 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x4789 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4790 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x4790 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4791 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x4791 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4792 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x4792 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4788);
          reg = x4788;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4789);
          reg = x4789;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4790);
          reg = x4790;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4791);
          reg = x4791;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4792);
          reg = x4792;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":103:43)
      auto x4793 = x99 - x4617;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":103:43)
      auto x4794 = x4793 * x4783;
      if (x4794 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":105:22)
        auto x4795 = x4628 + x4779;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4768);
          reg = x4768;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4769);
          reg = x4769;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4770);
          reg = x4770;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4771);
          reg = x4771;
        }
        {
          extern_args[0] = x4795;
          extern_args[1] = x4768;
          extern_args[2] = x4769;
          extern_args[3] = x4770;
          extern_args[4] = x4771;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4796 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x4796 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4797 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x4797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4798 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x4798 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4799 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x4799 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4795);
          reg = x4795;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4796);
          reg = x4796;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4797);
          reg = x4797;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4798);
          reg = x4798;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4799);
          reg = x4799;
        }
      }
      if (x4782 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":111:17)
      auto x4800 = x975 + x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x4801 = x4800 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4802 = Fp(x4801.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4802);
          reg = x4802;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4803 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x4803 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4804 = x4801 - x4803;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4805 = x4804 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4806 = Fp(x4805.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4806);
          reg = x4806;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4807 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x4807 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4808 = x4805 - x4807;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4809 = x4808 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4810 = Fp(x4809.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4810);
          reg = x4810;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4811 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x4811 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4812 = x4809 - x4811;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4813 = x4812 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x4814 = Fp(x4813.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4814);
          reg = x4814;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4815 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x4815 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x4816 = x4813 - x4815;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x4817 = x4816 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4817);
        reg = x4817;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4818 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x4818 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x4819 = x99 - x4818;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x4820 = x4818 * x4819;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4820);
        reg = x4820;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x4821 = x96 - x4818;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x4822 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x4822 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x4823 = x4822 * x4821;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x4823 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":112:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x68);
        reg = x68;
      }
      if (x4609 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        auto x4824 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        assert(x4824 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        auto x4825 = x4562 - x81;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        assert(x4825 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        auto x4826 = x4536 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":124:49)
        assert(x4826 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:124");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49))
      auto x4827 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x4827 != Fp::invalid());
      if (x4827 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        auto x4828 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        assert(x4828 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        auto x4829 = x4562 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        assert(x4829 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        auto x4830 = x4536 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":125:49)
        assert(x4830 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:125");
      }
      if (x4610 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        auto x4831 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        assert(x4831 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        auto x4832 = x4562 - x69;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        assert(x4832 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        auto x4833 = x4536 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":126:49)
        assert(x4833 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:126");
      }
      if (x4611 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        auto x4834 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        assert(x4834 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        auto x4835 = x4562 - x68;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        assert(x4835 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        auto x4836 = x4536 - x99;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":127:49)
        assert(x4836 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:127");
      }
      if (x4612 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49)
        auto x4837 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49)
        assert(x4837 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49)
        auto x4838 = x4562 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49)
        assert(x4838 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":128:49)
        assert(x4536 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:128");
      }
      if (x4613 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        auto x4839 = x4569 - x48;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        assert(x4839 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        auto x4840 = x4562 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        assert(x4840 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        auto x4841 = x4536 - x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":129:49)
        assert(x4841 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:129");
      }
      if (x4614 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
        auto x4842 = x4569 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
        assert(x4842 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
        auto x4843 = x4562 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
        assert(x4843 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":130:49)
        assert(x4536 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:130");
      }
      if (x4615 != 0) {
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        auto x4844 = x4569 - x47;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        assert(x4844 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        auto x4845 = x4562 - x70;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        assert(x4845 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        auto x4846 = x4536 - x61;
        // loc("./zirgen/circuit/rv32im/v1/platform/rv32im.inl":131:49)
        assert(x4846 == 0 && "eqz failed at: ./zirgen/circuit/rv32im/v1/platform/rv32im.inl:131");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4847 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x4847 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4848 = x4847 * x4818;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x4849 = x4848 * x4819;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x4849 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[6](Reg)"("./zirgen/components/mux.h":49:25))
    auto x4850 = arg2[107 * steps + ((cycle - 0) & mask)];
    assert(x4850 != Fp::invalid());
    if (x4850 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4851 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x4851 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4851);
        reg = x4851;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/compute.cpp":208:37))
      auto x4852 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x4852 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":208:37)
      auto x4853 = x4852 - x69;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":208:37)
      assert(x4853 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:208");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4854 = arg2[127 * steps + ((cycle - 1) & mask)];
      assert(x4854 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4855 = arg2[202 * steps + ((cycle - 1) & mask)];
      assert(x4855 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4856 = arg2[206 * steps + ((cycle - 1) & mask)];
      assert(x4856 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4857 = arg2[128 * steps + ((cycle - 1) & mask)];
      assert(x4857 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4858 = arg2[203 * steps + ((cycle - 1) & mask)];
      assert(x4858 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4859 = arg2[207 * steps + ((cycle - 1) & mask)];
      assert(x4859 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4860 = arg2[129 * steps + ((cycle - 1) & mask)];
      assert(x4860 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4861 = arg2[204 * steps + ((cycle - 1) & mask)];
      assert(x4861 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4862 = arg2[208 * steps + ((cycle - 1) & mask)];
      assert(x4862 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4863 = arg2[130 * steps + ((cycle - 1) & mask)];
      assert(x4863 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4864 = arg2[205 * steps + ((cycle - 1) & mask)];
      assert(x4864 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4865 = arg2[209 * steps + ((cycle - 1) & mask)];
      assert(x4865 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4866 = Fp(x4854.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4866);
          reg = x4866;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4867 = Fp(x4855.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4867);
          reg = x4867;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4868 = Fp(x4854.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4869 = x4868 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4869);
          reg = x4869;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4870 = Fp(x4855.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4871 = x4870 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4871);
          reg = x4871;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4872 = Fp(x4854.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4873 = x4872 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4873);
          reg = x4873;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4874 = Fp(x4855.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4875 = x4874 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4875);
          reg = x4875;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4876 = Fp(x4854.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4877 = x4876 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4877);
          reg = x4877;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4878 = Fp(x4855.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4879 = x4878 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4879);
          reg = x4879;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4880 = Fp(x4854.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4881 = x4880 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4881);
          reg = x4881;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4882 = Fp(x4855.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4883 = x4882 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4883);
          reg = x4883;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4884 = Fp(x4854.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4885 = x4884 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4885);
          reg = x4885;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4886 = Fp(x4855.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4887 = x4886 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4887);
          reg = x4887;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4888 = Fp(x4854.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4889 = x4888 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4889);
          reg = x4889;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4890 = Fp(x4855.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4891 = x4890 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4891);
          reg = x4891;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4892 = Fp(x4854.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4893 = x4892 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4893);
          reg = x4893;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4894 = Fp(x4855.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4895 = x4894 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4895);
          reg = x4895;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4896 = Fp(x4857.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4896);
          reg = x4896;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4897 = Fp(x4858.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4897);
          reg = x4897;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4898 = Fp(x4857.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4899 = x4898 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4899);
          reg = x4899;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4900 = Fp(x4858.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4901 = x4900 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4901);
          reg = x4901;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4902 = Fp(x4857.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4903 = x4902 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4903);
          reg = x4903;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4904 = Fp(x4858.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4905 = x4904 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4905);
          reg = x4905;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4906 = Fp(x4857.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4907 = x4906 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4907);
          reg = x4907;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4908 = Fp(x4858.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4909 = x4908 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4909);
          reg = x4909;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4910 = Fp(x4857.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4911 = x4910 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4911);
          reg = x4911;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4912 = Fp(x4858.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4913 = x4912 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4913);
          reg = x4913;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4914 = Fp(x4857.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4915 = x4914 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4915);
          reg = x4915;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4916 = Fp(x4858.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4917 = x4916 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4917);
          reg = x4917;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4918 = Fp(x4857.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4919 = x4918 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4919);
          reg = x4919;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4920 = Fp(x4858.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4921 = x4920 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4921);
          reg = x4921;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4922 = Fp(x4857.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4923 = x4922 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4923);
          reg = x4923;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4924 = Fp(x4858.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4925 = x4924 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4925);
          reg = x4925;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4926 = Fp(x4860.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4926);
          reg = x4926;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4927 = Fp(x4861.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4927);
          reg = x4927;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4928 = Fp(x4860.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4929 = x4928 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4929);
          reg = x4929;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4930 = Fp(x4861.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4931 = x4930 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4931);
          reg = x4931;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4932 = Fp(x4860.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4933 = x4932 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4933);
          reg = x4933;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4934 = Fp(x4861.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4935 = x4934 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4935);
          reg = x4935;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4936 = Fp(x4860.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4937 = x4936 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4937);
          reg = x4937;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4938 = Fp(x4861.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4939 = x4938 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4939);
          reg = x4939;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4940 = Fp(x4860.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4941 = x4940 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4941);
          reg = x4941;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4942 = Fp(x4861.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4943 = x4942 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4943);
          reg = x4943;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4944 = Fp(x4860.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4945 = x4944 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4945);
          reg = x4945;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4946 = Fp(x4861.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4947 = x4946 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4947);
          reg = x4947;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4948 = Fp(x4860.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4949 = x4948 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4949);
          reg = x4949;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4950 = Fp(x4861.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4951 = x4950 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4951);
          reg = x4951;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4952 = Fp(x4860.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4953 = x4952 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4953);
          reg = x4953;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4954 = Fp(x4861.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4955 = x4954 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4955);
          reg = x4955;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4956 = Fp(x4863.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4956);
          reg = x4956;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4957 = Fp(x4864.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4957);
          reg = x4957;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4958 = Fp(x4863.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4959 = x4958 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4959);
          reg = x4959;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4960 = Fp(x4864.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4961 = x4960 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4961);
          reg = x4961;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4962 = Fp(x4863.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4963 = x4962 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4963);
          reg = x4963;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4964 = Fp(x4864.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4965 = x4964 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4965);
          reg = x4965;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4966 = Fp(x4863.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4967 = x4966 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4967);
          reg = x4967;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4968 = Fp(x4864.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4969 = x4968 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4969);
          reg = x4969;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4970 = Fp(x4863.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4971 = x4970 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4971);
          reg = x4971;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4972 = Fp(x4864.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4973 = x4972 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4973);
          reg = x4973;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4974 = Fp(x4863.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4975 = x4974 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4975);
          reg = x4975;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4976 = Fp(x4864.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4977 = x4976 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4977);
          reg = x4977;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4978 = Fp(x4863.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4979 = x4978 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4979);
          reg = x4979;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4980 = Fp(x4864.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4981 = x4980 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4981);
          reg = x4981;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:37)
        auto x4982 = Fp(x4863.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":216:36)
        auto x4983 = x4982 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4983);
          reg = x4983;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:37)
        auto x4984 = Fp(x4864.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":217:36)
        auto x4985 = x4984 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4985);
          reg = x4985;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4986 = arg2[117 * steps + ((cycle - 0) & mask)];
      assert(x4986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4987 = arg2[118 * steps + ((cycle - 0) & mask)];
      assert(x4987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4988 = arg2[119 * steps + ((cycle - 0) & mask)];
      assert(x4988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4989 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x4989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4990 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x4990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4991 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x4991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4992 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x4992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4993 = arg2[124 * steps + ((cycle - 0) & mask)];
      assert(x4993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4994 = arg2[125 * steps + ((cycle - 0) & mask)];
      assert(x4994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4995 = arg2[126 * steps + ((cycle - 0) & mask)];
      assert(x4995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4996 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x4996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4997 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x4997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4998 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x4998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4999 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x4999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5000 = arg2[131 * steps + ((cycle - 0) & mask)];
      assert(x5000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5001 = arg2[132 * steps + ((cycle - 0) & mask)];
      assert(x5001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5002 = arg2[133 * steps + ((cycle - 0) & mask)];
      assert(x5002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5003 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x5003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5004 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x5004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5005 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x5005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5006 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x5006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5007 = arg2[138 * steps + ((cycle - 0) & mask)];
      assert(x5007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5008 = arg2[139 * steps + ((cycle - 0) & mask)];
      assert(x5008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5009 = arg2[140 * steps + ((cycle - 0) & mask)];
      assert(x5009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5010 = arg2[141 * steps + ((cycle - 0) & mask)];
      assert(x5010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5011 = arg2[142 * steps + ((cycle - 0) & mask)];
      assert(x5011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5012 = arg2[143 * steps + ((cycle - 0) & mask)];
      assert(x5012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5013 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5014 = arg2[145 * steps + ((cycle - 0) & mask)];
      assert(x5014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5015 = arg2[146 * steps + ((cycle - 0) & mask)];
      assert(x5015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5016 = arg2[147 * steps + ((cycle - 0) & mask)];
      assert(x5016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5017 = arg2[148 * steps + ((cycle - 0) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5018 = arg2[149 * steps + ((cycle - 0) & mask)];
      assert(x5018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5019 = arg2[150 * steps + ((cycle - 0) & mask)];
      assert(x5019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5020 = arg2[151 * steps + ((cycle - 0) & mask)];
      assert(x5020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5021 = arg2[152 * steps + ((cycle - 0) & mask)];
      assert(x5021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5022 = arg2[153 * steps + ((cycle - 0) & mask)];
      assert(x5022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5023 = arg2[154 * steps + ((cycle - 0) & mask)];
      assert(x5023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5024 = arg2[155 * steps + ((cycle - 0) & mask)];
      assert(x5024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5025 = arg2[156 * steps + ((cycle - 0) & mask)];
      assert(x5025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5026 = arg2[157 * steps + ((cycle - 0) & mask)];
      assert(x5026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5027 = arg2[158 * steps + ((cycle - 0) & mask)];
      assert(x5027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5028 = arg2[159 * steps + ((cycle - 0) & mask)];
      assert(x5028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5029 = arg2[160 * steps + ((cycle - 0) & mask)];
      assert(x5029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5030 = arg2[161 * steps + ((cycle - 0) & mask)];
      assert(x5030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5031 = arg2[162 * steps + ((cycle - 0) & mask)];
      assert(x5031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5032 = arg2[163 * steps + ((cycle - 0) & mask)];
      assert(x5032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5033 = arg2[164 * steps + ((cycle - 0) & mask)];
      assert(x5033 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5034 = arg2[165 * steps + ((cycle - 0) & mask)];
      assert(x5034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5035 = arg2[166 * steps + ((cycle - 0) & mask)];
      assert(x5035 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5036 = arg2[167 * steps + ((cycle - 0) & mask)];
      assert(x5036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5037 = arg2[168 * steps + ((cycle - 0) & mask)];
      assert(x5037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5038 = arg2[169 * steps + ((cycle - 0) & mask)];
      assert(x5038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5039 = arg2[170 * steps + ((cycle - 0) & mask)];
      assert(x5039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5040 = arg2[171 * steps + ((cycle - 0) & mask)];
      assert(x5040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5041 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x5041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5042 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x5042 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5043 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x5043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5044 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x5044 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5045 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x5045 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5046 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x5046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5047 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x5047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5048 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x5048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_and(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5049 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x5049 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5050 = x4986 * x5018;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5051 = x4987 * x5019;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5052 = x4988 * x5020;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5053 = x4989 * x5021;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5054 = x4990 * x5022;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5055 = x4991 * x5023;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5056 = x4992 * x5024;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5057 = x4993 * x5025;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5058 = x4994 * x5026;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5059 = x4995 * x5027;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5060 = x4996 * x5028;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5061 = x4997 * x5029;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5062 = x4998 * x5030;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5063 = x4999 * x5031;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5064 = x5000 * x5032;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5065 = x5001 * x5033;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5066 = x5002 * x5034;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5067 = x5003 * x5035;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5068 = x5004 * x5036;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5069 = x5005 * x5037;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5070 = x5006 * x5038;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5071 = x5007 * x5039;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5072 = x5008 * x5040;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5073 = x5009 * x5041;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5074 = x5010 * x5042;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5075 = x5011 * x5043;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5076 = x5012 * x5044;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5077 = x5013 * x5045;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5078 = x5014 * x5046;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5079 = x5015 * x5047;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5080 = x5016 * x5048;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5081 = x5017 * x5049;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5082 = x4987 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5083 = x4988 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5084 = x4989 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5085 = x4990 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5086 = x4991 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5087 = x4992 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5088 = x4993 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5089 = x4995 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5090 = x4996 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5091 = x4997 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5092 = x4998 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5093 = x4999 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5094 = x5000 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5095 = x5001 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5096 = x5003 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5097 = x5004 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5098 = x5005 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5099 = x5006 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5100 = x5007 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5101 = x5008 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5102 = x5009 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5103 = x5011 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5104 = x5012 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5105 = x5013 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5106 = x5014 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5107 = x5015 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5108 = x5016 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:41)
      auto x5109 = x5017 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5110 = x5019 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5111 = x5020 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5112 = x5021 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5113 = x5022 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5114 = x5023 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5115 = x5024 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5116 = x5025 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5117 = x5027 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5118 = x5028 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5119 = x5029 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5120 = x5030 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5121 = x5031 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5122 = x5032 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5123 = x5033 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5124 = x5035 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5125 = x5036 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5126 = x5037 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5127 = x5038 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5128 = x5039 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5129 = x5040 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5130 = x5041 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5131 = x5043 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5132 = x5044 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5133 = x5045 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5134 = x5046 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5135 = x5047 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5136 = x5048 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:41)
      auto x5137 = x5049 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5138 = x5051 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5139 = x5052 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5140 = x5053 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5141 = x5054 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5142 = x5055 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5143 = x5056 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5144 = x5057 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5145 = x5059 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5146 = x5060 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5147 = x5061 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5148 = x5062 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5149 = x5063 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5150 = x5064 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5151 = x5065 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5152 = x5067 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5153 = x5068 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5154 = x5069 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5155 = x5070 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5156 = x5071 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5157 = x5072 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5158 = x5073 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5159 = x5075 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5160 = x5076 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5161 = x5077 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5162 = x5078 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5163 = x5079 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5164 = x5080 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:41)
      auto x5165 = x5081 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5166 = x4986 + x5082;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5167 = x4994 + x5089;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5168 = x5002 + x5096;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5169 = x5010 + x5103;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5170 = x5018 + x5110;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5171 = x5026 + x5117;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5172 = x5034 + x5124;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5173 = x5042 + x5131;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5174 = x5050 + x5138;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5175 = x5058 + x5145;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5176 = x5066 + x5152;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5177 = x5074 + x5159;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5178 = x5166 + x5083;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5179 = x5167 + x5090;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5180 = x5168 + x5097;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5181 = x5169 + x5104;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5182 = x5170 + x5111;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5183 = x5171 + x5118;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5184 = x5172 + x5125;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5185 = x5173 + x5132;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5186 = x5174 + x5139;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5187 = x5175 + x5146;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5188 = x5176 + x5153;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5189 = x5177 + x5160;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5190 = x5178 + x5084;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5191 = x5179 + x5091;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5192 = x5180 + x5098;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5193 = x5181 + x5105;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5194 = x5182 + x5112;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5195 = x5183 + x5119;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5196 = x5184 + x5126;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5197 = x5185 + x5133;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5198 = x5186 + x5140;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5199 = x5187 + x5147;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5200 = x5188 + x5154;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5201 = x5189 + x5161;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5202 = x5190 + x5085;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5203 = x5191 + x5092;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5204 = x5192 + x5099;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5205 = x5193 + x5106;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5206 = x5194 + x5113;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5207 = x5195 + x5120;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5208 = x5196 + x5127;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5209 = x5197 + x5134;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5210 = x5198 + x5141;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5211 = x5199 + x5148;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5212 = x5200 + x5155;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5213 = x5201 + x5162;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5214 = x5202 + x5086;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5215 = x5203 + x5093;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5216 = x5204 + x5100;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5217 = x5205 + x5107;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5218 = x5206 + x5114;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5219 = x5207 + x5121;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5220 = x5208 + x5128;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5221 = x5209 + x5135;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5222 = x5210 + x5142;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5223 = x5211 + x5149;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5224 = x5212 + x5156;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5225 = x5213 + x5163;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5226 = x5214 + x5087;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5227 = x5215 + x5094;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5228 = x5216 + x5101;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5229 = x5217 + x5108;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5230 = x5218 + x5115;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5231 = x5219 + x5122;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5232 = x5220 + x5129;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5233 = x5221 + x5136;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5234 = x5222 + x5143;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5235 = x5223 + x5150;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5236 = x5224 + x5157;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5237 = x5225 + x5164;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5238 = x5226 + x5088;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5239 = x5230 + x5116;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5240 = x5234 + x5144;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5241 = x5227 + x5095;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5242 = x5231 + x5123;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5243 = x5235 + x5151;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5244 = x5228 + x5102;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5245 = x5232 + x5130;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5246 = x5236 + x5158;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":228:24)
      auto x5247 = x5229 + x5109;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":229:24)
      auto x5248 = x5233 + x5137;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":230:24)
      auto x5249 = x5237 + x5165;
      extern_args[0] = x4854;
      extern_args[1] = x4857;
      extern_args[2] = x4860;
      extern_args[3] = x4863;
      extern_args[4] = x5238;
      extern_args[5] = x5241;
      extern_args[6] = x5244;
      extern_args[7] = x5247;
      extern_log(ctx, cycle, "  a = %w, ax = %w", extern_args, extern_outs);
      extern_args[0] = x4855;
      extern_args[1] = x4858;
      extern_args[2] = x4861;
      extern_args[3] = x4864;
      extern_args[4] = x5239;
      extern_args[5] = x5242;
      extern_args[6] = x5245;
      extern_args[7] = x5248;
      extern_log(ctx, cycle, "  b = %w, bx = %w", extern_args, extern_outs);
      extern_args[0] = x4856;
      extern_args[1] = x4859;
      extern_args[2] = x4862;
      extern_args[3] = x4865;
      extern_args[4] = x5240;
      extern_args[5] = x5243;
      extern_args[6] = x5246;
      extern_args[7] = x5249;
      extern_log(ctx, cycle, "  c = %w, cx = %w", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      auto x5250 = x4854 - x5238;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      assert(x5250 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:236");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      auto x5251 = x4857 - x5241;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      assert(x5251 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:236");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      auto x5252 = x4860 - x5244;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      assert(x5252 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:236");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      auto x5253 = x4863 - x5247;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":236:3)
      assert(x5253 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:236");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      auto x5254 = x4855 - x5239;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      assert(x5254 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:237");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      auto x5255 = x4858 - x5242;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      assert(x5255 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:237");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      auto x5256 = x4861 - x5245;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      assert(x5256 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:237");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      auto x5257 = x4864 - x5248;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":237:3)
      assert(x5257 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:237");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      auto x5258 = x4856 - x5240;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      assert(x5258 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:238");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      auto x5259 = x4859 - x5243;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      assert(x5259 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:238");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      auto x5260 = x4862 - x5246;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      assert(x5260 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:238");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      auto x5261 = x4865 - x5249;
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":238:3)
      assert(x5261 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/compute.cpp:238");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x5262 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5263 = Fp(x5262.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5263);
          reg = x5263;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5264 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x5264 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5265 = x5262 - x5264;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5266 = x5265 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5267 = Fp(x5266.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5267);
          reg = x5267;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5268 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x5268 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5269 = x5266 - x5268;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5270 = x5269 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5271 = Fp(x5270.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5271);
          reg = x5271;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5272 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x5272 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5273 = x5270 - x5272;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5274 = x5273 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x5275 = Fp(x5274.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5275);
          reg = x5275;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5276 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x5276 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x5277 = x5274 - x5276;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x5278 = x5277 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5278);
        reg = x5278;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5279 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x5279 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x5280 = x99 - x5279;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x5281 = x5279 * x5280;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5281);
        reg = x5281;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x5282 = x96 - x5279;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x5283 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x5283 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x5284 = x5283 * x5282;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x5284 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/compute.cpp":241:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x65);
        reg = x65;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5285 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x5285 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x5286 = x5285 * x5279;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x5287 = x5286 * x5280;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x5287 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[7](Reg)"("./zirgen/components/mux.h":49:25))
    auto x5288 = arg2[108 * steps + ((cycle - 0) & mask)];
    assert(x5288 != Fp::invalid());
    if (x5288 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5289 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x5289 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5289);
        reg = x5289;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/divide.cpp":132:37))
      auto x5290 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x5290 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":132:37)
      auto x5291 = x5290 - x68;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":132:37)
      assert(x5291 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:132");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5292 = arg2[200 * steps + ((cycle - 1) & mask)];
      assert(x5292 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5293 = arg2[18 * steps + ((cycle - 1) & mask)];
      assert(x5293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5294 = arg2[22 * steps + ((cycle - 1) & mask)];
      assert(x5294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5295 = arg2[26 * steps + ((cycle - 1) & mask)];
      assert(x5295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5296 = arg2[127 * steps + ((cycle - 1) & mask)];
      assert(x5296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5297 = arg2[19 * steps + ((cycle - 1) & mask)];
      assert(x5297 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5298 = arg2[23 * steps + ((cycle - 1) & mask)];
      assert(x5298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5299 = arg2[27 * steps + ((cycle - 1) & mask)];
      assert(x5299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5300 = arg2[128 * steps + ((cycle - 1) & mask)];
      assert(x5300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5301 = arg2[20 * steps + ((cycle - 1) & mask)];
      assert(x5301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5302 = arg2[24 * steps + ((cycle - 1) & mask)];
      assert(x5302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5303 = arg2[28 * steps + ((cycle - 1) & mask)];
      assert(x5303 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5304 = arg2[129 * steps + ((cycle - 1) & mask)];
      assert(x5304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5305 = arg2[201 * steps + ((cycle - 1) & mask)];
      assert(x5305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5306 = arg2[21 * steps + ((cycle - 1) & mask)];
      assert(x5306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5307 = arg2[25 * steps + ((cycle - 1) & mask)];
      assert(x5307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5308 = arg2[29 * steps + ((cycle - 1) & mask)];
      assert(x5308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5309 = arg2[130 * steps + ((cycle - 1) & mask)];
      assert(x5309 != Fp::invalid());
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x5310 = Fp(x5309.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x5311 = x5310 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5311);
          reg = x5311;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x5312 = Fp(x5309.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x5313 = x5312 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5313);
          reg = x5313;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5314 = arg2[117 * steps + ((cycle - 0) & mask)];
      assert(x5314 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5315 = arg2[9 * steps + ((cycle - 0) & mask)];
      assert(x5315 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x5316 = x5314 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x5317 = x5315 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x5318 = x5316 + x5317;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x5319 = x5309 - x5318;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x5319 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      {
        // loc("zirgen/components/u32.cpp":126:18)
        auto x5320 = Fp(x5306.asUInt32() & x64.asUInt32());
        // loc("zirgen/components/u32.cpp":126:17)
        auto x5321 = x5320 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5321);
          reg = x5321;
        }
        // loc("zirgen/components/u32.cpp":127:25)
        auto x5322 = Fp(x5306.asUInt32() & x53.asUInt32());
        // loc("zirgen/components/u32.cpp":127:24)
        auto x5323 = x5322 * x96;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = arg2[10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5323);
          reg = x5323;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5324 = arg2[10 * steps + ((cycle - 0) & mask)];
      assert(x5324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5325 = arg2[118 * steps + ((cycle - 0) & mask)];
      assert(x5325 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":129:19)
      auto x5326 = x5325 * x64;
      // loc("zirgen/components/u32.cpp":129:34)
      auto x5327 = x5324 * x57;
      // loc("zirgen/components/u32.cpp":129:19)
      auto x5328 = x5326 + x5327;
      // loc("zirgen/components/u32.cpp":129:6)
      auto x5329 = x5306 - x5328;
      // loc("zirgen/components/u32.cpp":129:6)
      assert(x5329 == 0 && "eqz failed at: zirgen/components/u32.cpp:129");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":146:17)
      auto x5330 = x5292 * x5314;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":146:3)
      {
        auto& reg = arg2[119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5330);
        reg = x5330;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":147:29)
      auto x5331 = x99 - x5305;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":147:17)
      auto x5332 = x5292 * x5331;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":147:17)
      auto x5333 = x5332 * x5325;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":147:3)
      {
        auto& reg = arg2[120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5333);
        reg = x5333;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5334 = arg2[119 * steps + ((cycle - 0) & mask)];
      assert(x5334 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5335 = x5334 * x5296;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5336 = x5334 * x5300;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5337 = x5334 * x5304;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":150:17)
      auto x5338 = x5334 * x5305;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5339 = x5334 * x5309;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":149:47)
      auto x5340 = x99 - x5334;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5341 = x5340 * x5296;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5342 = x5340 * x5300;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5343 = x5340 * x5304;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5344 = x5340 * x5309;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5345 = x5341 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5346 = x5342 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5347 = x5343 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5348 = x5344 + x95;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5349 = x5345 - x5335;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5350 = x5346 - x5336;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5351 = x5348 - x5339;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5352 = x5349 - x5338;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5353 = x5347 - x5337;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x5354 = x5350 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x5355 = x5352 + x5354;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5356 = Fp(x5355.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5356);
          reg = x5356;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5357 = arg2[11 * steps + ((cycle - 0) & mask)];
      assert(x5357 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5358 = x5355 - x5357;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5359 = x5358 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5360 = Fp(x5359.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5360);
          reg = x5360;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5361 = arg2[12 * steps + ((cycle - 0) & mask)];
      assert(x5361 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5362 = x5359 - x5361;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5363 = x5362 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5363);
        reg = x5363;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x5364 = x5351 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5365 = arg2[72 * steps + ((cycle - 0) & mask)];
      assert(x5365 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5366 = x5365 + x5353;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5367 = x5366 + x5364;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5368 = Fp(x5367.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5368);
          reg = x5368;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5369 = arg2[13 * steps + ((cycle - 0) & mask)];
      assert(x5369 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5370 = x5367 - x5369;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5371 = x5370 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5372 = Fp(x5371.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5372);
          reg = x5372;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5373 = arg2[14 * steps + ((cycle - 0) & mask)];
      assert(x5373 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5374 = x5371 - x5373;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5375 = x5374 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5375);
        reg = x5375;
      }
      extern_args[0] = x5296;
      extern_args[1] = x5300;
      extern_args[2] = x5304;
      extern_args[3] = x5309;
      extern_args[4] = x5357;
      extern_args[5] = x5361;
      extern_args[6] = x5369;
      extern_args[7] = x5373;
      extern_log(ctx, cycle, "  numer = %w, numerAbs = %w", extern_args, extern_outs);
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5376 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x5376 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5377 = x5376 * x5293;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5378 = x5376 * x5297;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5379 = x5376 * x5301;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":153:17)
      auto x5380 = x5376 * x5305;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5381 = x5376 * x5306;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":152:47)
      auto x5382 = x99 - x5376;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5383 = x5382 * x5293;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5384 = x5382 * x5297;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5385 = x5382 * x5301;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5386 = x5382 * x5306;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5387 = x5383 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5388 = x5384 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5389 = x5385 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5390 = x5386 + x95;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5391 = x5387 - x5377;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5392 = x5388 - x5378;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5393 = x5390 - x5381;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5394 = x5391 - x5380;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5395 = x5389 - x5379;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x5396 = x5392 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x5397 = x5394 + x5396;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5398 = Fp(x5397.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5398);
          reg = x5398;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5399 = arg2[15 * steps + ((cycle - 0) & mask)];
      assert(x5399 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5400 = x5397 - x5399;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5401 = x5400 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5402 = Fp(x5401.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5402);
          reg = x5402;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5403 = arg2[16 * steps + ((cycle - 0) & mask)];
      assert(x5403 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5404 = x5401 - x5403;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5405 = x5404 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5405);
        reg = x5405;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x5406 = x5393 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5407 = arg2[74 * steps + ((cycle - 0) & mask)];
      assert(x5407 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5408 = x5407 + x5395;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5409 = x5408 + x5406;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5410 = Fp(x5409.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5410);
          reg = x5410;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5411 = arg2[17 * steps + ((cycle - 0) & mask)];
      assert(x5411 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5412 = x5409 - x5411;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5413 = x5412 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5414 = Fp(x5413.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5414);
          reg = x5414;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5415 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x5415 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5416 = x5413 - x5415;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5417 = x5416 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5417);
        reg = x5417;
      }
      extern_args[0] = x5293;
      extern_args[1] = x5297;
      extern_args[2] = x5301;
      extern_args[3] = x5306;
      extern_args[4] = x5399;
      extern_args[5] = x5403;
      extern_args[6] = x5411;
      extern_args[7] = x5415;
      extern_log(ctx, cycle, "  demom = %w, denomAbs = %w", extern_args, extern_outs);
      // loc("zirgen/components/u32.cpp":143:26)
      auto x5418 = x5403 * x93;
      // loc("zirgen/components/u32.cpp":143:12)
      auto x5419 = x5399 + x5418;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x5420 = (x5419 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5420);
          reg = x5420;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x5421 = inv(x5419);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5421);
          reg = x5421;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5422 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x5422 != Fp::invalid());
      if (x5422 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x5419 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x5423 = x99 - x5422;
      if (x5423 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5424 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x5424 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5425 = x5419 * x5424;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5426 = x5425 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x5426 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":144:27)
      auto x5427 = x5415 * x93;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x5428 = x5411 + x5427;
      // loc("zirgen/components/u32.cpp":144:47)
      auto x5429 = x5423 * x80;
      // loc("zirgen/components/u32.cpp":144:13)
      auto x5430 = x5428 + x5429;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x5431 = (x5430 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5431);
          reg = x5431;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x5432 = inv(x5430);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5432);
          reg = x5432;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5433 = arg2[124 * steps + ((cycle - 0) & mask)];
      assert(x5433 != Fp::invalid());
      if (x5433 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x5430 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x5434 = x99 - x5433;
      if (x5434 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5435 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x5435 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5436 = x5430 * x5435;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5437 = x5436 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x5437 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:38)
      auto x5438 = x5334 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:64)
      auto x5439 = x5433 * x5334;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:38)
      auto x5440 = x5438 * x5376;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:16)
      auto x5441 = x5334 + x5376;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:16)
      auto x5442 = x5441 - x5440;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:16)
      auto x5443 = x5442 - x5439;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":156:3)
      {
        auto& reg = arg2[121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5443);
        reg = x5443;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5444 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x5444 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5445 = x5444 * x5294;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5446 = x5444 * x5298;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5447 = x5444 * x5302;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":159:16)
      auto x5448 = x5444 * x5305;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5449 = x5444 * x5307;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":158:46)
      auto x5450 = x99 - x5444;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5451 = x5450 * x5294;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5452 = x5450 * x5298;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5453 = x5450 * x5302;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5454 = x5450 * x5307;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5455 = x5451 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5456 = x5452 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5457 = x5453 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5458 = x5454 + x95;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5459 = x5455 - x5445;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5460 = x5456 - x5446;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5461 = x5458 - x5449;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5462 = x5459 - x5448;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5463 = x5457 - x5447;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x5464 = x5460 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x5465 = x5462 + x5464;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5466 = Fp(x5465.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5466);
          reg = x5466;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5467 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x5467 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5468 = x5465 - x5467;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5469 = x5468 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5470 = Fp(x5469.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5470);
          reg = x5470;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5471 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x5471 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5472 = x5469 - x5471;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5473 = x5472 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5473);
        reg = x5473;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x5474 = x5461 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5475 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x5475 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5476 = x5475 + x5463;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5477 = x5476 + x5474;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5478 = Fp(x5477.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5478);
          reg = x5478;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5479 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x5479 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5480 = x5477 - x5479;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5481 = x5480 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5482 = Fp(x5481.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5482);
          reg = x5482;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5483 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x5483 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5484 = x5481 - x5483;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5485 = x5484 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5485);
        reg = x5485;
      }
      extern_args[0] = x5294;
      extern_args[1] = x5298;
      extern_args[2] = x5302;
      extern_args[3] = x5307;
      extern_args[4] = x5467;
      extern_args[5] = x5471;
      extern_args[6] = x5479;
      extern_args[7] = x5483;
      extern_log(ctx, cycle, "  quot = %w, quotAbs = %w", extern_args, extern_outs);
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5486 = x5334 * x5295;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5487 = x5334 * x5299;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5488 = x5334 * x5303;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5489 = x5334 * x5308;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5490 = x5340 * x5295;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5491 = x5340 * x5299;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5492 = x5340 * x5303;
      // loc("zirgen/components/u32.cpp":111:20)
      auto x5493 = x5340 * x5308;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5494 = x5490 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5495 = x5491 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5496 = x5492 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5497 = x5493 + x95;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5498 = x5494 - x5486;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5499 = x5495 - x5487;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5500 = x5497 - x5489;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5501 = x5498 - x5338;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5502 = x5496 - x5488;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x5503 = x5499 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x5504 = x5501 + x5503;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5505 = Fp(x5504.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5506 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x5506 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5507 = x5504 - x5506;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5508 = x5507 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5509 = Fp(x5508.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5509);
          reg = x5509;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5510 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x5510 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5511 = x5508 - x5510;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5512 = x5511 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5512);
        reg = x5512;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x5513 = x5500 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5514 = arg2[78 * steps + ((cycle - 0) & mask)];
      assert(x5514 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5515 = x5514 + x5502;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5516 = x5515 + x5513;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5517 = Fp(x5516.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5517);
          reg = x5517;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5518 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x5518 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5519 = x5516 - x5518;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5520 = x5519 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5521 = Fp(x5520.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5521);
          reg = x5521;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5522 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x5522 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5523 = x5520 - x5522;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5524 = x5523 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5524);
        reg = x5524;
      }
      extern_args[0] = x5295;
      extern_args[1] = x5299;
      extern_args[2] = x5303;
      extern_args[3] = x5308;
      extern_args[4] = x5506;
      extern_args[5] = x5510;
      extern_args[6] = x5518;
      extern_args[7] = x5522;
      extern_log(ctx, cycle, "  rem = %w, remAbs = %w", extern_args, extern_outs);
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5525 = x5399 + x93;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5526 = x5403 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5527 = x5411 + x95;
      // loc("zirgen/components/u32.cpp":95:20)
      auto x5528 = x5415 + x95;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5529 = x5525 - x99;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5530 = x5526 - x5510;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5531 = x5528 - x5522;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5532 = x5529 - x5506;
      // loc("zirgen/components/u32.cpp":103:20)
      auto x5533 = x5527 - x5518;
      // loc("zirgen/components/u32.cpp":152:29)
      auto x5534 = x5530 * x93;
      // loc("zirgen/components/u32.cpp":152:15)
      auto x5535 = x5532 + x5534;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5536 = Fp(x5535.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5536);
          reg = x5536;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5537 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x5537 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5538 = x5535 - x5537;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5539 = x5538 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5540 = Fp(x5539.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5540);
          reg = x5540;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5541 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x5541 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5542 = x5539 - x5541;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5543 = x5542 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5543);
        reg = x5543;
      }
      // loc("zirgen/components/u32.cpp":154:41)
      auto x5544 = x5531 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5545 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x5545 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5546 = x5545 + x5533;
      // loc("zirgen/components/u32.cpp":154:16)
      auto x5547 = x5546 + x5544;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5548 = Fp(x5547.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5548);
          reg = x5548;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5549 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x5549 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5550 = x5547 - x5549;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5551 = x5550 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5552 = Fp(x5551.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5552);
          reg = x5552;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5553 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x5553 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5554 = x5551 - x5553;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5555 = x5554 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5555);
        reg = x5555;
      }
      // loc("zirgen/components/u32.cpp":266:14)
      auto x5556 = x5467 * x5399;
      // loc("zirgen/components/u32.cpp":267:21)
      auto x5557 = x5467 * x5403;
      // loc("zirgen/components/u32.cpp":267:51)
      auto x5558 = x5471 * x5399;
      // loc("zirgen/components/u32.cpp":266:14)
      auto x5559 = x5556 + x5506;
      // loc("zirgen/components/u32.cpp":267:21)
      auto x5560 = x5557 + x5558;
      // loc("zirgen/components/u32.cpp":267:21)
      auto x5561 = x5560 + x5510;
      // loc("zirgen/components/u32.cpp":267:14)
      auto x5562 = x5561 * x93;
      // loc("zirgen/components/u32.cpp":266:14)
      auto x5563 = x5559 + x5562;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5564 = Fp(x5563.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5564);
          reg = x5564;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5565 = arg2[31 * steps + ((cycle - 0) & mask)];
      assert(x5565 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5566 = x5563 - x5565;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5567 = x5566 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5568 = Fp(x5567.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5568);
          reg = x5568;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5569 = arg2[32 * steps + ((cycle - 0) & mask)];
      assert(x5569 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5570 = x5567 - x5569;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5571 = x5570 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5572 = Fp(x5571.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5573 = arg2[35 * steps + ((cycle - 0) & mask)];
      assert(x5573 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5574 = x5571 - x5573;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5575 = x5574 * x94;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5575);
        reg = x5575;
      }
      // loc("zirgen/components/u32.cpp":272:7)
      auto x5576 = x5471 * x5415;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32MulAcc/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5577 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x5577 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":270:15)
      auto x5578 = x5577 * x93;
      // loc("zirgen/components/u32.cpp":270:15)
      auto x5579 = x5578 + x5573;
      // loc("zirgen/components/u32.cpp":272:7)
      assert(x5576 == 0 && "eqz failed at: zirgen/components/u32.cpp:272");
      // loc("zirgen/components/u32.cpp":273:7)
      auto x5580 = x5479 * x5411;
      // loc("zirgen/components/u32.cpp":273:7)
      assert(x5580 == 0 && "eqz failed at: zirgen/components/u32.cpp:273");
      // loc("zirgen/components/u32.cpp":274:7)
      auto x5581 = x5483 * x5403;
      // loc("zirgen/components/u32.cpp":274:7)
      assert(x5581 == 0 && "eqz failed at: zirgen/components/u32.cpp:274");
      // loc("zirgen/components/u32.cpp":275:7)
      auto x5582 = x5479 * x5415;
      // loc("zirgen/components/u32.cpp":275:7)
      assert(x5582 == 0 && "eqz failed at: zirgen/components/u32.cpp:275");
      // loc("zirgen/components/u32.cpp":276:7)
      auto x5583 = x5483 * x5411;
      // loc("zirgen/components/u32.cpp":276:7)
      assert(x5583 == 0 && "eqz failed at: zirgen/components/u32.cpp:276");
      // loc("zirgen/components/u32.cpp":277:7)
      auto x5584 = x5483 * x5415;
      // loc("zirgen/components/u32.cpp":277:7)
      assert(x5584 == 0 && "eqz failed at: zirgen/components/u32.cpp:277");
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5585 = x5479 * x5399;
      // loc("zirgen/components/u32.cpp":281:22)
      auto x5586 = x5483 * x5399;
      // loc("zirgen/components/u32.cpp":280:15)
      auto x5587 = x5467 * x5411;
      // loc("zirgen/components/u32.cpp":282:52)
      auto x5588 = x5467 * x5415;
      // loc("zirgen/components/u32.cpp":279:45)
      auto x5589 = x5471 * x5403;
      // loc("zirgen/components/u32.cpp":282:22)
      auto x5590 = x5471 * x5411;
      // loc("zirgen/components/u32.cpp":281:52)
      auto x5591 = x5479 * x5403;
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5592 = x5585 + x5589;
      // loc("zirgen/components/u32.cpp":281:22)
      auto x5593 = x5586 + x5591;
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5594 = x5592 + x5587;
      // loc("zirgen/components/u32.cpp":281:22)
      auto x5595 = x5593 + x5590;
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5596 = x5594 + x5518;
      // loc("zirgen/components/u32.cpp":281:22)
      auto x5597 = x5595 + x5588;
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5598 = x5596 + x5579;
      // loc("zirgen/components/u32.cpp":281:22)
      auto x5599 = x5597 + x5522;
      // loc("zirgen/components/u32.cpp":281:15)
      auto x5600 = x5599 * x93;
      // loc("zirgen/components/u32.cpp":279:15)
      auto x5601 = x5598 + x5600;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5602 = Fp(x5601.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5602);
          reg = x5602;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5603 = arg2[33 * steps + ((cycle - 0) & mask)];
      assert(x5603 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5604 = x5601 - x5603;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5605 = x5604 * x94;
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5605);
        reg = x5605;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5606 = arg2[34 * steps + ((cycle - 0) & mask)];
      assert(x5606 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/verify_divide(VerifyDivideCycle)/U32Normalize/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5607 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x5607 != Fp::invalid());
      extern_args[0] = x5565;
      extern_args[1] = x5569;
      extern_args[2] = x5603;
      extern_args[3] = x5606;
      extern_args[4] = x5607;
      extern_log(ctx, cycle, "  mul->getOut() = %w, denomRemCheck->carry = %u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      auto x5608 = x5565 - x5357;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      assert(x5608 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:168");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      auto x5609 = x5569 - x5361;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      assert(x5609 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:168");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      auto x5610 = x5603 - x5369;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      assert(x5610 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:168");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      auto x5611 = x5606 - x5373;
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":168:3)
      assert(x5611 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:168");
      if (x5434 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":169:36)
        auto x5612 = x5607 - x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":169:36)
        assert(x5612 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:169");
      }
      if (x5433 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        auto x5613 = x5295 - x5296;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        assert(x5613 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:171");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        auto x5614 = x5299 - x5300;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        assert(x5614 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:171");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        auto x5615 = x5303 - x5304;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        assert(x5615 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:171");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        auto x5616 = x5308 - x5309;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":171:5)
        assert(x5616 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:171");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        auto x5617 = x5294 - x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        assert(x5617 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:172");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        auto x5618 = x5298 - x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        assert(x5618 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:172");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        auto x5619 = x5302 - x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        assert(x5619 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:172");
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        auto x5620 = x5307 - x95;
        // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":172:5)
        assert(x5620 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/divide.cpp:172");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x5621 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5622 = Fp(x5621.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5622);
          reg = x5622;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5623 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x5623 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5624 = x5621 - x5623;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5625 = x5624 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5626 = Fp(x5625.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5626);
          reg = x5626;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5627 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x5627 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5628 = x5625 - x5627;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5629 = x5628 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5630 = Fp(x5629.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5630);
          reg = x5630;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5631 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x5631 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5632 = x5629 - x5631;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5633 = x5632 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x5634 = Fp(x5633.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5634);
          reg = x5634;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5635 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x5635 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x5636 = x5633 - x5635;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x5637 = x5636 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5637);
        reg = x5637;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5638 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x5638 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x5639 = x99 - x5638;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x5640 = x5638 * x5639;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5640);
        reg = x5640;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x5641 = x96 - x5638;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x5642 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x5642 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x5643 = x5642 * x5641;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x5643 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/divide.cpp":175:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x65);
        reg = x65;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5644 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x5644 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x5645 = x5644 * x5638;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x5646 = x5645 * x5639;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x5646 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("./zirgen/components/mux.h":49:25))
    auto x5647 = arg2[109 * steps + ((cycle - 0) & mask)];
    assert(x5647 != Fp::invalid());
    if (x5647 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5648 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x5648 != Fp::invalid());
      {
        extern_isTrap(ctx, cycle, "", extern_args, extern_outs);
        auto x5649 = extern_outs[0];
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5649);
          reg = x5649;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":180:8)
      auto x5650 = x99 - x5648;
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5651 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x5651 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":180:7)
      auto x5652 = x5650 * x5651;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":180:7)
      assert(x5652 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:180");
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:37))
      auto x5653 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x5653 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:37)
      auto x5654 = x5653 - x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":182:37)
      assert(x5654 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:182");
      if (x5651 != 0) {
        {
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5655 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x5655 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5656 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x5656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5657 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x5657 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5658 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5659 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5660 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5661 = x5656 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5662 = x5657 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5663 = x5658 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5664 = x5659 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5665 = x5660 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5666 = x5655 + x5661;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5667 = x5666 + x5662;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5668 = x5667 + x5663;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5669 = x5668 + x5664;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5670 = x5669 + x5665;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x5671 = x5670 - x69;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x5671 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":187:16)
      auto x5672 = x99 - x5651;
      if (x5672 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":189:43)
        auto x5673 = x975 * x78;
        {
          extern_args[0] = x5673;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5674 = extern_outs[0];
          auto x5675 = extern_outs[1];
          auto x5676 = extern_outs[2];
          auto x5677 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5674);
            reg = x5674;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5675);
            reg = x5675;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5676);
            reg = x5676;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5677);
            reg = x5677;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5678 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x5678 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5679 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x5679 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5680 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x5680 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5681 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x5681 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5673);
          reg = x5673;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5678);
          reg = x5678;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5679);
          reg = x5679;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5680);
          reg = x5680;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5681);
          reg = x5681;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":191:8)
        auto x5682 = x5678 - x33;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":191:8)
        assert(x5682 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:191");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":192:9)
        assert(x5679 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:192");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":193:9)
        assert(x5680 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:193");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":194:9)
        assert(x5681 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:194");
        {
          extern_args[0] = x32;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5683 = extern_outs[0];
          auto x5684 = extern_outs[1];
          auto x5685 = extern_outs[2];
          auto x5686 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5683);
            reg = x5683;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5684);
            reg = x5684;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5685);
            reg = x5685;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5686);
            reg = x5686;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5687 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x5687 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5688 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5689 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x5689 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5690 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x5690 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5687);
          reg = x5687;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5688);
          reg = x5688;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5689);
          reg = x5689;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5690);
          reg = x5690;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":198:55)
        auto x5691 = x5648 * x69;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":198:18)
        auto x5692 = x5650 * x5687;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":198:18)
        auto x5693 = x5692 + x5691;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5694 = (x5693 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5694);
            reg = x5694;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5695 = x5693 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5696 = (x5695 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5696);
            reg = x5696;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5697 = x5693 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5698 = (x5697 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5698);
            reg = x5698;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5699 = x5693 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5700 = (x5699 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5700);
            reg = x5700;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5701 = x5693 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5702 = (x5701 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5702);
            reg = x5702;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5703 = x5693 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5704 = (x5703 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5704);
            reg = x5704;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5705 = x5693 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5706 = (x5705 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5706);
            reg = x5706;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5707 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x5707 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5708 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x5708 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5709 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x5709 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5710 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x5710 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5711 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x5711 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5712 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x5712 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5713 = x5708 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5714 = x5709 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5715 = x5710 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5716 = x5711 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5717 = x5712 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5718 = x5707 + x5713;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5719 = x5718 + x5714;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5720 = x5719 + x5715;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5721 = x5720 + x5716;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5722 = x5721 + x5717;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x5723 = x5722 - x5693;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x5723 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5724 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x5724 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5725 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x5725 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5726 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x5726 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5727 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x5727 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5728 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x5728 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5729 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x5729 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5730 = x5725 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5731 = x5726 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5732 = x5727 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5733 = x5728 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5734 = x5729 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5735 = x5724 + x5730;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5736 = x5735 + x5731;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5737 = x5736 + x5732;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5738 = x5737 + x5733;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5739 = x5738 + x5734;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":203:47)
        auto x5740 = (x5739 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":203:47)
        auto x5741 = x99 - x5740;
        if (x5741 != 0) {
          extern_args[0] = x5739;
          extern_log(ctx, cycle, "  ecall, selector = %u", extern_args, extern_outs);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[0](Reg)"("./zirgen/components/mux.h":49:25))
      auto x5742 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x5742 != Fp::invalid());
      if (x5742 != 0) {
        {
          extern_args[0] = x31;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5743 = extern_outs[0];
          auto x5744 = extern_outs[1];
          auto x5745 = extern_outs[2];
          auto x5746 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5743);
            reg = x5743;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5744);
            reg = x5744;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5745);
            reg = x5745;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5746);
            reg = x5746;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5747 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x5747 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5748 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x5748 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5749 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x5749 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5750 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x5750 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5747);
          reg = x5747;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5748);
          reg = x5748;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5750);
          reg = x5750;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x5751 = x5748 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5752 = x5749 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5753 = x5750 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5754 = x5747 + x5751;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5755 = x5754 + x5752;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5756 = x5755 + x5753;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":19:18)
        auto x5757 = x5756 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":19:3)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5757);
          reg = x5757;
        }
        {
          extern_args[0] = x30;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5758 = extern_outs[0];
          auto x5759 = extern_outs[1];
          auto x5760 = extern_outs[2];
          auto x5761 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5758);
            reg = x5758;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5759);
            reg = x5759;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5760);
            reg = x5760;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5761);
            reg = x5761;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5762 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x5762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5763 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x5763 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5764 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x5764 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5765 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x5765 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5762);
          reg = x5762;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5763);
          reg = x5763;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5765);
          reg = x5765;
        }
        extern_args[0] = x5762;
        extern_args[1] = x5763;
        extern_args[2] = x5764;
        extern_args[3] = x5765;
        extern_args[4] = x5747;
        extern_args[5] = x5748;
        extern_args[6] = x5749;
        extern_args[7] = x5750;
        extern_log(ctx, cycle, "ECallHalt> exitCode = %w, ramAddr = %w", extern_args, extern_outs);
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":25:17)
        auto x5766 = x975 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x5767 = x5766 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5768 = Fp(x5767.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5768);
            reg = x5768;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5769 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x5769 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5770 = x5767 - x5769;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5771 = x5770 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5772 = Fp(x5771.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5772);
            reg = x5772;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5773 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x5773 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5774 = x5771 - x5773;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5775 = x5774 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5776 = Fp(x5775.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5776);
            reg = x5776;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5777 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x5777 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5778 = x5775 - x5777;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5779 = x5778 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x5780 = Fp(x5779.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5780);
            reg = x5780;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5781 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x5781 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x5782 = x5779 - x5781;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x5783 = x5782 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5783);
          reg = x5783;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5784 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x5784 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x5785 = x99 - x5784;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x5786 = x5784 * x5785;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5786);
          reg = x5786;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x5787 = x96 - x5784;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5788 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x5788 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x5789 = x5788 * x5787;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x5789 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":27:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:25))
      auto x5790 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x5790 != Fp::invalid());
      if (x5790 != 0) {
        {
          extern_args[0] = x30;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5791 = extern_outs[0];
          auto x5792 = extern_outs[1];
          auto x5793 = extern_outs[2];
          auto x5794 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5791);
            reg = x5791;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5792);
            reg = x5792;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5793);
            reg = x5793;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5794);
            reg = x5794;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5795 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x5795 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5796 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x5796 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5797 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x5797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5798 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x5798 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5795);
          reg = x5795;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5796);
          reg = x5796;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5797);
          reg = x5797;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5798);
          reg = x5798;
        }
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5799 = (x5795 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5799);
            reg = x5799;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5800 = x5795 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5801 = (x5800 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5801);
            reg = x5801;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5802 = x5795 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5803 = (x5802 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5803);
            reg = x5803;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5804 = x5795 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5805 = (x5804 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5805);
            reg = x5805;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5806 = x5795 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5807 = (x5806 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5807);
            reg = x5807;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5808 = x5795 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5809 = (x5808 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5809);
            reg = x5809;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5810 = x5795 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5811 = (x5810 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5811);
            reg = x5811;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5812 = x5795 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5813 = (x5812 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5813);
            reg = x5813;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5814 = arg2[197 * steps + ((cycle - 0) & mask)];
        assert(x5814 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5815 = arg2[198 * steps + ((cycle - 0) & mask)];
        assert(x5815 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5816 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x5816 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5817 = arg2[200 * steps + ((cycle - 0) & mask)];
        assert(x5817 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5818 = arg2[201 * steps + ((cycle - 0) & mask)];
        assert(x5818 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5819 = arg2[202 * steps + ((cycle - 0) & mask)];
        assert(x5819 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5820 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x5820 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5821 = x5815 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5822 = x5816 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5823 = x5817 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5824 = x5818 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5825 = x5819 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5826 = x5820 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5827 = x5814 + x5821;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5828 = x5827 + x5822;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5829 = x5828 + x5823;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5830 = x5829 + x5824;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5831 = x5830 + x5825;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5832 = x5831 + x5826;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x5833 = x5832 - x5795;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x5833 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":42:23))
        auto x5834 = arg2[196 * steps + ((cycle - 0) & mask)];
        assert(x5834 != Fp::invalid());
        if (x5834 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5835 = arg1[0];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5836 = arg1[1];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5837 = arg1[2];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5838 = arg1[3];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5835);
            reg = x5835;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5836);
            reg = x5836;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5837);
            reg = x5837;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5838);
            reg = x5838;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5839 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5839 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5840 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5840 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5841 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5841 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5842 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5842 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5839;
          extern_args[2] = x5840;
          extern_args[3] = x5841;
          extern_args[4] = x5842;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5814 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5843 = arg1[4];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5844 = arg1[5];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5845 = arg1[6];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5846 = arg1[7];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5843);
            reg = x5843;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5844);
            reg = x5844;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5845);
            reg = x5845;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5846);
            reg = x5846;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5847 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5847 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5848 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5848 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5849 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5849 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5850 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5850 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5847;
          extern_args[2] = x5848;
          extern_args[3] = x5849;
          extern_args[4] = x5850;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5815 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5851 = arg1[10];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5852 = arg1[11];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5853 = arg1[8];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5854 = arg1[9];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5853);
            reg = x5853;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5854);
            reg = x5854;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5851);
            reg = x5851;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5852);
            reg = x5852;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5855 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5855 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5856 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5856 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5857 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5857 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5858 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5858 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5855;
          extern_args[2] = x5856;
          extern_args[3] = x5857;
          extern_args[4] = x5858;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5816 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5859 = arg1[12];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5860 = arg1[13];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5861 = arg1[14];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5862 = arg1[15];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5859);
            reg = x5859;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5860);
            reg = x5860;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5861);
            reg = x5861;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5862);
            reg = x5862;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5863 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5863 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5864 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5864 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5865 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5865 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5866 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5866 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5863;
          extern_args[2] = x5864;
          extern_args[3] = x5865;
          extern_args[4] = x5866;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5817 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5867 = arg1[16];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5868 = arg1[17];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5869 = arg1[18];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5870 = arg1[19];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5867);
            reg = x5867;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5868);
            reg = x5868;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5869);
            reg = x5869;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5870);
            reg = x5870;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5871 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5871 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5872 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5872 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5873 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5873 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5874 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5874 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5871;
          extern_args[2] = x5872;
          extern_args[3] = x5873;
          extern_args[4] = x5874;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5818 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5875 = arg1[20];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5876 = arg1[21];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5877 = arg1[22];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5878 = arg1[23];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5875);
            reg = x5875;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5876);
            reg = x5876;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5877);
            reg = x5877;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5878);
            reg = x5878;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5879 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5879 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5880 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5880 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5881 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5881 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5882 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5882 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5879;
          extern_args[2] = x5880;
          extern_args[3] = x5881;
          extern_args[4] = x5882;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5819 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5883 = arg1[24];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5884 = arg1[25];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5885 = arg1[26];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5886 = arg1[27];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5883);
            reg = x5883;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5884);
            reg = x5884;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5885);
            reg = x5885;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5886);
            reg = x5886;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5887 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5887 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5888 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5888 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5889 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5889 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5890 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5890 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5887;
          extern_args[2] = x5888;
          extern_args[3] = x5889;
          extern_args[4] = x5890;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        if (x5820 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5891 = arg1[28];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5892 = arg1[29];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5893 = arg1[30];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/input(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5894 = arg1[31];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5891);
            reg = x5891;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5892);
            reg = x5892;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5893);
            reg = x5893;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5894);
            reg = x5894;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5895 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x5895 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5896 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x5896 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5897 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x5897 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5898 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x5898 != Fp::invalid());
          extern_args[0] = x5832;
          extern_args[1] = x5895;
          extern_args[2] = x5896;
          extern_args[3] = x5897;
          extern_args[4] = x5898;
          extern_log(ctx, cycle, "  Read from %u: %w", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5899 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x5899 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5900 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x5900 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5901 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x5901 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5902 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x5902 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5899);
          reg = x5899;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5900);
          reg = x5900;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5901);
          reg = x5901;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5902);
          reg = x5902;
        }
        {
          extern_args[0] = x30;
          extern_args[1] = x5899;
          extern_args[2] = x5900;
          extern_args[3] = x5901;
          extern_args[4] = x5902;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5903 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x5903 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5904 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x5904 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5905 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x5905 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5906 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x5906 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5903);
          reg = x5903;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5904);
          reg = x5904;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5905);
          reg = x5905;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5906);
          reg = x5906;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":52:17)
        auto x5907 = x975 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x5908 = x5907 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5909 = Fp(x5908.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5909);
            reg = x5909;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5910 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x5910 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5911 = x5908 - x5910;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5912 = x5911 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5913 = Fp(x5912.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5913);
            reg = x5913;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5914 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x5914 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5915 = x5912 - x5914;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5916 = x5915 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5917 = Fp(x5916.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5917);
            reg = x5917;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5918 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x5918 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5919 = x5916 - x5918;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5920 = x5919 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x5921 = Fp(x5920.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5921);
            reg = x5921;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5922 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x5922 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x5923 = x5920 - x5922;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x5924 = x5923 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5924);
          reg = x5924;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5925 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x5925 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x5926 = x99 - x5925;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x5927 = x5925 * x5926;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5927);
          reg = x5927;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x5928 = x96 - x5925;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x5929 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x5929 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x5930 = x5929 * x5928;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x5930 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":54:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/components/mux.h":49:25))
      auto x5931 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x5931 != Fp::invalid());
      if (x5931 != 0) {
        {
          extern_args[0] = x30;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5932 = extern_outs[0];
          auto x5933 = extern_outs[1];
          auto x5934 = extern_outs[2];
          auto x5935 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5932);
            reg = x5932;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5933);
            reg = x5933;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5934);
            reg = x5934;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5935);
            reg = x5935;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5936 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x5936 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5937 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x5937 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5938 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x5938 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5939 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x5939 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5936);
          reg = x5936;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5937);
          reg = x5937;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5938);
          reg = x5938;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5939);
          reg = x5939;
        }
        {
          extern_args[0] = x31;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x5940 = extern_outs[0];
          auto x5941 = extern_outs[1];
          auto x5942 = extern_outs[2];
          auto x5943 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5940);
            reg = x5940;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5941);
            reg = x5941;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5942);
            reg = x5942;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5943);
            reg = x5943;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5944 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x5944 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5945 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x5945 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5946 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x5946 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5947 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x5947 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5944);
          reg = x5944;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5945);
          reg = x5945;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5946);
          reg = x5946;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5947);
          reg = x5947;
        }
        {
          // loc("./zirgen/components/u32.h":25:12)
          auto x5948 = x5945 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x5949 = x5946 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x5950 = x5947 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5951 = x5944 + x5948;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5952 = x5951 + x5949;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5953 = x5952 + x5950;
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":81:22)
          auto x5954 = Fp(x5953.asUInt32() & x79.asUInt32());
          if (x5954 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":83:26)
            auto x5955 = x5953 - x5954;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":83:26)
            auto x5956 = x5955 + x81;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":83:25)
            auto x5957 = x5956 * x78;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":83:7)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5957);
              reg = x5957;
            }
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":84:42)
            auto x5958 = x5954 - x99;
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = arg2[76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5958);
              reg = x5958;
            }
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":86:23)
          auto x5959 = (x5954 == 0) ? Fp(1) : Fp(0);
          if (x5959 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":87:25)
            auto x5960 = x5953 * x78;
            // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":87:7)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5960);
              reg = x5960;
            }
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = arg2[76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x79);
              reg = x79;
            }
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/2(ECallSoftware)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5961 = arg2[196 * steps + ((cycle - 0) & mask)];
        assert(x5961 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/2(ECallSoftware)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5962 = arg2[76 * steps + ((cycle - 0) & mask)];
        assert(x5962 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x5963 = x5945 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5964 = x5946 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5965 = x5947 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5966 = x5944 + x5963;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5967 = x5966 + x5964;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5968 = x5967 + x5965;
        extern_args[0] = x5968;
        extern_args[1] = x5961;
        extern_args[2] = x5962;
        extern_log(ctx, cycle, "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", extern_args, extern_outs);
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":97:7)
        auto x5969 = x5961 - x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":97:44)
        auto x5970 = x5962 + x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":97:6)
        auto x5971 = x5969 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":97:6)
        auto x5972 = x5971 + x5970;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":96:6)
        auto x5973 = x5968 - x5972;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":96:6)
        assert(x5973 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:96");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":100:31)
        auto x5974 = x5936 * x78;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5975 = Fp(x5974.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5975);
            reg = x5975;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5976 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x5976 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5977 = x5974 - x5976;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5978 = x5977 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":100:7)
        assert(x5978 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:100");
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5979 = Fp(x5974.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5979);
            reg = x5979;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5980 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x5980 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5981 = x5974 - x5980;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5982 = x5981 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":101:7)
        assert(x5982 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:101");
        {
          extern_args[0] = x5968;
          extern_syscallInit(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x5983 = x975 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5984 = Fp(x5983.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5984);
            reg = x5984;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5985 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x5985 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5986 = x5983 - x5985;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5987 = x5986 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5988 = Fp(x5987.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5988);
            reg = x5988;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5989 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x5989 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5990 = x5987 - x5989;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5991 = x5990 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5992 = Fp(x5991.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5992);
            reg = x5992;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5993 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x5993 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5994 = x5991 - x5993;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5995 = x5994 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x5996 = Fp(x5995.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5996);
            reg = x5996;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5997 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x5997 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x5998 = x5995 - x5997;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x5999 = x5998 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5999);
          reg = x5999;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6000 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x6000 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x6001 = x99 - x6000;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x6002 = x6000 * x6001;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6002);
          reg = x6002;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x6003 = x96 - x6000;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6004 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x6004 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x6005 = x6004 * x6003;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x6005 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":107:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        extern_log(ctx, cycle, "Set next major to be ecall copy in", extern_args, extern_outs);
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:25))
      auto x6006 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x6006 != Fp::invalid());
      if (x6006 != 0) {
        {
          extern_args[0] = x30;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6007 = extern_outs[0];
          auto x6008 = extern_outs[1];
          auto x6009 = extern_outs[2];
          auto x6010 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6007);
            reg = x6007;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6008);
            reg = x6008;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6009);
            reg = x6009;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6010);
            reg = x6010;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6011 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x6011 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6012 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x6012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6013 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x6013 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6014 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x6014 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6012);
          reg = x6012;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6014);
          reg = x6014;
        }
        {
          extern_args[0] = x31;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6015 = extern_outs[0];
          auto x6016 = extern_outs[1];
          auto x6017 = extern_outs[2];
          auto x6018 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6015);
            reg = x6015;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6016);
            reg = x6016;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6017);
            reg = x6017;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6018);
            reg = x6018;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6019 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x6019 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6020 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x6020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6021 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x6021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6022 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x6022 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6019);
          reg = x6019;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6020);
          reg = x6020;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6021);
          reg = x6021;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6022);
          reg = x6022;
        }
        {
          extern_args[0] = x29;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6023 = extern_outs[0];
          auto x6024 = extern_outs[1];
          auto x6025 = extern_outs[2];
          auto x6026 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6023);
            reg = x6023;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6024);
            reg = x6024;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6025);
            reg = x6025;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6026);
            reg = x6026;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6027 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x6027 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6028 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x6028 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6029 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x6029 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6030 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x6030 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6027);
          reg = x6027;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6028);
          reg = x6028;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6029);
          reg = x6029;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6030);
          reg = x6030;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":122:17)
        auto x6031 = x975 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x6032 = x6031 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6033 = Fp(x6032.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6033);
            reg = x6033;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6034 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x6034 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6035 = x6032 - x6034;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6036 = x6035 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6037 = Fp(x6036.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6037);
            reg = x6037;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6038 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x6038 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6039 = x6036 - x6038;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6040 = x6039 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6041 = Fp(x6040.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6041);
            reg = x6041;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6042 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x6042 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6043 = x6040 - x6042;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6044 = x6043 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x6045 = Fp(x6044.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6045);
            reg = x6045;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6046 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x6046 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x6047 = x6044 - x6046;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x6048 = x6047 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6048);
          reg = x6048;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6049 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x6049 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x6050 = x99 - x6049;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x6051 = x6049 * x6050;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6051);
          reg = x6051;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x6052 = x96 - x6049;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6053 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x6053 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x6054 = x6053 * x6052;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x6054 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":124:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:25))
      auto x6055 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x6055 != Fp::invalid());
      if (x6055 != 0) {
        {
          extern_args[0] = x31;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6056 = extern_outs[0];
          auto x6057 = extern_outs[1];
          auto x6058 = extern_outs[2];
          auto x6059 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6056);
            reg = x6056;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6057);
            reg = x6057;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6058);
            reg = x6058;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6059);
            reg = x6059;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6060 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x6060 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6061 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x6061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6062 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x6062 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6063 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x6063 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6060);
          reg = x6060;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6061);
          reg = x6061;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6062);
          reg = x6062;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6063);
          reg = x6063;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x6064 = x975 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6065 = Fp(x6064.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6065);
            reg = x6065;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6066 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x6066 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6067 = x6064 - x6066;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6068 = x6067 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6069 = Fp(x6068.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6069);
            reg = x6069;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6070 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x6070 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6071 = x6068 - x6070;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6072 = x6071 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6073 = Fp(x6072.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6073);
            reg = x6073;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6074 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x6074 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6075 = x6072 - x6074;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6076 = x6075 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x6077 = Fp(x6076.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6077);
            reg = x6077;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6078 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x6078 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x6079 = x6076 - x6078;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x6080 = x6079 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6080);
          reg = x6080;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6081 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x6081 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x6082 = x99 - x6081;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x6083 = x6081 * x6082;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6083);
          reg = x6083;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x6084 = x96 - x6081;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6085 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x6085 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x6086 = x6085 * x6084;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x6086 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":137:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:25))
      auto x6087 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x6087 != Fp::invalid());
      if (x6087 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":143:36)
        assert(x5648 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:143");
        {
          extern_args[0] = x28;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6088 = extern_outs[0];
          auto x6089 = extern_outs[1];
          auto x6090 = extern_outs[2];
          auto x6091 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6088);
            reg = x6088;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6089);
            reg = x6089;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6090);
            reg = x6090;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6091);
            reg = x6091;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6092 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x6092 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6093 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x6093 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6094 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x6094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6095 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x6095 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6092);
          reg = x6092;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6093);
          reg = x6093;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6094);
          reg = x6094;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x6096 = x6093 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6097 = x6094 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6098 = x6095 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6099 = x6092 + x6096;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6100 = x6099 + x6097;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6101 = x6100 + x6098;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x6102 = x6101 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6103 = Fp(x6102.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6103);
            reg = x6103;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6104 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x6104 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6105 = x6102 - x6104;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6106 = x6105 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6107 = Fp(x6106.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6107);
            reg = x6107;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6108 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x6108 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6109 = x6106 - x6108;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6110 = x6109 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6111 = Fp(x6110.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6111);
            reg = x6111;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6112 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x6112 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6113 = x6110 - x6112;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6114 = x6113 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x6115 = Fp(x6114.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6115);
            reg = x6115;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6116 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x6116 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x6117 = x6114 - x6116;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x6118 = x6117 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6118);
          reg = x6118;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6119 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x6119 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x6120 = x99 - x6119;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x6121 = x6119 * x6120;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6121);
          reg = x6121;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x6122 = x96 - x6119;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6123 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x6123 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x6124 = x6123 * x6122;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x6124 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        {
          extern_args[0] = x99;
          extern_setUserMode(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":149:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:25))
      auto x6125 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x6125 != Fp::invalid());
      if (x6125 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":156:7)
        assert(x5650 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:156");
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:52)
        auto x6126 = x965 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":45:41)
        auto x6127 = x964 + x6126;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x962);
          reg = x962;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x963);
          reg = x963;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x966);
          reg = x966;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6127);
          reg = x6127;
        }
        {
          extern_args[0] = x28;
          extern_args[1] = x962;
          extern_args[2] = x963;
          extern_args[3] = x966;
          extern_args[4] = x6127;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6128 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x6128 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6129 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x6129 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6130 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x6130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6131 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x6131 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6128);
          reg = x6128;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6129);
          reg = x6129;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6130);
          reg = x6130;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6131);
          reg = x6131;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":160:18)
        auto x6132 = x5651 * x26;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":160:53)
        auto x6133 = x5672 * x27;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":160:18)
        auto x6134 = x6132 + x6133;
        {
          extern_args[0] = x6134;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6135 = extern_outs[0];
          auto x6136 = extern_outs[1];
          auto x6137 = extern_outs[2];
          auto x6138 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6135);
            reg = x6135;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6136);
            reg = x6136;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6137);
            reg = x6137;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6138);
            reg = x6138;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6139 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x6139 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6140 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x6140 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6141 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x6141 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6142 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x6142 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6134);
          reg = x6134;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6139);
          reg = x6139;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6140);
          reg = x6140;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6141);
          reg = x6141;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6142);
          reg = x6142;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x6143 = x6140 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6144 = x6141 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6145 = x6142 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6146 = x6139 + x6143;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6147 = x6146 + x6144;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6148 = x6147 + x6145;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x6149 = x6148 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6150 = Fp(x6149.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6150);
            reg = x6150;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6151 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x6151 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6152 = x6149 - x6151;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6153 = x6152 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6154 = Fp(x6153.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6154);
            reg = x6154;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6155 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x6155 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6156 = x6153 - x6155;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6157 = x6156 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x6158 = Fp(x6157.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6158);
            reg = x6158;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x6159 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x6159 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x6160 = x6157 - x6159;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x6161 = x6160 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x6162 = Fp(x6161.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6162);
            reg = x6162;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6163 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x6163 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x6164 = x6161 - x6163;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x6165 = x6164 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6165);
          reg = x6165;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6166 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x6166 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x6167 = x99 - x6166;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x6168 = x6166 * x6167;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6168);
          reg = x6168;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x6169 = x96 - x6166;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6170 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x6170 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x6171 = x6170 * x6169;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x6171 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        {
          extern_args[0] = x98;
          extern_setUserMode(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":166:3)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6172 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x6172 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6173 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x6173 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x6174 = x6172 * x6173;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x6175 = x99 - x6173;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x6176 = x6174 * x6175;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x6176 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[9](Reg)"("./zirgen/components/mux.h":49:25))
    auto x6177 = arg2[110 * steps + ((cycle - 0) & mask)];
    assert(x6177 != Fp::invalid());
    if (x6177 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6178 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x6178 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6178);
        reg = x6178;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":174:37))
      auto x6179 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x6179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":174:37)
      auto x6180 = x6179 - x66;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":174:37)
      assert(x6180 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:174");
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":175:69))
      auto x6181 = arg2[109 * steps + ((cycle - 1) & mask)];
      assert(x6181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":176:77))
      auto x6182 = arg2[113 * steps + ((cycle - 1) & mask)];
      assert(x6182 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":177:35)
      auto x6183 = x6181 + x6182;
      if (x6183 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":179:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":181:39)
      auto x6184 = x99 - x6181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":181:39)
      auto x6185 = x6184 - x6182;
      if (x6185 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6186 = arg2[150 * steps + ((cycle - 1) & mask)];
        assert(x6186 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6186);
          reg = x6186;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":184:40))
        auto x6187 = arg2[144 * steps + ((cycle - 1) & mask)];
        assert(x6187 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":184:40)
        auto x6188 = x6187 - x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":184:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6188);
          reg = x6188;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6189 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x6189 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6190 = (x6189 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6190);
          reg = x6190;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6191 = inv(x6189);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6191);
          reg = x6191;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6192 = arg2[145 * steps + ((cycle - 0) & mask)];
      assert(x6192 != Fp::invalid());
      if (x6192 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x6189 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6193 = x99 - x6192;
      if (x6193 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6194 = arg2[146 * steps + ((cycle - 0) & mask)];
        assert(x6194 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6195 = x6189 * x6194;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6196 = x6195 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x6196 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x6192 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":188:29)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x76);
          reg = x76;
        }
      }
      if (x6193 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6197 = arg2[111 * steps + ((cycle - 0) & mask)];
        assert(x6197 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6198 = arg2[112 * steps + ((cycle - 0) & mask)];
        assert(x6198 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6199 = arg2[113 * steps + ((cycle - 0) & mask)];
        assert(x6199 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6200 = arg2[114 * steps + ((cycle - 0) & mask)];
        assert(x6200 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6201 = arg2[115 * steps + ((cycle - 0) & mask)];
        assert(x6201 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6202 = arg2[116 * steps + ((cycle - 0) & mask)];
        assert(x6202 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6203 = x2540 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6204 = x3253 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6205 = x4019 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6206 = x4478 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6207 = x4850 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6208 = x5288 * x68;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6209 = x5647 * x67;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6210 = x6177 * x66;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6211 = x6197 * x76;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6212 = x6198 * x75;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6213 = x6199 * x74;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6214 = x6200 * x73;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6215 = x6201 * x72;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6216 = x6202 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6217 = x1746 + x6203;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6218 = x6217 + x6204;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6219 = x6218 + x6205;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6220 = x6219 + x6206;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6221 = x6220 + x6207;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6222 = x6221 + x6208;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6223 = x6222 + x6209;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6224 = x6223 + x6210;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6225 = x6224 + x6211;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6226 = x6225 + x6212;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6227 = x6226 + x6213;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6228 = x6227 + x6214;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6229 = x6228 + x6215;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6230 = x6229 + x6216;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":189:33)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6230);
          reg = x6230;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x6231 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6232 = Fp(x6231.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6232);
          reg = x6232;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6233 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x6233 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6234 = x6231 - x6233;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6235 = x6234 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6236 = Fp(x6235.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6236);
          reg = x6236;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6237 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x6237 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6238 = x6235 - x6237;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6239 = x6238 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6240 = Fp(x6239.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6240);
          reg = x6240;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6241 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x6241 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6242 = x6239 - x6241;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6243 = x6242 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x6244 = Fp(x6243.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6244);
          reg = x6244;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6245 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x6245 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x6246 = x6243 - x6245;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x6247 = x6246 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6247);
        reg = x6247;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6248 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x6248 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x6249 = x99 - x6248;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x6250 = x6248 * x6249;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6250);
        reg = x6250;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x6251 = x96 - x6248;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x6252 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x6252 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x6253 = x6252 * x6251;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x6253 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6254 = arg2[150 * steps + ((cycle - 0) & mask)];
      assert(x6254 != Fp::invalid());
      extern_args[0] = x66;
      extern_args[1] = x6254;
      extern_args[2] = x6189;
      extern_log(ctx, cycle, "SHA_INIT: major = %u, minor = %u, count = %u", extern_args, extern_outs);
      if (x6181 != 0) {
        {
          extern_args[0] = x25;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6255 = extern_outs[0];
          auto x6256 = extern_outs[1];
          auto x6257 = extern_outs[2];
          auto x6258 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6255);
            reg = x6255;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6256);
            reg = x6256;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6257);
            reg = x6257;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6258);
            reg = x6258;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6259 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x6259 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6260 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x6260 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6261 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x6261 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6262 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x6262 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6259);
          reg = x6259;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6260);
          reg = x6260;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6261);
          reg = x6261;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6262);
          reg = x6262;
        }
        {
          extern_args[0] = x24;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6263 = extern_outs[0];
          auto x6264 = extern_outs[1];
          auto x6265 = extern_outs[2];
          auto x6266 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6263);
            reg = x6263;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6264);
            reg = x6264;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6265);
            reg = x6265;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6266);
            reg = x6266;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6267 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x6267 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6268 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x6268 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6269 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x6269 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6270 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x6270 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6267);
          reg = x6267;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6268);
          reg = x6268;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6269);
          reg = x6269;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6270);
          reg = x6270;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6271 = arg2[134 * steps + ((cycle - 1) & mask)];
        assert(x6271 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6272 = arg2[135 * steps + ((cycle - 1) & mask)];
        assert(x6272 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6273 = arg2[136 * steps + ((cycle - 1) & mask)];
        assert(x6273 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6274 = arg2[137 * steps + ((cycle - 1) & mask)];
        assert(x6274 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x6275 = x6272 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6276 = x6273 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6277 = x6274 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6278 = x6271 + x6275;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6279 = x6278 + x6276;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6280 = x6279 + x6277;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":198:58)
        auto x6281 = x6280 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":198:5)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6281);
          reg = x6281;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6282 = arg2[141 * steps + ((cycle - 1) & mask)];
        assert(x6282 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6283 = arg2[142 * steps + ((cycle - 1) & mask)];
        assert(x6283 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6284 = arg2[143 * steps + ((cycle - 1) & mask)];
        assert(x6284 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6285 = arg2[144 * steps + ((cycle - 1) & mask)];
        assert(x6285 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x6286 = x6283 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6287 = x6284 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6288 = x6285 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6289 = x6282 + x6286;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6290 = x6289 + x6287;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6291 = x6290 + x6288;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":199:57)
        auto x6292 = x6291 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":199:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6292);
          reg = x6292;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x6293 = x6260 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6294 = x6261 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6295 = x6262 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6296 = x6259 + x6293;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6297 = x6296 + x6294;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6298 = x6297 + x6295;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":200:16)
        auto x6299 = x6298 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":200:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6299);
          reg = x6299;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x6300 = x6268 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6301 = x6269 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6302 = x6270 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6303 = x6267 + x6300;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6304 = x6303 + x6301;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6305 = x6304 + x6302;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":201:16)
        auto x6306 = x6305 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":201:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6306);
          reg = x6306;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6307 = arg2[148 * steps + ((cycle - 1) & mask)];
        assert(x6307 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6308 = arg2[149 * steps + ((cycle - 1) & mask)];
        assert(x6308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6309 = arg2[150 * steps + ((cycle - 1) & mask)];
        assert(x6309 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6310 = arg2[151 * steps + ((cycle - 1) & mask)];
        assert(x6310 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x6311 = x6308 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x6312 = x6309 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x6313 = x6310 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6314 = x6307 + x6311;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6315 = x6314 + x6312;
        // loc("./zirgen/components/u32.h":24:12)
        auto x6316 = x6315 + x6313;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":202:5)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6316);
          reg = x6316;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":204:5)
        {
          auto& reg = arg2[153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6317 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x6317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6318 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x6318 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6319 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x6319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6320 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x6320 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6321 = arg2[147 * steps + ((cycle - 0) & mask)];
        assert(x6321 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":206:10)
        auto x6322 = x6317 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":207:10)
        auto x6323 = x6318 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":208:10)
        auto x6324 = x6319 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":209:10)
        auto x6325 = x6320 * x81;
        extern_args[0] = x6322;
        extern_args[1] = x6323;
        extern_args[2] = x6324;
        extern_args[3] = x6325;
        extern_args[4] = x6321;
        extern_log(ctx, cycle, "  FromEcall: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", extern_args, extern_outs);
      }
      if (x6182 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":216:53))
        auto x6326 = arg2[117 * steps + ((cycle - 1) & mask)];
        assert(x6326 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":216:5)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6326);
          reg = x6326;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":217:51))
        auto x6327 = arg2[118 * steps + ((cycle - 1) & mask)];
        assert(x6327 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":217:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6327);
          reg = x6327;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":218:64))
        auto x6328 = arg2[121 * steps + ((cycle - 1) & mask)];
        assert(x6328 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":14:10)
        auto x6329 = x6328 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":14:10)
        auto x6330 = x6329 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":218:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6330);
          reg = x6330;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":219:64)
        auto x6331 = x6330 + x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":219:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6331);
          reg = x6331;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":220:49))
        auto x6332 = arg2[122 * steps + ((cycle - 1) & mask)];
        assert(x6332 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":220:5)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6332);
          reg = x6332;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6333 = arg2[119 * steps + ((cycle - 1) & mask)];
        assert(x6333 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6333);
          reg = x6333;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":222:5)
        {
          auto& reg = arg2[153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6334 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x6334 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6335 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x6335 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6336 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x6336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6337 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x6337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6338 = arg2[147 * steps + ((cycle - 0) & mask)];
        assert(x6338 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":224:10)
        auto x6339 = x6334 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":225:10)
        auto x6340 = x6335 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":226:10)
        auto x6341 = x6336 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":227:10)
        auto x6342 = x6337 * x81;
        extern_args[0] = x6339;
        extern_args[1] = x6340;
        extern_args[2] = x6341;
        extern_args[3] = x6342;
        extern_args[4] = x6338;
        extern_log(ctx, cycle, "  FromPageFault: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", extern_args, extern_outs);
      }
      if (x6185 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":231:42))
        auto x6343 = arg2[140 * steps + ((cycle - 1) & mask)];
        assert(x6343 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":231:5)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6343);
          reg = x6343;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":232:40))
        auto x6344 = arg2[141 * steps + ((cycle - 1) & mask)];
        assert(x6344 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":232:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6344);
          reg = x6344;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":233:36))
        auto x6345 = arg2[142 * steps + ((cycle - 1) & mask)];
        assert(x6345 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":233:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6345);
          reg = x6345;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":234:36))
        auto x6346 = arg2[143 * steps + ((cycle - 1) & mask)];
        assert(x6346 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":234:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6346);
          reg = x6346;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":235:38))
        auto x6347 = arg2[147 * steps + ((cycle - 1) & mask)];
        assert(x6347 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":235:5)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6347);
          reg = x6347;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6348 = arg2[152 * steps + ((cycle - 1) & mask)];
        assert(x6348 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":237:38))
        auto x6349 = arg2[153 * steps + ((cycle - 1) & mask)];
        assert(x6349 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":237:5)
        {
          auto& reg = arg2[153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6349);
          reg = x6349;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6350 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x6350 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":240:24)
        auto x6351 = x6350 + x6189;
        {
          extern_args[0] = x6351;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6352 = extern_outs[0];
          auto x6353 = extern_outs[1];
          auto x6354 = extern_outs[2];
          auto x6355 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6352);
            reg = x6352;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6353);
            reg = x6353;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6354);
            reg = x6354;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6355);
            reg = x6355;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6356 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x6356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6357 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x6357 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6358 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x6358 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6359 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x6359 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6351);
          reg = x6351;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6356);
          reg = x6356;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6357);
          reg = x6357;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6358);
          reg = x6358;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6359);
          reg = x6359;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":241:24)
        auto x6360 = x6351 + x81;
        {
          extern_args[0] = x6360;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6361 = extern_outs[0];
          auto x6362 = extern_outs[1];
          auto x6363 = extern_outs[2];
          auto x6364 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6361);
            reg = x6361;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6362);
            reg = x6362;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6363);
            reg = x6363;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6364);
            reg = x6364;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6365 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x6365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6366 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x6366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6367 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x6367 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6368 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x6368 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6360);
          reg = x6360;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6365);
          reg = x6365;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6366);
          reg = x6366;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6367);
          reg = x6367;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6368);
          reg = x6368;
        }
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6369 = arg2[147 * steps + ((cycle - 0) & mask)];
      assert(x6369 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6370 = (x6369 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6370);
          reg = x6370;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6371 = inv(x6369);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6371);
          reg = x6371;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6372 = arg2[148 * steps + ((cycle - 0) & mask)];
      assert(x6372 != Fp::invalid());
      if (x6372 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x6369 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6373 = x99 - x6372;
      if (x6373 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6374 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x6374 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6375 = x6369 * x6374;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6376 = x6375 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x6376 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6377 = arg2[12 * steps + ((cycle - 0) & mask)];
      assert(x6377 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6378 = arg2[13 * steps + ((cycle - 0) & mask)];
      assert(x6378 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6379 = arg2[14 * steps + ((cycle - 0) & mask)];
      assert(x6379 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6380 = arg2[15 * steps + ((cycle - 0) & mask)];
      assert(x6380 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6381 = arg2[16 * steps + ((cycle - 0) & mask)];
      assert(x6381 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6382 = arg2[17 * steps + ((cycle - 0) & mask)];
      assert(x6382 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6383 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x6383 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6384 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x6384 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6385 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x6385 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6386 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x6386 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6387 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x6387 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6388 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6389 = arg2[85 * steps + ((cycle - 0) & mask)];
      assert(x6389 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6390 = arg2[86 * steps + ((cycle - 0) & mask)];
      assert(x6390 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6391 = arg2[87 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6392 = arg2[88 * steps + ((cycle - 0) & mask)];
      assert(x6392 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6393 = x6377 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6394 = x6378 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6395 = x6379 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6396 = x6380 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6397 = x6381 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6398 = x6382 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6399 = x6384 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6400 = x6385 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6401 = x6386 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6402 = x6387 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6403 = x6388 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6404 = x6389 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6405 = x6390 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6406 = x6391 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6407 = x6392 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6408 = x6383 + x6399;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6409 = x6408 + x6400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6410 = x6409 + x6401;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6411 = x6410 + x6402;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6412 = x6411 + x6403;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6413 = x6412 + x6404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6414 = x6413 + x6405;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6415 = x6414 + x6406;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6416 = x6415 + x6407;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6417 = x6416 + x6393;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6418 = x6417 + x6394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6419 = x6418 + x6395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6420 = x6419 + x6396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6421 = x6420 + x6397;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6422 = x6421 + x6398;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6423 = x98 - x6422;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6424 = x6423 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6424);
        reg = x6424;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6425 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x6425 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6426 = Fp(x6425.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6426);
          reg = x6426;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6427 = Fp(x6425.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6428 = x6427 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6428);
          reg = x6428;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6429 = Fp(x6425.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6430 = x6429 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6430);
          reg = x6430;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6431 = Fp(x6425.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6432 = x6431 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6432);
          reg = x6432;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6433 = Fp(x6425.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6434 = x6433 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6434);
          reg = x6434;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6435 = Fp(x6425.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6436 = x6435 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6436);
          reg = x6436;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6437 = Fp(x6425.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6438 = x6437 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6438);
          reg = x6438;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6439 = Fp(x6425.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6440 = x6439 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6440);
          reg = x6440;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6441 = Fp(x6425.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6442 = x6441 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6443 = Fp(x6425.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6444 = x6443 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6445 = Fp(x6425.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6446 = x6445 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6447 = Fp(x6425.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6448 = x6447 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6448);
          reg = x6448;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6449 = Fp(x6425.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6450 = x6449 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6450);
          reg = x6450;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6451 = Fp(x6425.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6452 = x6451 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6453 = Fp(x6425.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6454 = x6453 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6454);
          reg = x6454;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6455 = Fp(x6425.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6456 = x6455 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6456);
          reg = x6456;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6457 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x6457 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6458 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x6458 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6459 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x6459 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6460 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x6460 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6461 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x6461 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6462 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x6462 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6463 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x6463 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6464 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x6464 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6465 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x6465 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6466 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x6466 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6467 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x6467 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6468 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x6468 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6469 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x6469 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6470 = arg2[31 * steps + ((cycle - 0) & mask)];
      assert(x6470 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6471 = arg2[32 * steps + ((cycle - 0) & mask)];
      assert(x6471 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6472 = arg2[33 * steps + ((cycle - 0) & mask)];
      assert(x6472 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6473 = x6458 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6474 = x6459 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6475 = x6460 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6476 = x6461 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6477 = x6462 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6478 = x6463 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6479 = x6464 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6480 = x6465 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6481 = x6466 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6482 = x6467 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6483 = x6468 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6484 = x6469 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6485 = x6470 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6486 = x6471 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6487 = x6472 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6488 = x6457 + x6473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6489 = x6488 + x6474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6490 = x6489 + x6475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6491 = x6490 + x6476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6492 = x6491 + x6477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6493 = x6492 + x6478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6494 = x6493 + x6479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6495 = x6494 + x6480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6496 = x6495 + x6481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6497 = x6496 + x6482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6498 = x6497 + x6483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6499 = x6498 + x6484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6500 = x6499 + x6485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6501 = x6500 + x6486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6502 = x6501 + x6487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6503 = x6425 - x6502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6504 = x6503 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6504);
        reg = x6504;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6505 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6506 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x6506 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6507 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6508 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:61)
      auto x6509 = x6505 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:26)
      auto x6510 = x6507 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:46)
      auto x6511 = x6506 + x6509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:11)
      auto x6512 = x6508 + x6510;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6513 = Fp(x6512.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6513);
          reg = x6513;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6514 = Fp(x6512.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6515 = x6514 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6515);
          reg = x6515;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6516 = Fp(x6512.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6517 = x6516 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6517);
          reg = x6517;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6518 = Fp(x6512.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6519 = x6518 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6519);
          reg = x6519;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6520 = Fp(x6512.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6521 = x6520 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6521);
          reg = x6521;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6522 = Fp(x6512.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6523 = x6522 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6523);
          reg = x6523;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6524 = Fp(x6512.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6525 = x6524 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6525);
          reg = x6525;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6526 = Fp(x6512.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6527 = x6526 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6527);
          reg = x6527;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6528 = Fp(x6512.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6529 = x6528 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6529);
          reg = x6529;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6530 = Fp(x6512.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6531 = x6530 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6531);
          reg = x6531;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6532 = Fp(x6512.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6533 = x6532 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6533);
          reg = x6533;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6534 = Fp(x6512.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6535 = x6534 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6535);
          reg = x6535;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6536 = Fp(x6512.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6537 = x6536 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6537);
          reg = x6537;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6538 = Fp(x6512.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6539 = x6538 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6539);
          reg = x6539;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6540 = Fp(x6512.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6541 = x6540 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6541);
          reg = x6541;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6542 = Fp(x6512.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6543 = x6542 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6543);
          reg = x6543;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6544 = arg2[160 * steps + ((cycle - 0) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6545 = arg2[161 * steps + ((cycle - 0) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6546 = arg2[162 * steps + ((cycle - 0) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6547 = arg2[163 * steps + ((cycle - 0) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6548 = arg2[164 * steps + ((cycle - 0) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6549 = arg2[165 * steps + ((cycle - 0) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6550 = arg2[166 * steps + ((cycle - 0) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6551 = arg2[167 * steps + ((cycle - 0) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6552 = arg2[168 * steps + ((cycle - 0) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6553 = arg2[169 * steps + ((cycle - 0) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6554 = arg2[170 * steps + ((cycle - 0) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6555 = arg2[171 * steps + ((cycle - 0) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6556 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6557 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6558 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6559 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6560 = x6545 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6561 = x6546 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6562 = x6547 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6563 = x6548 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6564 = x6549 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6565 = x6550 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6566 = x6551 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6567 = x6552 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6568 = x6553 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6569 = x6554 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6570 = x6555 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6571 = x6556 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6572 = x6557 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6573 = x6558 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6574 = x6559 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6575 = x6544 + x6560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6576 = x6575 + x6561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6577 = x6576 + x6562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6578 = x6577 + x6563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6579 = x6578 + x6564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6580 = x6579 + x6565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6581 = x6580 + x6566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6582 = x6581 + x6567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6583 = x6582 + x6568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6584 = x6583 + x6569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6585 = x6584 + x6570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6586 = x6585 + x6571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6587 = x6586 + x6572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6588 = x6587 + x6573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6589 = x6588 + x6574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6590 = x6512 - x6589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6591 = x6590 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
        auto x6592 = Fp(x6591.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6592);
          reg = x6592;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6593 = arg2[73 * steps + ((cycle - 0) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
      auto x6594 = x6591 - x6593;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
      auto x6595 = x6594 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
      auto x6596 = x99 - x6595;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      auto x6597 = x6595 * x6596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      assert(x6597 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
      auto x6598 = x6511 + x6591;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6599 = Fp(x6598.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6599);
          reg = x6599;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6600 = Fp(x6598.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6601 = x6600 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6601);
          reg = x6601;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6602 = Fp(x6598.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6603 = x6602 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6603);
          reg = x6603;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6604 = Fp(x6598.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6605 = x6604 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6605);
          reg = x6605;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6606 = Fp(x6598.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6607 = x6606 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6607);
          reg = x6607;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6608 = Fp(x6598.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6609 = x6608 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6609);
          reg = x6609;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6610 = Fp(x6598.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6611 = x6610 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6611);
          reg = x6611;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6612 = Fp(x6598.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6613 = x6612 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6613);
          reg = x6613;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6614 = Fp(x6598.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6615 = x6614 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6615);
          reg = x6615;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6616 = Fp(x6598.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6617 = x6616 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6617);
          reg = x6617;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6618 = Fp(x6598.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6619 = x6618 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6619);
          reg = x6619;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6620 = Fp(x6598.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6621 = x6620 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6621);
          reg = x6621;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6622 = Fp(x6598.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6623 = x6622 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6623);
          reg = x6623;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6624 = Fp(x6598.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6625 = x6624 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6625);
          reg = x6625;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6626 = Fp(x6598.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6627 = x6626 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6627);
          reg = x6627;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6628 = Fp(x6598.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6629 = x6628 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6629);
          reg = x6629;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6630 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6631 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6632 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6633 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6634 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6635 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6636 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6637 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6638 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6639 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6640 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6641 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6642 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6643 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6644 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6645 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6646 = x6631 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6647 = x6632 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6648 = x6633 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6649 = x6634 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6650 = x6635 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6651 = x6636 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6652 = x6637 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6653 = x6638 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6654 = x6639 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6655 = x6640 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6656 = x6641 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6657 = x6642 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6658 = x6643 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6659 = x6644 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6660 = x6645 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6661 = x6630 + x6646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6662 = x6661 + x6647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6663 = x6662 + x6648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6664 = x6663 + x6649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6665 = x6664 + x6650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6666 = x6665 + x6651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6667 = x6666 + x6652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6668 = x6667 + x6653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6669 = x6668 + x6654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6670 = x6669 + x6655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6671 = x6670 + x6656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6672 = x6671 + x6657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6673 = x6672 + x6658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6674 = x6673 + x6659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6675 = x6674 + x6660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6676 = x6598 - x6675;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6677 = x6676 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
        auto x6678 = Fp(x6677.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6678);
          reg = x6678;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6679 = arg2[74 * steps + ((cycle - 0) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
      auto x6680 = x6677 - x6679;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
      auto x6681 = x6680 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
      auto x6682 = x99 - x6681;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      auto x6683 = x6681 * x6682;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      assert(x6683 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6684 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6685 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6686 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6687 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:61)
      auto x6688 = x6684 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:26)
      auto x6689 = x6686 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:46)
      auto x6690 = x6685 + x6688;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:11)
      auto x6691 = x6687 + x6689;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6692 = Fp(x6691.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6692);
          reg = x6692;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6693 = Fp(x6691.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6694 = x6693 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6694);
          reg = x6694;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6695 = Fp(x6691.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6696 = x6695 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6696);
          reg = x6696;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6697 = Fp(x6691.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6698 = x6697 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6698);
          reg = x6698;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6699 = Fp(x6691.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6700 = x6699 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6700);
          reg = x6700;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6701 = Fp(x6691.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6702 = x6701 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6702);
          reg = x6702;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6703 = Fp(x6691.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6704 = x6703 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6704);
          reg = x6704;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6705 = Fp(x6691.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6706 = x6705 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6706);
          reg = x6706;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6707 = Fp(x6691.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6708 = x6707 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6708);
          reg = x6708;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6709 = Fp(x6691.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6710 = x6709 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6710);
          reg = x6710;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6711 = Fp(x6691.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6712 = x6711 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6712);
          reg = x6712;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6713 = Fp(x6691.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6714 = x6713 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6714);
          reg = x6714;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6715 = Fp(x6691.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6716 = x6715 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6716);
          reg = x6716;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6717 = Fp(x6691.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6718 = x6717 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6718);
          reg = x6718;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6719 = Fp(x6691.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6720 = x6719 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6720);
          reg = x6720;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6721 = Fp(x6691.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6722 = x6721 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6722);
          reg = x6722;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6723 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6724 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6725 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6726 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6727 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6728 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6729 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6730 = arg2[199 * steps + ((cycle - 0) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6731 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6732 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6733 = arg2[202 * steps + ((cycle - 0) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6734 = arg2[203 * steps + ((cycle - 0) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6735 = arg2[204 * steps + ((cycle - 0) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6736 = arg2[205 * steps + ((cycle - 0) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6737 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6738 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6739 = x6724 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6740 = x6725 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6741 = x6726 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6742 = x6727 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6743 = x6728 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6744 = x6729 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6745 = x6730 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6746 = x6731 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6747 = x6732 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6748 = x6733 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6749 = x6734 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6750 = x6735 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6751 = x6736 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6752 = x6737 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6753 = x6738 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6754 = x6723 + x6739;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6755 = x6754 + x6740;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6756 = x6755 + x6741;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6757 = x6756 + x6742;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6758 = x6757 + x6743;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6759 = x6758 + x6744;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6760 = x6759 + x6745;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6761 = x6760 + x6746;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6762 = x6761 + x6747;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6763 = x6762 + x6748;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6764 = x6763 + x6749;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6765 = x6764 + x6750;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6766 = x6765 + x6751;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6767 = x6766 + x6752;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6768 = x6767 + x6753;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6769 = x6691 - x6768;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6770 = x6769 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
        auto x6771 = Fp(x6770.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6771);
          reg = x6771;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6772 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
      auto x6773 = x6770 - x6772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
      auto x6774 = x6773 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
      auto x6775 = x99 - x6774;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      auto x6776 = x6774 * x6775;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      assert(x6776 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
      auto x6777 = x6690 + x6770;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6778 = Fp(x6777.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6778);
          reg = x6778;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6779 = Fp(x6777.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6780 = x6779 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6780);
          reg = x6780;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6781 = Fp(x6777.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6782 = x6781 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6782);
          reg = x6782;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6783 = Fp(x6777.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6784 = x6783 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6784);
          reg = x6784;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6785 = Fp(x6777.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6786 = x6785 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6786);
          reg = x6786;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6787 = Fp(x6777.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6788 = x6787 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6788);
          reg = x6788;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6789 = Fp(x6777.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6790 = x6789 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6790);
          reg = x6790;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6791 = Fp(x6777.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6792 = x6791 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6792);
          reg = x6792;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6793 = Fp(x6777.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6794 = x6793 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6794);
          reg = x6794;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6795 = Fp(x6777.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6796 = x6795 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6796);
          reg = x6796;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6797 = Fp(x6777.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6798 = x6797 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6798);
          reg = x6798;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6799 = Fp(x6777.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6800 = x6799 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6800);
          reg = x6800;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6801 = Fp(x6777.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6802 = x6801 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6802);
          reg = x6802;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6803 = Fp(x6777.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6804 = x6803 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6804);
          reg = x6804;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6805 = Fp(x6777.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6806 = x6805 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6806);
          reg = x6806;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x6807 = Fp(x6777.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x6808 = x6807 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[223 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6808);
          reg = x6808;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6809 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6810 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6811 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6812 = arg2[211 * steps + ((cycle - 0) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6813 = arg2[212 * steps + ((cycle - 0) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6814 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6815 = arg2[214 * steps + ((cycle - 0) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6816 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x6816 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6817 = arg2[216 * steps + ((cycle - 0) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6818 = arg2[217 * steps + ((cycle - 0) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6819 = arg2[218 * steps + ((cycle - 0) & mask)];
      assert(x6819 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6820 = arg2[219 * steps + ((cycle - 0) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6821 = arg2[220 * steps + ((cycle - 0) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6822 = arg2[221 * steps + ((cycle - 0) & mask)];
      assert(x6822 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6823 = arg2[222 * steps + ((cycle - 0) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6824 = arg2[223 * steps + ((cycle - 0) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6825 = x6810 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6826 = x6811 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6827 = x6812 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6828 = x6813 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6829 = x6814 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6830 = x6815 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6831 = x6816 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6832 = x6817 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6833 = x6818 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6834 = x6819 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6835 = x6820 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6836 = x6821 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6837 = x6822 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6838 = x6823 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x6839 = x6824 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6840 = x6809 + x6825;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6841 = x6840 + x6826;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6842 = x6841 + x6827;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6843 = x6842 + x6828;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6844 = x6843 + x6829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6845 = x6844 + x6830;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6846 = x6845 + x6831;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6847 = x6846 + x6832;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6848 = x6847 + x6833;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6849 = x6848 + x6834;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6850 = x6849 + x6835;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6851 = x6850 + x6836;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6852 = x6851 + x6837;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6853 = x6852 + x6838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x6854 = x6853 + x6839;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x6855 = x6777 - x6854;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x6856 = x6855 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
        auto x6857 = Fp(x6856.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6857);
          reg = x6857;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6858 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x6858 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
      auto x6859 = x6856 - x6858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
      auto x6860 = x6859 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
      auto x6861 = x99 - x6860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      auto x6862 = x6860 * x6861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      assert(x6862 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6863 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x6863 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x6864 = x6863 * x6248;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x6865 = x6864 * x6249;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x6865 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("./zirgen/components/mux.h":49:25))
    auto x6866 = arg2[111 * steps + ((cycle - 0) & mask)];
    assert(x6866 != Fp::invalid());
    if (x6866 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6867 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x6867 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6867);
        reg = x6867;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":263:37))
      auto x6868 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x6868 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":263:37)
      auto x6869 = x6868 - x76;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":263:37)
      assert(x6869 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:263");
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[9](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":264:70))
      auto x6870 = arg2[110 * steps + ((cycle - 1) & mask)];
      assert(x6870 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":265:70))
      auto x6871 = arg2[112 * steps + ((cycle - 1) & mask)];
      assert(x6871 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":266:29)
      auto x6872 = x6870 + x6871;
      if (x6872 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":268:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":270:33)
      auto x6873 = x99 - x6870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":270:33)
      auto x6874 = x6873 - x6871;
      if (x6874 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6875 = arg2[145 * steps + ((cycle - 1) & mask)];
        assert(x6875 != Fp::invalid());
        if (x6875 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":274:7)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":276:20)
        auto x6876 = x99 - x6875;
        if (x6876 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x6877 = arg2[150 * steps + ((cycle - 1) & mask)];
          assert(x6877 != Fp::invalid());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6877);
            reg = x6877;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":279:42))
          auto x6878 = arg2[144 * steps + ((cycle - 1) & mask)];
          assert(x6878 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":279:42)
          auto x6879 = x6878 - x99;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":279:7)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6879);
            reg = x6879;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6880 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x6880 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6881 = (x6880 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6881);
          reg = x6881;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6882 = inv(x6880);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6882);
          reg = x6882;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6883 = arg2[145 * steps + ((cycle - 0) & mask)];
      assert(x6883 != Fp::invalid());
      if (x6883 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x6880 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6884 = x99 - x6883;
      if (x6884 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6885 = arg2[146 * steps + ((cycle - 0) & mask)];
        assert(x6885 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6886 = x6880 * x6885;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6887 = x6886 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x6887 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x6883 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6888 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x6888 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":286:17)
        auto x6889 = x99 - x6888;
        if (x6889 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":286:21)
          {
            auto& reg = arg2[100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
        }
        if (x6888 != 0) {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":287:17)
          {
            auto& reg = arg2[100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
      }
      if (x6884 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6890 = arg2[112 * steps + ((cycle - 0) & mask)];
        assert(x6890 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6891 = arg2[113 * steps + ((cycle - 0) & mask)];
        assert(x6891 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6892 = arg2[114 * steps + ((cycle - 0) & mask)];
        assert(x6892 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6893 = arg2[115 * steps + ((cycle - 0) & mask)];
        assert(x6893 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6894 = arg2[116 * steps + ((cycle - 0) & mask)];
        assert(x6894 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6895 = x2540 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6896 = x3253 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6897 = x4019 * x81;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6898 = x4478 * x70;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6899 = x4850 * x69;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6900 = x5288 * x68;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6901 = x5647 * x67;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6902 = x6177 * x66;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6903 = x6866 * x76;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6904 = x6890 * x75;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6905 = x6891 * x74;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6906 = x6892 * x73;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6907 = x6893 * x72;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6908 = x6894 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6909 = x1746 + x6895;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6910 = x6909 + x6896;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6911 = x6910 + x6897;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6912 = x6911 + x6898;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6913 = x6912 + x6899;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6914 = x6913 + x6900;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6915 = x6914 + x6901;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6916 = x6915 + x6902;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6917 = x6916 + x6903;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6918 = x6917 + x6904;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6919 = x6918 + x6905;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6920 = x6919 + x6906;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6921 = x6920 + x6907;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6922 = x6921 + x6908;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":289:33)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6922);
          reg = x6922;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x6923 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6924 = Fp(x6923.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6924);
          reg = x6924;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6925 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x6925 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6926 = x6923 - x6925;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6927 = x6926 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6928 = Fp(x6927.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6928);
          reg = x6928;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6929 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x6929 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6930 = x6927 - x6929;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6931 = x6930 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6932 = Fp(x6931.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6932);
          reg = x6932;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6933 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x6933 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6934 = x6931 - x6933;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6935 = x6934 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x6936 = Fp(x6935.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6936);
          reg = x6936;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6937 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x6937 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x6938 = x6935 - x6937;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x6939 = x6938 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6939);
        reg = x6939;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6940 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x6940 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x6941 = x99 - x6940;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x6942 = x6940 * x6941;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6942);
        reg = x6942;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x6943 = x96 - x6940;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x6944 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x6944 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x6945 = x6944 * x6943;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x6945 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":292:40))
      auto x6946 = arg2[140 * steps + ((cycle - 1) & mask)];
      assert(x6946 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":292:3)
      {
        auto& reg = arg2[140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6946);
        reg = x6946;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":293:38))
      auto x6947 = arg2[141 * steps + ((cycle - 1) & mask)];
      assert(x6947 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":293:3)
      {
        auto& reg = arg2[141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6947);
        reg = x6947;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":294:34))
      auto x6948 = arg2[142 * steps + ((cycle - 1) & mask)];
      assert(x6948 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":294:3)
      {
        auto& reg = arg2[142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6948);
        reg = x6948;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":295:34))
      auto x6949 = arg2[143 * steps + ((cycle - 1) & mask)];
      assert(x6949 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":295:3)
      {
        auto& reg = arg2[143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6949);
        reg = x6949;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":296:36))
      auto x6950 = arg2[147 * steps + ((cycle - 1) & mask)];
      assert(x6950 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":296:3)
      {
        auto& reg = arg2[147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6950);
        reg = x6950;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6951 = arg2[152 * steps + ((cycle - 1) & mask)];
      assert(x6951 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6951);
        reg = x6951;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":298:36))
      auto x6952 = arg2[153 * steps + ((cycle - 1) & mask)];
      assert(x6952 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":298:3)
      {
        auto& reg = arg2[153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6952);
        reg = x6952;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6953 = arg2[147 * steps + ((cycle - 0) & mask)];
      assert(x6953 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6954 = (x6953 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6954);
          reg = x6954;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6955 = inv(x6953);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6955);
          reg = x6955;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6956 = arg2[148 * steps + ((cycle - 0) & mask)];
      assert(x6956 != Fp::invalid());
      if (x6956 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x6953 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6957 = x99 - x6956;
      if (x6957 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x6958 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x6958 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6959 = x6953 * x6958;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6960 = x6959 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x6960 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x6961 = arg2[140 * steps + ((cycle - 0) & mask)];
      assert(x6961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x6962 = arg2[142 * steps + ((cycle - 0) & mask)];
      assert(x6962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x6963 = arg2[143 * steps + ((cycle - 0) & mask)];
      assert(x6963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6964 = arg2[150 * steps + ((cycle - 0) & mask)];
      assert(x6964 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":306:8)
      auto x6965 = x6962 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":307:8)
      auto x6966 = x6963 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":308:8)
      auto x6967 = x6961 * x81;
      extern_args[0] = x76;
      extern_args[1] = x6964;
      extern_args[2] = x6880;
      extern_args[3] = x6965;
      extern_args[4] = x6966;
      extern_args[5] = x6967;
      extern_args[6] = x6953;
      extern_log(ctx, cycle, "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = %10x, data1 = %10x, state = %10x, repeat: %u", extern_args, extern_outs);
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":312:15)
      auto x6968 = x99 - x6964;
      if (x6968 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":313:43))
        auto x6969 = arg2[153 * steps + ((cycle - 0) & mask)];
        assert(x6969 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":313:24)
        auto x6970 = x6962 + x68;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":313:24)
        auto x6971 = x6970 - x6880;
        {
          extern_args[0] = x6971;
          extern_args[1] = x6969;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6972 = extern_outs[0];
          auto x6973 = extern_outs[1];
          auto x6974 = extern_outs[2];
          auto x6975 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6972);
            reg = x6972;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6973);
            reg = x6973;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6974);
            reg = x6974;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6975);
            reg = x6975;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6976 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x6976 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6977 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x6977 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6978 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x6978 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6979 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x6979 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6971);
          reg = x6971;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6969);
          reg = x6969;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6976);
          reg = x6976;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6977);
          reg = x6977;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6978);
          reg = x6978;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6979);
          reg = x6979;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":314:24)
        auto x6980 = x9 - x6880;
        {
          extern_args[0] = x6980;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6981 = extern_outs[0];
          auto x6982 = extern_outs[1];
          auto x6983 = extern_outs[2];
          auto x6984 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6981);
            reg = x6981;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6982);
            reg = x6982;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6983);
            reg = x6983;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6984);
            reg = x6984;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6985 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x6985 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6986 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x6986 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6987 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x6987 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6988 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x6988 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6980);
          reg = x6980;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6985);
          reg = x6985;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6986);
          reg = x6986;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6987);
          reg = x6987;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6988);
          reg = x6988;
        }
      }
      if (x6964 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":317:43))
        auto x6989 = arg2[153 * steps + ((cycle - 0) & mask)];
        assert(x6989 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":317:24)
        auto x6990 = x6963 + x68;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":317:24)
        auto x6991 = x6990 - x6880;
        {
          extern_args[0] = x6991;
          extern_args[1] = x6989;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x6992 = extern_outs[0];
          auto x6993 = extern_outs[1];
          auto x6994 = extern_outs[2];
          auto x6995 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6992);
            reg = x6992;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6993);
            reg = x6993;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6994);
            reg = x6994;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6995);
            reg = x6995;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6996 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x6996 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6997 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x6997 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6998 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x6998 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6999 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x6999 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6991);
          reg = x6991;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6989);
          reg = x6989;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6996);
          reg = x6996;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6997);
          reg = x6997;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6998);
          reg = x6998;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6999);
          reg = x6999;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":318:24)
        auto x7000 = x8 - x6880;
        {
          extern_args[0] = x7000;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x7001 = extern_outs[0];
          auto x7002 = extern_outs[1];
          auto x7003 = extern_outs[2];
          auto x7004 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7001);
            reg = x7001;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7002);
            reg = x7002;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7003);
            reg = x7003;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7004);
            reg = x7004;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x7005 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x7005 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x7006 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x7006 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x7007 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x7007 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x7008 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x7008 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7000);
          reg = x7000;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7005);
          reg = x7005;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7006);
          reg = x7006;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7007);
          reg = x7007;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7008);
          reg = x7008;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7009 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x7009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7010 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x7010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7011 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x7011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7012 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x7012 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:61)
      auto x7013 = x7009 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:26)
      auto x7014 = x7011 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:46)
      auto x7015 = x7010 + x7013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":136:11)
      auto x7016 = x7012 + x7014;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7017 = Fp(x7016.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7017);
          reg = x7017;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7018 = Fp(x7016.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7019 = x7018 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7019);
          reg = x7019;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7020 = Fp(x7016.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7021 = x7020 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7021);
          reg = x7021;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7022 = Fp(x7016.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7023 = x7022 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7023);
          reg = x7023;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7024 = Fp(x7016.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7025 = x7024 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7025);
          reg = x7025;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7026 = Fp(x7016.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7027 = x7026 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7027);
          reg = x7027;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7028 = Fp(x7016.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7029 = x7028 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7029);
          reg = x7029;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7030 = Fp(x7016.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7031 = x7030 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7031);
          reg = x7031;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7032 = Fp(x7016.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7033 = x7032 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7033);
          reg = x7033;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7034 = Fp(x7016.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7035 = x7034 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7035);
          reg = x7035;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7036 = Fp(x7016.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7037 = x7036 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7037);
          reg = x7037;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7038 = Fp(x7016.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7039 = x7038 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7039);
          reg = x7039;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7040 = Fp(x7016.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7041 = x7040 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7041);
          reg = x7041;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7042 = Fp(x7016.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7043 = x7042 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7043);
          reg = x7043;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7044 = Fp(x7016.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7045 = x7044 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7045);
          reg = x7045;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7046 = Fp(x7016.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7047 = x7046 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7047);
          reg = x7047;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7048 = arg2[12 * steps + ((cycle - 0) & mask)];
      assert(x7048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7049 = arg2[13 * steps + ((cycle - 0) & mask)];
      assert(x7049 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7050 = arg2[14 * steps + ((cycle - 0) & mask)];
      assert(x7050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7051 = arg2[15 * steps + ((cycle - 0) & mask)];
      assert(x7051 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7052 = arg2[16 * steps + ((cycle - 0) & mask)];
      assert(x7052 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7053 = arg2[17 * steps + ((cycle - 0) & mask)];
      assert(x7053 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7054 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x7054 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7055 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x7055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7056 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x7056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7057 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x7057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7058 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x7058 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7059 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x7059 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7060 = arg2[85 * steps + ((cycle - 0) & mask)];
      assert(x7060 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7061 = arg2[86 * steps + ((cycle - 0) & mask)];
      assert(x7061 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7062 = arg2[87 * steps + ((cycle - 0) & mask)];
      assert(x7062 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7063 = arg2[88 * steps + ((cycle - 0) & mask)];
      assert(x7063 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7064 = x7048 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7065 = x7049 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7066 = x7050 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7067 = x7051 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7068 = x7052 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7069 = x7053 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7070 = x7055 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7071 = x7056 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7072 = x7057 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7073 = x7058 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7074 = x7059 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7075 = x7060 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7076 = x7061 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7077 = x7062 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7078 = x7063 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7079 = x7054 + x7070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7080 = x7079 + x7071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7081 = x7080 + x7072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7082 = x7081 + x7073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7083 = x7082 + x7074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7084 = x7083 + x7075;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7085 = x7084 + x7076;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7086 = x7085 + x7077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7087 = x7086 + x7078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7088 = x7087 + x7064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7089 = x7088 + x7065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7090 = x7089 + x7066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7091 = x7090 + x7067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7092 = x7091 + x7068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7093 = x7092 + x7069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x7094 = x7016 - x7093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x7095 = x7094 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x7095);
        reg = x7095;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7096 = arg2[77 * steps + ((cycle - 0) & mask)];
      assert(x7096 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":117:30)
      auto x7097 = x7015 + x7096;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7098 = Fp(x7097.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7098);
          reg = x7098;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7099 = Fp(x7097.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7100 = x7099 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7100);
          reg = x7100;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7101 = Fp(x7097.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7102 = x7101 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7102);
          reg = x7102;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7103 = Fp(x7097.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7104 = x7103 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7104);
          reg = x7104;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7105 = Fp(x7097.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7106 = x7105 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7106);
          reg = x7106;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7107 = Fp(x7097.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7108 = x7107 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7108);
          reg = x7108;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7109 = Fp(x7097.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7110 = x7109 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7110);
          reg = x7110;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7111 = Fp(x7097.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7112 = x7111 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7112);
          reg = x7112;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7113 = Fp(x7097.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7114 = x7113 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7114);
          reg = x7114;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7115 = Fp(x7097.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7116 = x7115 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7116);
          reg = x7116;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7117 = Fp(x7097.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7118 = x7117 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7118);
          reg = x7118;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7119 = Fp(x7097.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7120 = x7119 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7120);
          reg = x7120;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7121 = Fp(x7097.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7122 = x7121 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7122);
          reg = x7122;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7123 = Fp(x7097.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7124 = x7123 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7124);
          reg = x7124;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7125 = Fp(x7097.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7126 = x7125 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7126);
          reg = x7126;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x7127 = Fp(x7097.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x7128 = x7127 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x7128);
          reg = x7128;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7129 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x7129 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7130 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x7130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7131 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x7131 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7132 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x7132 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7133 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x7133 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7134 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x7134 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7135 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x7135 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7136 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x7136 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7137 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x7137 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7138 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x7138 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7139 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x7139 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7140 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x7140 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7141 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x7141 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7142 = arg2[31 * steps + ((cycle - 0) & mask)];
      assert(x7142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7143 = arg2[32 * steps + ((cycle - 0) & mask)];
      assert(x7143 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7144 = arg2[33 * steps + ((cycle - 0) & mask)];
      assert(x7144 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7145 = x7130 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7146 = x7131 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7147 = x7132 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7148 = x7133 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7149 = x7134 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7150 = x7135 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7151 = x7136 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7152 = x7137 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7153 = x7138 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7154 = x7139 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7155 = x7140 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7156 = x7141 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7157 = x7142 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7158 = x7143 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x7159 = x7144 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7160 = x7129 + x7145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7161 = x7160 + x7146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7162 = x7161 + x7147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7163 = x7162 + x7148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7164 = x7163 + x7149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7165 = x7164 + x7150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7166 = x7165 + x7151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7167 = x7166 + x7152;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7168 = x7167 + x7153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7169 = x7168 + x7154;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7170 = x7169 + x7155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7171 = x7170 + x7156;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7172 = x7171 + x7157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7173 = x7172 + x7158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x7174 = x7173 + x7159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x7175 = x7097 - x7174;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x7176 = x7175 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x7176);
        reg = x7176;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7177 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x7177 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7178 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x7178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7179 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x7179 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7180 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x7180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7181 = arg2[160 * steps + ((cycle - 1) & mask)];
      assert(x7181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7182 = arg2[161 * steps + ((cycle - 1) & mask)];
      assert(x7182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7183 = arg2[162 * steps + ((cycle - 1) & mask)];
      assert(x7183 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7184 = arg2[163 * steps + ((cycle - 1) & mask)];
      assert(x7184 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7185 = arg2[164 * steps + ((cycle - 1) & mask)];
      assert(x7185 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7186 = arg2[165 * steps + ((cycle - 1) & mask)];
      assert(x7186 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7187 = arg2[166 * steps + ((cycle - 1) & mask)];
      assert(x7187 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7188 = arg2[167 * steps + ((cycle - 1) & mask)];
      assert(x7188 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7189 = arg2[168 * steps + ((cycle - 1) & mask)];
      assert(x7189 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7190 = arg2[169 * steps + ((cycle - 1) & mask)];
      assert(x7190 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7191 = arg2[170 * steps + ((cycle - 1) & mask)];
      assert(x7191 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7192 = arg2[171 * steps + ((cycle - 1) & mask)];
      assert(x7192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7193 = arg2[172 * steps + ((cycle - 1) & mask)];
      assert(x7193 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7194 = arg2[173 * steps + ((cycle - 1) & mask)];
      assert(x7194 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7195 = arg2[174 * steps + ((cycle - 1) & mask)];
      assert(x7195 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7196 = arg2[175 * steps + ((cycle - 1) & mask)];
      assert(x7196 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7197 = arg2[176 * steps + ((cycle - 1) & mask)];
      assert(x7197 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7198 = arg2[177 * steps + ((cycle - 1) & mask)];
      assert(x7198 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7199 = arg2[178 * steps + ((cycle - 1) & mask)];
      assert(x7199 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7200 = arg2[179 * steps + ((cycle - 1) & mask)];
      assert(x7200 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7201 = arg2[180 * steps + ((cycle - 1) & mask)];
      assert(x7201 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7202 = arg2[181 * steps + ((cycle - 1) & mask)];
      assert(x7202 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7203 = arg2[182 * steps + ((cycle - 1) & mask)];
      assert(x7203 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7204 = arg2[183 * steps + ((cycle - 1) & mask)];
      assert(x7204 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7205 = arg2[184 * steps + ((cycle - 1) & mask)];
      assert(x7205 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7206 = arg2[185 * steps + ((cycle - 1) & mask)];
      assert(x7206 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7207 = arg2[186 * steps + ((cycle - 1) & mask)];
      assert(x7207 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7208 = arg2[187 * steps + ((cycle - 1) & mask)];
      assert(x7208 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7209 = arg2[188 * steps + ((cycle - 1) & mask)];
      assert(x7209 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7210 = arg2[189 * steps + ((cycle - 1) & mask)];
      assert(x7210 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7211 = arg2[190 * steps + ((cycle - 1) & mask)];
      assert(x7211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7212 = arg2[191 * steps + ((cycle - 1) & mask)];
      assert(x7212 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7213 = arg2[192 * steps + ((cycle - 1) & mask)];
      assert(x7213 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7214 = arg2[193 * steps + ((cycle - 1) & mask)];
      assert(x7214 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7215 = arg2[194 * steps + ((cycle - 1) & mask)];
      assert(x7215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7216 = arg2[195 * steps + ((cycle - 1) & mask)];
      assert(x7216 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7217 = arg2[196 * steps + ((cycle - 1) & mask)];
      assert(x7217 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7218 = arg2[197 * steps + ((cycle - 1) & mask)];
      assert(x7218 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7219 = arg2[198 * steps + ((cycle - 1) & mask)];
      assert(x7219 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7220 = arg2[199 * steps + ((cycle - 1) & mask)];
      assert(x7220 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7221 = arg2[200 * steps + ((cycle - 1) & mask)];
      assert(x7221 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7222 = arg2[201 * steps + ((cycle - 1) & mask)];
      assert(x7222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7223 = arg2[202 * steps + ((cycle - 1) & mask)];
      assert(x7223 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7224 = arg2[203 * steps + ((cycle - 1) & mask)];
      assert(x7224 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7225 = arg2[204 * steps + ((cycle - 1) & mask)];
      assert(x7225 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7226 = arg2[205 * steps + ((cycle - 1) & mask)];
      assert(x7226 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7227 = arg2[206 * steps + ((cycle - 1) & mask)];
      assert(x7227 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7228 = arg2[207 * steps + ((cycle - 1) & mask)];
      assert(x7228 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7229 = arg2[208 * steps + ((cycle - 1) & mask)];
      assert(x7229 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7230 = arg2[209 * steps + ((cycle - 1) & mask)];
      assert(x7230 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7231 = arg2[210 * steps + ((cycle - 1) & mask)];
      assert(x7231 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7232 = arg2[211 * steps + ((cycle - 1) & mask)];
      assert(x7232 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7233 = arg2[212 * steps + ((cycle - 1) & mask)];
      assert(x7233 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7234 = arg2[213 * steps + ((cycle - 1) & mask)];
      assert(x7234 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7235 = arg2[214 * steps + ((cycle - 1) & mask)];
      assert(x7235 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7236 = arg2[215 * steps + ((cycle - 1) & mask)];
      assert(x7236 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7237 = arg2[216 * steps + ((cycle - 1) & mask)];
      assert(x7237 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7238 = arg2[217 * steps + ((cycle - 1) & mask)];
      assert(x7238 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7239 = arg2[218 * steps + ((cycle - 1) & mask)];
      assert(x7239 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7240 = arg2[219 * steps + ((cycle - 1) & mask)];
      assert(x7240 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7241 = arg2[220 * steps + ((cycle - 1) & mask)];
      assert(x7241 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7242 = arg2[221 * steps + ((cycle - 1) & mask)];
      assert(x7242 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7243 = arg2[222 * steps + ((cycle - 1) & mask)];
      assert(x7243 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7244 = arg2[223 * steps + ((cycle - 1) & mask)];
      assert(x7244 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7245 = arg2[192 * steps + ((cycle - 2) & mask)];
      assert(x7245 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7246 = arg2[193 * steps + ((cycle - 2) & mask)];
      assert(x7246 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7247 = arg2[194 * steps + ((cycle - 2) & mask)];
      assert(x7247 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7248 = arg2[195 * steps + ((cycle - 2) & mask)];
      assert(x7248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7249 = arg2[196 * steps + ((cycle - 2) & mask)];
      assert(x7249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7250 = arg2[197 * steps + ((cycle - 2) & mask)];
      assert(x7250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7251 = arg2[198 * steps + ((cycle - 2) & mask)];
      assert(x7251 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7252 = arg2[199 * steps + ((cycle - 2) & mask)];
      assert(x7252 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7253 = arg2[200 * steps + ((cycle - 2) & mask)];
      assert(x7253 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7254 = arg2[201 * steps + ((cycle - 2) & mask)];
      assert(x7254 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7255 = arg2[202 * steps + ((cycle - 2) & mask)];
      assert(x7255 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7256 = arg2[203 * steps + ((cycle - 2) & mask)];
      assert(x7256 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7257 = arg2[204 * steps + ((cycle - 2) & mask)];
      assert(x7257 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7258 = arg2[205 * steps + ((cycle - 2) & mask)];
      assert(x7258 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7259 = arg2[206 * steps + ((cycle - 2) & mask)];
      assert(x7259 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7260 = arg2[207 * steps + ((cycle - 2) & mask)];
      assert(x7260 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7261 = arg2[208 * steps + ((cycle - 2) & mask)];
      assert(x7261 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7262 = arg2[209 * steps + ((cycle - 2) & mask)];
      assert(x7262 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7263 = arg2[210 * steps + ((cycle - 2) & mask)];
      assert(x7263 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7264 = arg2[211 * steps + ((cycle - 2) & mask)];
      assert(x7264 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7265 = arg2[212 * steps + ((cycle - 2) & mask)];
      assert(x7265 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7266 = arg2[213 * steps + ((cycle - 2) & mask)];
      assert(x7266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7267 = arg2[214 * steps + ((cycle - 2) & mask)];
      assert(x7267 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7268 = arg2[215 * steps + ((cycle - 2) & mask)];
      assert(x7268 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7269 = arg2[216 * steps + ((cycle - 2) & mask)];
      assert(x7269 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7270 = arg2[217 * steps + ((cycle - 2) & mask)];
      assert(x7270 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7271 = arg2[218 * steps + ((cycle - 2) & mask)];
      assert(x7271 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7272 = arg2[219 * steps + ((cycle - 2) & mask)];
      assert(x7272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7273 = arg2[220 * steps + ((cycle - 2) & mask)];
      assert(x7273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7274 = arg2[221 * steps + ((cycle - 2) & mask)];
      assert(x7274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7275 = arg2[222 * steps + ((cycle - 2) & mask)];
      assert(x7275 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7276 = arg2[223 * steps + ((cycle - 2) & mask)];
      assert(x7276 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7277 = arg2[160 * steps + ((cycle - 2) & mask)];
      assert(x7277 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7278 = arg2[161 * steps + ((cycle - 2) & mask)];
      assert(x7278 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7279 = arg2[162 * steps + ((cycle - 2) & mask)];
      assert(x7279 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7280 = arg2[163 * steps + ((cycle - 2) & mask)];
      assert(x7280 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7281 = arg2[164 * steps + ((cycle - 2) & mask)];
      assert(x7281 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7282 = arg2[165 * steps + ((cycle - 2) & mask)];
      assert(x7282 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7283 = arg2[166 * steps + ((cycle - 2) & mask)];
      assert(x7283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7284 = arg2[167 * steps + ((cycle - 2) & mask)];
      assert(x7284 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7285 = arg2[168 * steps + ((cycle - 2) & mask)];
      assert(x7285 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7286 = arg2[169 * steps + ((cycle - 2) & mask)];
      assert(x7286 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7287 = arg2[170 * steps + ((cycle - 2) & mask)];
      assert(x7287 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7288 = arg2[171 * steps + ((cycle - 2) & mask)];
      assert(x7288 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7289 = arg2[172 * steps + ((cycle - 2) & mask)];
      assert(x7289 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7290 = arg2[173 * steps + ((cycle - 2) & mask)];
      assert(x7290 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7291 = arg2[174 * steps + ((cycle - 2) & mask)];
      assert(x7291 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7292 = arg2[175 * steps + ((cycle - 2) & mask)];
      assert(x7292 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7293 = arg2[176 * steps + ((cycle - 2) & mask)];
      assert(x7293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7294 = arg2[177 * steps + ((cycle - 2) & mask)];
      assert(x7294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7295 = arg2[178 * steps + ((cycle - 2) & mask)];
      assert(x7295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7296 = arg2[179 * steps + ((cycle - 2) & mask)];
      assert(x7296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7297 = arg2[180 * steps + ((cycle - 2) & mask)];
      assert(x7297 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7298 = arg2[181 * steps + ((cycle - 2) & mask)];
      assert(x7298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7299 = arg2[182 * steps + ((cycle - 2) & mask)];
      assert(x7299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7300 = arg2[183 * steps + ((cycle - 2) & mask)];
      assert(x7300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7301 = arg2[184 * steps + ((cycle - 2) & mask)];
      assert(x7301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7302 = arg2[185 * steps + ((cycle - 2) & mask)];
      assert(x7302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7303 = arg2[186 * steps + ((cycle - 2) & mask)];
      assert(x7303 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7304 = arg2[187 * steps + ((cycle - 2) & mask)];
      assert(x7304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7305 = arg2[188 * steps + ((cycle - 2) & mask)];
      assert(x7305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7306 = arg2[189 * steps + ((cycle - 2) & mask)];
      assert(x7306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7307 = arg2[190 * steps + ((cycle - 2) & mask)];
      assert(x7307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7308 = arg2[191 * steps + ((cycle - 2) & mask)];
      assert(x7308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7309 = arg2[192 * steps + ((cycle - 3) & mask)];
      assert(x7309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7310 = arg2[193 * steps + ((cycle - 3) & mask)];
      assert(x7310 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7311 = arg2[194 * steps + ((cycle - 3) & mask)];
      assert(x7311 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7312 = arg2[195 * steps + ((cycle - 3) & mask)];
      assert(x7312 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7313 = arg2[196 * steps + ((cycle - 3) & mask)];
      assert(x7313 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7314 = arg2[197 * steps + ((cycle - 3) & mask)];
      assert(x7314 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7315 = arg2[198 * steps + ((cycle - 3) & mask)];
      assert(x7315 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7316 = arg2[199 * steps + ((cycle - 3) & mask)];
      assert(x7316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7317 = arg2[200 * steps + ((cycle - 3) & mask)];
      assert(x7317 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7318 = arg2[201 * steps + ((cycle - 3) & mask)];
      assert(x7318 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7319 = arg2[202 * steps + ((cycle - 3) & mask)];
      assert(x7319 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7320 = arg2[203 * steps + ((cycle - 3) & mask)];
      assert(x7320 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7321 = arg2[204 * steps + ((cycle - 3) & mask)];
      assert(x7321 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7322 = arg2[205 * steps + ((cycle - 3) & mask)];
      assert(x7322 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7323 = arg2[206 * steps + ((cycle - 3) & mask)];
      assert(x7323 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7324 = arg2[207 * steps + ((cycle - 3) & mask)];
      assert(x7324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7325 = arg2[208 * steps + ((cycle - 3) & mask)];
      assert(x7325 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7326 = arg2[209 * steps + ((cycle - 3) & mask)];
      assert(x7326 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7327 = arg2[210 * steps + ((cycle - 3) & mask)];
      assert(x7327 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7328 = arg2[211 * steps + ((cycle - 3) & mask)];
      assert(x7328 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7329 = arg2[212 * steps + ((cycle - 3) & mask)];
      assert(x7329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7330 = arg2[213 * steps + ((cycle - 3) & mask)];
      assert(x7330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7331 = arg2[214 * steps + ((cycle - 3) & mask)];
      assert(x7331 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7332 = arg2[215 * steps + ((cycle - 3) & mask)];
      assert(x7332 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7333 = arg2[216 * steps + ((cycle - 3) & mask)];
      assert(x7333 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7334 = arg2[217 * steps + ((cycle - 3) & mask)];
      assert(x7334 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7335 = arg2[218 * steps + ((cycle - 3) & mask)];
      assert(x7335 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7336 = arg2[219 * steps + ((cycle - 3) & mask)];
      assert(x7336 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7337 = arg2[220 * steps + ((cycle - 3) & mask)];
      assert(x7337 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7338 = arg2[221 * steps + ((cycle - 3) & mask)];
      assert(x7338 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7339 = arg2[222 * steps + ((cycle - 3) & mask)];
      assert(x7339 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7340 = arg2[223 * steps + ((cycle - 3) & mask)];
      assert(x7340 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7341 = arg2[160 * steps + ((cycle - 3) & mask)];
      assert(x7341 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7342 = arg2[161 * steps + ((cycle - 3) & mask)];
      assert(x7342 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7343 = arg2[162 * steps + ((cycle - 3) & mask)];
      assert(x7343 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7344 = arg2[163 * steps + ((cycle - 3) & mask)];
      assert(x7344 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7345 = arg2[164 * steps + ((cycle - 3) & mask)];
      assert(x7345 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7346 = arg2[165 * steps + ((cycle - 3) & mask)];
      assert(x7346 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7347 = arg2[166 * steps + ((cycle - 3) & mask)];
      assert(x7347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7348 = arg2[167 * steps + ((cycle - 3) & mask)];
      assert(x7348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7349 = arg2[168 * steps + ((cycle - 3) & mask)];
      assert(x7349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7350 = arg2[169 * steps + ((cycle - 3) & mask)];
      assert(x7350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7351 = arg2[170 * steps + ((cycle - 3) & mask)];
      assert(x7351 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7352 = arg2[171 * steps + ((cycle - 3) & mask)];
      assert(x7352 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7353 = arg2[172 * steps + ((cycle - 3) & mask)];
      assert(x7353 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7354 = arg2[173 * steps + ((cycle - 3) & mask)];
      assert(x7354 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7355 = arg2[174 * steps + ((cycle - 3) & mask)];
      assert(x7355 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7356 = arg2[175 * steps + ((cycle - 3) & mask)];
      assert(x7356 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7357 = arg2[176 * steps + ((cycle - 3) & mask)];
      assert(x7357 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7358 = arg2[177 * steps + ((cycle - 3) & mask)];
      assert(x7358 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7359 = arg2[178 * steps + ((cycle - 3) & mask)];
      assert(x7359 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7360 = arg2[179 * steps + ((cycle - 3) & mask)];
      assert(x7360 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7361 = arg2[180 * steps + ((cycle - 3) & mask)];
      assert(x7361 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7362 = arg2[181 * steps + ((cycle - 3) & mask)];
      assert(x7362 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7363 = arg2[182 * steps + ((cycle - 3) & mask)];
      assert(x7363 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7364 = arg2[183 * steps + ((cycle - 3) & mask)];
      assert(x7364 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7365 = arg2[184 * steps + ((cycle - 3) & mask)];
      assert(x7365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7366 = arg2[185 * steps + ((cycle - 3) & mask)];
      assert(x7366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7367 = arg2[186 * steps + ((cycle - 3) & mask)];
      assert(x7367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7368 = arg2[187 * steps + ((cycle - 3) & mask)];
      assert(x7368 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7369 = arg2[188 * steps + ((cycle - 3) & mask)];
      assert(x7369 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7370 = arg2[189 * steps + ((cycle - 3) & mask)];
      assert(x7370 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7371 = arg2[190 * steps + ((cycle - 3) & mask)];
      assert(x7371 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7372 = arg2[191 * steps + ((cycle - 3) & mask)];
      assert(x7372 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7373 = arg2[160 * steps + ((cycle - 4) & mask)];
      assert(x7373 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7374 = arg2[161 * steps + ((cycle - 4) & mask)];
      assert(x7374 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7375 = arg2[162 * steps + ((cycle - 4) & mask)];
      assert(x7375 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7376 = arg2[163 * steps + ((cycle - 4) & mask)];
      assert(x7376 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7377 = arg2[164 * steps + ((cycle - 4) & mask)];
      assert(x7377 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7378 = arg2[165 * steps + ((cycle - 4) & mask)];
      assert(x7378 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7379 = arg2[166 * steps + ((cycle - 4) & mask)];
      assert(x7379 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7380 = arg2[167 * steps + ((cycle - 4) & mask)];
      assert(x7380 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7381 = arg2[168 * steps + ((cycle - 4) & mask)];
      assert(x7381 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7382 = arg2[169 * steps + ((cycle - 4) & mask)];
      assert(x7382 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7383 = arg2[170 * steps + ((cycle - 4) & mask)];
      assert(x7383 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7384 = arg2[171 * steps + ((cycle - 4) & mask)];
      assert(x7384 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7385 = arg2[172 * steps + ((cycle - 4) & mask)];
      assert(x7385 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7386 = arg2[173 * steps + ((cycle - 4) & mask)];
      assert(x7386 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7387 = arg2[174 * steps + ((cycle - 4) & mask)];
      assert(x7387 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7388 = arg2[175 * steps + ((cycle - 4) & mask)];
      assert(x7388 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7389 = arg2[176 * steps + ((cycle - 4) & mask)];
      assert(x7389 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7390 = arg2[177 * steps + ((cycle - 4) & mask)];
      assert(x7390 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7391 = arg2[178 * steps + ((cycle - 4) & mask)];
      assert(x7391 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7392 = arg2[179 * steps + ((cycle - 4) & mask)];
      assert(x7392 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7393 = arg2[180 * steps + ((cycle - 4) & mask)];
      assert(x7393 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7394 = arg2[181 * steps + ((cycle - 4) & mask)];
      assert(x7394 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7395 = arg2[182 * steps + ((cycle - 4) & mask)];
      assert(x7395 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7396 = arg2[183 * steps + ((cycle - 4) & mask)];
      assert(x7396 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7397 = arg2[184 * steps + ((cycle - 4) & mask)];
      assert(x7397 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7398 = arg2[185 * steps + ((cycle - 4) & mask)];
      assert(x7398 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7399 = arg2[186 * steps + ((cycle - 4) & mask)];
      assert(x7399 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7400 = arg2[187 * steps + ((cycle - 4) & mask)];
      assert(x7400 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7401 = arg2[188 * steps + ((cycle - 4) & mask)];
      assert(x7401 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7402 = arg2[189 * steps + ((cycle - 4) & mask)];
      assert(x7402 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7403 = arg2[190 * steps + ((cycle - 4) & mask)];
      assert(x7403 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7404 = arg2[191 * steps + ((cycle - 4) & mask)];
      assert(x7404 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7405 = arg2[192 * steps + ((cycle - 4) & mask)];
      assert(x7405 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7406 = arg2[193 * steps + ((cycle - 4) & mask)];
      assert(x7406 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7407 = arg2[194 * steps + ((cycle - 4) & mask)];
      assert(x7407 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7408 = arg2[195 * steps + ((cycle - 4) & mask)];
      assert(x7408 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7409 = arg2[196 * steps + ((cycle - 4) & mask)];
      assert(x7409 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7410 = arg2[197 * steps + ((cycle - 4) & mask)];
      assert(x7410 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7411 = arg2[198 * steps + ((cycle - 4) & mask)];
      assert(x7411 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7412 = arg2[199 * steps + ((cycle - 4) & mask)];
      assert(x7412 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7413 = arg2[200 * steps + ((cycle - 4) & mask)];
      assert(x7413 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7414 = arg2[201 * steps + ((cycle - 4) & mask)];
      assert(x7414 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7415 = arg2[202 * steps + ((cycle - 4) & mask)];
      assert(x7415 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7416 = arg2[203 * steps + ((cycle - 4) & mask)];
      assert(x7416 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7417 = arg2[204 * steps + ((cycle - 4) & mask)];
      assert(x7417 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7418 = arg2[205 * steps + ((cycle - 4) & mask)];
      assert(x7418 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7419 = arg2[206 * steps + ((cycle - 4) & mask)];
      assert(x7419 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7420 = arg2[207 * steps + ((cycle - 4) & mask)];
      assert(x7420 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7421 = arg2[208 * steps + ((cycle - 4) & mask)];
      assert(x7421 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7422 = arg2[209 * steps + ((cycle - 4) & mask)];
      assert(x7422 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7423 = arg2[210 * steps + ((cycle - 4) & mask)];
      assert(x7423 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7424 = arg2[211 * steps + ((cycle - 4) & mask)];
      assert(x7424 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7425 = arg2[212 * steps + ((cycle - 4) & mask)];
      assert(x7425 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7426 = arg2[213 * steps + ((cycle - 4) & mask)];
      assert(x7426 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7427 = arg2[214 * steps + ((cycle - 4) & mask)];
      assert(x7427 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7428 = arg2[215 * steps + ((cycle - 4) & mask)];
      assert(x7428 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7429 = arg2[216 * steps + ((cycle - 4) & mask)];
      assert(x7429 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7430 = arg2[217 * steps + ((cycle - 4) & mask)];
      assert(x7430 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7431 = arg2[218 * steps + ((cycle - 4) & mask)];
      assert(x7431 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7432 = arg2[219 * steps + ((cycle - 4) & mask)];
      assert(x7432 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7433 = arg2[220 * steps + ((cycle - 4) & mask)];
      assert(x7433 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7434 = arg2[221 * steps + ((cycle - 4) & mask)];
      assert(x7434 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7435 = arg2[222 * steps + ((cycle - 4) & mask)];
      assert(x7435 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7436 = arg2[223 * steps + ((cycle - 4) & mask)];
      assert(x7436 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7437 = x7181 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7438 = x7181 * x7277;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7439 = x7182 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7440 = x7182 * x7278;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7441 = x7183 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7442 = x7183 * x7279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7443 = x7184 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7444 = x7184 * x7280;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7445 = x7185 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7446 = x7185 * x7281;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7447 = x7186 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7448 = x7186 * x7282;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7449 = x7187 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7450 = x7187 * x7283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7451 = x7188 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7452 = x7188 * x7284;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7453 = x7189 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7454 = x7189 * x7285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7455 = x7190 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7456 = x7190 * x7286;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7457 = x7191 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7458 = x7191 * x7287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7459 = x7192 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7460 = x7192 * x7288;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7461 = x7193 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7462 = x7193 * x7289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7463 = x7194 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7464 = x7194 * x7290;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7465 = x7195 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7466 = x7195 * x7291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7467 = x7196 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7468 = x7196 * x7292;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7469 = x7197 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7470 = x7197 * x7293;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7471 = x7198 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7472 = x7198 * x7294;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7473 = x7199 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7474 = x7199 * x7295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7475 = x7200 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7476 = x7200 * x7296;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7477 = x7201 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7478 = x7201 * x7297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7479 = x7202 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7480 = x7202 * x7298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7481 = x7203 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7482 = x7203 * x7299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7483 = x7204 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7484 = x7204 * x7300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7485 = x7205 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7486 = x7205 * x7301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7487 = x7206 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7488 = x7206 * x7302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7489 = x7207 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7490 = x7207 * x7303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7491 = x7208 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7492 = x7208 * x7304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7493 = x7209 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7494 = x7209 * x7305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7495 = x7210 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7496 = x7210 * x7306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7497 = x7211 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7498 = x7211 * x7307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7499 = x7212 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7500 = x7212 * x7308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7501 = x7213 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7502 = x7213 * x7245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7503 = x7214 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7504 = x7214 * x7246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7505 = x7215 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7506 = x7215 * x7247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7507 = x7216 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7508 = x7216 * x7248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7509 = x7217 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7510 = x7217 * x7249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7511 = x7218 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7512 = x7218 * x7250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7513 = x7219 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7514 = x7219 * x7251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7515 = x7220 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7516 = x7220 * x7252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7517 = x7221 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7518 = x7221 * x7253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7519 = x7222 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7520 = x7222 * x7254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7521 = x7223 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7522 = x7223 * x7255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7523 = x7224 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7524 = x7224 * x7256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7525 = x7225 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7526 = x7225 * x7257;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7527 = x7226 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7528 = x7226 * x7258;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7529 = x7227 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7530 = x7227 * x7259;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7531 = x7228 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7532 = x7228 * x7260;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7533 = x7229 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7534 = x7229 * x7261;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7535 = x7230 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7536 = x7230 * x7262;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7537 = x7231 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7538 = x7231 * x7263;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7539 = x7232 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7540 = x7232 * x7264;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7541 = x7233 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7542 = x7233 * x7265;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7543 = x7234 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7544 = x7234 * x7266;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7545 = x7235 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7546 = x7235 * x7267;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7547 = x7236 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7548 = x7236 * x7268;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7549 = x7237 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7550 = x7237 * x7269;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7551 = x7238 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7552 = x7238 * x7270;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7553 = x7239 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7554 = x7239 * x7271;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7555 = x7240 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7556 = x7240 * x7272;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7557 = x7241 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7558 = x7241 * x7273;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7559 = x7242 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7560 = x7242 * x7274;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7561 = x7243 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7562 = x7243 * x7275;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7563 = x7244 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x7564 = x7244 * x7276;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:26)
      auto x7565 = x7178 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:61)
      auto x7566 = x7180 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7567 = x7374 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7568 = x7375 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7569 = x7376 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7570 = x7377 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7571 = x7378 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7572 = x7379 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7573 = x7380 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7574 = x7381 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7575 = x7382 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7576 = x7383 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7577 = x7384 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7578 = x7385 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7579 = x7386 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7580 = x7387 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7581 = x7388 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7582 = x7390 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7583 = x7391 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7584 = x7392 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7585 = x7393 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7586 = x7394 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7587 = x7395 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7588 = x7396 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7589 = x7397 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7590 = x7398 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7591 = x7399 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7592 = x7400 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7593 = x7401 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7594 = x7402 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7595 = x7403 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7596 = x7404 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7597 = x7406 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7598 = x7407 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7599 = x7408 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7600 = x7409 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7601 = x7410 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7602 = x7411 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7603 = x7412 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7604 = x7413 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7605 = x7414 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7606 = x7415 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7607 = x7416 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7608 = x7417 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7609 = x7418 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7610 = x7419 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7611 = x7420 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7612 = x7422 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7613 = x7423 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7614 = x7424 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7615 = x7425 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7616 = x7426 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7617 = x7427 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7618 = x7428 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7619 = x7429 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7620 = x7430 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7621 = x7431 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7622 = x7432 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7623 = x7433 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7624 = x7434 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7625 = x7435 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x7626 = x7436 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7627 = x7437 * x7190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7628 = x7438 * x7341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7629 = x7439 * x7191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7630 = x7440 * x7342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7631 = x7441 * x7192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7632 = x7442 * x7343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7633 = x7443 * x7193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7634 = x7444 * x7344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7635 = x7445 * x7194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7636 = x7446 * x7345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7637 = x7447 * x7195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7638 = x7448 * x7346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7639 = x7449 * x7196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7640 = x7450 * x7347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7641 = x7451 * x7197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7642 = x7452 * x7348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7643 = x7453 * x7198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7644 = x7454 * x7349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7645 = x7455 * x7199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7646 = x7456 * x7350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7647 = x7457 * x7200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7648 = x7458 * x7351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7649 = x7459 * x7201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7650 = x7460 * x7352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7651 = x7461 * x7202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7652 = x7462 * x7353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7653 = x7463 * x7203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7654 = x7464 * x7354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7655 = x7465 * x7204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7656 = x7466 * x7355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7657 = x7467 * x7205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7658 = x7468 * x7356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7659 = x7469 * x7206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7660 = x7470 * x7357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7661 = x7471 * x7207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7662 = x7472 * x7358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7663 = x7473 * x7208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7664 = x7474 * x7359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7665 = x7475 * x7209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7666 = x7476 * x7360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7667 = x7477 * x7210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7668 = x7478 * x7361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7669 = x7479 * x7211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7670 = x7480 * x7362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7671 = x7481 * x7212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7672 = x7482 * x7363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7673 = x7483 * x7181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7674 = x7484 * x7364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7675 = x7485 * x7182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7676 = x7486 * x7365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7677 = x7487 * x7183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7678 = x7488 * x7366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7679 = x7489 * x7184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7680 = x7490 * x7367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7681 = x7491 * x7185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7682 = x7492 * x7368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7683 = x7493 * x7186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7684 = x7494 * x7369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7685 = x7495 * x7187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7686 = x7496 * x7370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7687 = x7497 * x7188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7688 = x7498 * x7371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7689 = x7499 * x7189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x7690 = x7500 * x7372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7691 = x7501 * x7227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7692 = x7503 * x7228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7693 = x7505 * x7229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7694 = x7507 * x7230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7695 = x7509 * x7231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7696 = x7511 * x7232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7697 = x7513 * x7233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7698 = x7515 * x7234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7699 = x7517 * x7235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7700 = x7519 * x7236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7701 = x7521 * x7237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7702 = x7523 * x7238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7703 = x7525 * x7239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7704 = x7527 * x7240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7705 = x7529 * x7241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7706 = x7531 * x7242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7707 = x7533 * x7243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7708 = x7535 * x7244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7709 = x7537 * x7213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7710 = x7539 * x7214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7711 = x7541 * x7215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7712 = x7543 * x7216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7713 = x7545 * x7217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7714 = x7547 * x7218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7715 = x7549 * x7219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7716 = x7551 * x7220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7717 = x7553 * x7221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7718 = x7555 * x7222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7719 = x7557 * x7223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7720 = x7559 * x7224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7721 = x7561 * x7225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x7722 = x7563 * x7226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7723 = x99 - x7181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7724 = x99 - x7182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7725 = x99 - x7183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7726 = x99 - x7184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7727 = x99 - x7185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7728 = x99 - x7186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7729 = x99 - x7187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7730 = x99 - x7188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7731 = x99 - x7189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7732 = x99 - x7190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7733 = x99 - x7191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7734 = x99 - x7192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7735 = x99 - x7193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7736 = x99 - x7194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7737 = x99 - x7195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7738 = x99 - x7196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7739 = x99 - x7197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7740 = x99 - x7198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7741 = x99 - x7199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7742 = x99 - x7200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7743 = x99 - x7201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7744 = x99 - x7202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7745 = x99 - x7203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7746 = x99 - x7204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7747 = x99 - x7205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7748 = x99 - x7206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7749 = x99 - x7207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7750 = x99 - x7208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7751 = x99 - x7209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7752 = x99 - x7210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7753 = x99 - x7211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x7754 = x99 - x7212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7755 = x99 - x7213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7756 = x99 - x7214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7757 = x99 - x7215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7758 = x99 - x7216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7759 = x99 - x7217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7760 = x99 - x7218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7761 = x99 - x7219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7762 = x99 - x7220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7763 = x99 - x7221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7764 = x99 - x7222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7765 = x99 - x7223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7766 = x99 - x7224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7767 = x99 - x7225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7768 = x99 - x7226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7769 = x99 - x7227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7770 = x99 - x7228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7771 = x99 - x7229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7772 = x99 - x7230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7773 = x99 - x7231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7774 = x99 - x7232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7775 = x99 - x7233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7776 = x99 - x7234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7777 = x99 - x7235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7778 = x99 - x7236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7779 = x99 - x7237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7780 = x99 - x7238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7781 = x99 - x7239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7782 = x99 - x7240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7783 = x99 - x7241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7784 = x99 - x7242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7785 = x99 - x7243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x7786 = x99 - x7244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7787 = x99 - x7277;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7788 = x99 - x7278;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7789 = x99 - x7279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7790 = x99 - x7280;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7791 = x99 - x7281;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7792 = x99 - x7282;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7793 = x99 - x7283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7794 = x99 - x7284;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7795 = x99 - x7285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7796 = x99 - x7286;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7797 = x99 - x7287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7798 = x99 - x7288;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7799 = x99 - x7289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7800 = x99 - x7290;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7801 = x99 - x7291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7802 = x99 - x7292;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7803 = x99 - x7293;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7804 = x99 - x7294;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7805 = x99 - x7295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7806 = x99 - x7296;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7807 = x99 - x7297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7808 = x99 - x7298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7809 = x99 - x7299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7810 = x99 - x7300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7811 = x99 - x7301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7812 = x99 - x7302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7813 = x99 - x7303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7814 = x99 - x7304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7815 = x99 - x7305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7816 = x99 - x7306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7817 = x99 - x7307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x7818 = x99 - x7308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7819 = x99 - x7341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7820 = x99 - x7342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7821 = x99 - x7343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7822 = x99 - x7344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7823 = x99 - x7345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7824 = x99 - x7346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7825 = x99 - x7347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7826 = x99 - x7348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7827 = x99 - x7349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7828 = x99 - x7350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7829 = x99 - x7351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7830 = x99 - x7352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7831 = x99 - x7353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7832 = x99 - x7354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7833 = x99 - x7355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7834 = x99 - x7356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7835 = x99 - x7357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7836 = x99 - x7358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7837 = x99 - x7359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7838 = x99 - x7360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7839 = x99 - x7361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7840 = x99 - x7362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7841 = x99 - x7363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7842 = x99 - x7364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7843 = x99 - x7365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7844 = x99 - x7366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7845 = x99 - x7367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7846 = x99 - x7368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7847 = x99 - x7369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7848 = x99 - x7370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7849 = x99 - x7371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x7850 = x99 - x7372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:11)
      auto x7851 = x7177 + x7565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:46)
      auto x7852 = x7179 + x7566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7853 = x7181 + x7190;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7854 = x7182 + x7191;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7855 = x7183 + x7192;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7856 = x7184 + x7193;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7857 = x7185 + x7194;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7858 = x7186 + x7195;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7859 = x7187 + x7196;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7860 = x7188 + x7197;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7861 = x7189 + x7198;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7862 = x7190 + x7199;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7863 = x7191 + x7200;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7864 = x7192 + x7201;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7865 = x7193 + x7202;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7866 = x7194 + x7203;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7867 = x7195 + x7204;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7868 = x7196 + x7205;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7869 = x7197 + x7206;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7870 = x7198 + x7207;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7871 = x7199 + x7208;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7872 = x7200 + x7209;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7873 = x7201 + x7210;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7874 = x7202 + x7211;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7875 = x7203 + x7212;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7876 = x7204 + x7181;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7877 = x7205 + x7182;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7878 = x7206 + x7183;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7879 = x7207 + x7184;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7880 = x7208 + x7185;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7881 = x7209 + x7186;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7882 = x7210 + x7187;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7883 = x7211 + x7188;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7884 = x7212 + x7189;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7885 = x7213 + x7227;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7886 = x7214 + x7228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7887 = x7215 + x7229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7888 = x7216 + x7230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7889 = x7217 + x7231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7890 = x7218 + x7232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7891 = x7219 + x7233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7892 = x7220 + x7234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7893 = x7221 + x7235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7894 = x7222 + x7236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7895 = x7223 + x7237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7896 = x7224 + x7238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7897 = x7225 + x7239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7898 = x7226 + x7240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7899 = x7227 + x7241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7900 = x7228 + x7242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7901 = x7229 + x7243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7902 = x7230 + x7244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7903 = x7231 + x7213;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7904 = x7232 + x7214;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7905 = x7233 + x7215;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7906 = x7234 + x7216;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7907 = x7235 + x7217;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7908 = x7236 + x7218;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7909 = x7237 + x7219;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7910 = x7238 + x7220;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7911 = x7239 + x7221;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7912 = x7240 + x7222;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7913 = x7241 + x7223;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7914 = x7242 + x7224;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7915 = x7243 + x7225;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x7916 = x7244 + x7226;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7917 = x7181 * x7787;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7918 = x7182 * x7788;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7919 = x7183 * x7789;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7920 = x7184 * x7790;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7921 = x7185 * x7791;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7922 = x7186 * x7792;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7923 = x7187 * x7793;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7924 = x7188 * x7794;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7925 = x7189 * x7795;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7926 = x7190 * x7796;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7927 = x7191 * x7797;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7928 = x7192 * x7798;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7929 = x7193 * x7799;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7930 = x7194 * x7800;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7931 = x7195 * x7801;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7932 = x7196 * x7802;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7933 = x7197 * x7803;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7934 = x7198 * x7804;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7935 = x7199 * x7805;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7936 = x7200 * x7806;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7937 = x7201 * x7807;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7938 = x7202 * x7808;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7939 = x7203 * x7809;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7940 = x7204 * x7810;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7941 = x7205 * x7811;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7942 = x7206 * x7812;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7943 = x7207 * x7813;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7944 = x7208 * x7814;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7945 = x7209 * x7815;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7946 = x7210 * x7816;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7947 = x7211 * x7817;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x7948 = x7212 * x7818;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7949 = x7438 * x7819;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7950 = x7440 * x7820;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7951 = x7442 * x7821;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7952 = x7444 * x7822;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7953 = x7446 * x7823;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7954 = x7448 * x7824;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7955 = x7450 * x7825;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7956 = x7452 * x7826;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7957 = x7454 * x7827;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7958 = x7456 * x7828;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7959 = x7458 * x7829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7960 = x7460 * x7830;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7961 = x7462 * x7831;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7962 = x7464 * x7832;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7963 = x7466 * x7833;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7964 = x7468 * x7834;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7965 = x7470 * x7835;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7966 = x7472 * x7836;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7967 = x7474 * x7837;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7968 = x7476 * x7838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7969 = x7478 * x7839;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7970 = x7480 * x7840;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7971 = x7482 * x7841;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7972 = x7484 * x7842;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7973 = x7486 * x7843;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7974 = x7488 * x7844;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7975 = x7490 * x7845;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7976 = x7492 * x7846;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7977 = x7494 * x7847;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7978 = x7496 * x7848;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7979 = x7498 * x7849;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x7980 = x7500 * x7850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7981 = x7723 * x7277;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7982 = x7724 * x7278;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7983 = x7725 * x7279;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7984 = x7726 * x7280;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7985 = x7727 * x7281;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7986 = x7728 * x7282;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7987 = x7729 * x7283;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7988 = x7730 * x7284;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7989 = x7731 * x7285;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7990 = x7732 * x7286;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7991 = x7733 * x7287;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7992 = x7734 * x7288;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7993 = x7735 * x7289;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7994 = x7736 * x7290;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7995 = x7737 * x7291;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7996 = x7738 * x7292;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7997 = x7739 * x7293;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7998 = x7740 * x7294;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x7999 = x7741 * x7295;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8000 = x7742 * x7296;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8001 = x7743 * x7297;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8002 = x7744 * x7298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8003 = x7745 * x7299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8004 = x7746 * x7300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8005 = x7747 * x7301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8006 = x7748 * x7302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8007 = x7749 * x7303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8008 = x7750 * x7304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8009 = x7751 * x7305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8010 = x7752 * x7306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8011 = x7753 * x7307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8012 = x7754 * x7308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8013 = x7917 * x7341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8014 = x7918 * x7342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8015 = x7919 * x7343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8016 = x7920 * x7344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8017 = x7921 * x7345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8018 = x7922 * x7346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8019 = x7923 * x7347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8020 = x7924 * x7348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8021 = x7925 * x7349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8022 = x7926 * x7350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8023 = x7927 * x7351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8024 = x7928 * x7352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8025 = x7929 * x7353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8026 = x7930 * x7354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8027 = x7931 * x7355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8028 = x7932 * x7356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8029 = x7933 * x7357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8030 = x7934 * x7358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8031 = x7935 * x7359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8032 = x7936 * x7360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8033 = x7937 * x7361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8034 = x7938 * x7362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8035 = x7939 * x7363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8036 = x7940 * x7364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8037 = x7941 * x7365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8038 = x7942 * x7366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8039 = x7943 * x7367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8040 = x7944 * x7368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8041 = x7945 * x7369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8042 = x7946 * x7370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8043 = x7947 * x7371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x8044 = x7948 * x7372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8045 = x7981 * x7341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8046 = x7982 * x7342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8047 = x7983 * x7343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8048 = x7984 * x7344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8049 = x7985 * x7345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8050 = x7986 * x7346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8051 = x7987 * x7347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8052 = x7988 * x7348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8053 = x7989 * x7349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8054 = x7990 * x7350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8055 = x7991 * x7351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8056 = x7992 * x7352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8057 = x7993 * x7353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8058 = x7994 * x7354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8059 = x7995 * x7355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8060 = x7996 * x7356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8061 = x7997 * x7357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8062 = x7998 * x7358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8063 = x7999 * x7359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8064 = x8000 * x7360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8065 = x8001 * x7361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8066 = x8002 * x7362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8067 = x8003 * x7363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8068 = x8004 * x7364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8069 = x8005 * x7365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8070 = x8006 * x7366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8071 = x8007 * x7367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8072 = x8008 * x7368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8073 = x8009 * x7369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8074 = x8010 * x7370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8075 = x8011 * x7371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x8076 = x8012 * x7372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8077 = x7755 * x7309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8078 = x7756 * x7310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8079 = x7757 * x7311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8080 = x7758 * x7312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8081 = x7759 * x7313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8082 = x7760 * x7314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8083 = x7761 * x7315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8084 = x7762 * x7316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8085 = x7763 * x7317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8086 = x7764 * x7318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8087 = x7765 * x7319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8088 = x7766 * x7320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8089 = x7767 * x7321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8090 = x7768 * x7322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8091 = x7769 * x7323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8092 = x7770 * x7324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8093 = x7771 * x7325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8094 = x7772 * x7326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8095 = x7773 * x7327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8096 = x7774 * x7328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8097 = x7775 * x7329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8098 = x7776 * x7330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8099 = x7777 * x7331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8100 = x7778 * x7332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8101 = x7779 * x7333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8102 = x7780 * x7334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8103 = x7781 * x7335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8104 = x7782 * x7336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8105 = x7783 * x7337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8106 = x7784 * x7338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8107 = x7785 * x7339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x8108 = x7786 * x7340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8109 = x7853 - x7627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8110 = x7854 - x7629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8111 = x7855 - x7631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8112 = x7856 - x7633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8113 = x7857 - x7635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8114 = x7858 - x7637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8115 = x7859 - x7639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8116 = x7860 - x7641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8117 = x7861 - x7643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8118 = x7862 - x7645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8119 = x7863 - x7647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8120 = x7864 - x7649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8121 = x7865 - x7651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8122 = x7866 - x7653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8123 = x7867 - x7655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8124 = x7868 - x7657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8125 = x7869 - x7659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8126 = x7870 - x7661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8127 = x7871 - x7663;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8128 = x7872 - x7665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8129 = x7873 - x7667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8130 = x7874 - x7669;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8131 = x7875 - x7671;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8132 = x7876 - x7673;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8133 = x7877 - x7675;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8134 = x7878 - x7677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8135 = x7879 - x7679;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8136 = x7880 - x7681;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8137 = x7881 - x7683;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8138 = x7882 - x7685;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8139 = x7883 - x7687;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8140 = x7884 - x7689;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8141 = x7885 - x7691;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8142 = x7886 - x7692;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8143 = x7887 - x7693;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8144 = x7888 - x7694;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8145 = x7889 - x7695;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8146 = x7890 - x7696;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8147 = x7891 - x7697;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8148 = x7892 - x7698;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8149 = x7893 - x7699;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8150 = x7894 - x7700;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8151 = x7895 - x7701;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8152 = x7896 - x7702;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8153 = x7897 - x7703;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8154 = x7898 - x7704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8155 = x7899 - x7705;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8156 = x7900 - x7706;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8157 = x7901 - x7707;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8158 = x7902 - x7708;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8159 = x7903 - x7709;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8160 = x7904 - x7710;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8161 = x7905 - x7711;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8162 = x7906 - x7712;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8163 = x7907 - x7713;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8164 = x7908 - x7714;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8165 = x7909 - x7715;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8166 = x7910 - x7716;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8167 = x7911 - x7717;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8168 = x7912 - x7718;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8169 = x7913 - x7719;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8170 = x7914 - x7720;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8171 = x7915 - x7721;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8172 = x7916 - x7722;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8173 = x7373 + x7567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8174 = x7389 + x7582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8175 = x7405 + x7597;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8176 = x7421 + x7612;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8177 = x7181 + x8120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8178 = x7182 + x8121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8179 = x7183 + x8122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8180 = x7184 + x8123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8181 = x7185 + x8124;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8182 = x7186 + x8125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8183 = x7187 + x8126;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8184 = x7188 + x8127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8185 = x7189 + x8128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8186 = x7190 + x8129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8187 = x7191 + x8130;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8188 = x7192 + x8131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8189 = x7193 + x8132;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8190 = x7194 + x8133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8191 = x7195 + x8134;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8192 = x7196 + x8135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8193 = x7197 + x8136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8194 = x7198 + x8137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8195 = x7199 + x8138;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8196 = x7200 + x8139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8197 = x7201 + x8140;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8198 = x7202 + x8109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8199 = x7203 + x8110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8200 = x7204 + x8111;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8201 = x7205 + x8112;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8202 = x7206 + x8113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8203 = x7207 + x8114;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8204 = x7208 + x8115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8205 = x7209 + x8116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8206 = x7210 + x8117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8207 = x7211 + x8118;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8208 = x7212 + x8119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8209 = x7213 + x8146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8210 = x7214 + x8147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8211 = x7215 + x8148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8212 = x7216 + x8149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8213 = x7217 + x8150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8214 = x7218 + x8151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8215 = x7219 + x8152;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8216 = x7220 + x8153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8217 = x7221 + x8154;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8218 = x7222 + x8155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8219 = x7223 + x8156;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8220 = x7224 + x8157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8221 = x7225 + x8158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8222 = x7226 + x8159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8223 = x7227 + x8160;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8224 = x7228 + x8161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8225 = x7229 + x8162;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8226 = x7230 + x8163;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8227 = x7231 + x8164;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8228 = x7232 + x8165;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8229 = x7233 + x8166;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8230 = x7234 + x8167;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8231 = x7235 + x8168;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8232 = x7236 + x8169;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8233 = x7237 + x8170;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8234 = x7238 + x8171;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8235 = x7239 + x8172;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8236 = x7240 + x8141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8237 = x7241 + x8142;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8238 = x7242 + x8143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8239 = x7243 + x8144;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8240 = x7244 + x8145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8241 = x7502 + x8077;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8242 = x7504 + x8078;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8243 = x7506 + x8079;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8244 = x7508 + x8080;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8245 = x7510 + x8081;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8246 = x7512 + x8082;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8247 = x7514 + x8083;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8248 = x7516 + x8084;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8249 = x7518 + x8085;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8250 = x7520 + x8086;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8251 = x7522 + x8087;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8252 = x7524 + x8088;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8253 = x7526 + x8089;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8254 = x7528 + x8090;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8255 = x7530 + x8091;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8256 = x7532 + x8092;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8257 = x7534 + x8093;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8258 = x7536 + x8094;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8259 = x7538 + x8095;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8260 = x7540 + x8096;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8261 = x7542 + x8097;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8262 = x7544 + x8098;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8263 = x7546 + x8099;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8264 = x7548 + x8100;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8265 = x7550 + x8101;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8266 = x7552 + x8102;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8267 = x7554 + x8103;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8268 = x7556 + x8104;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8269 = x7558 + x8105;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8270 = x7560 + x8106;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8271 = x7562 + x8107;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x8272 = x7564 + x8108;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8273 = x7949 + x8013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8274 = x7950 + x8014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8275 = x7951 + x8015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8276 = x7952 + x8016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8277 = x7953 + x8017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8278 = x7954 + x8018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8279 = x7955 + x8019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8280 = x7956 + x8020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8281 = x7957 + x8021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8282 = x7958 + x8022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8283 = x7959 + x8023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8284 = x7960 + x8024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8285 = x7961 + x8025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8286 = x7962 + x8026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8287 = x7963 + x8027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8288 = x7964 + x8028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8289 = x7965 + x8029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8290 = x7966 + x8030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8291 = x7967 + x8031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8292 = x7968 + x8032;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8293 = x7969 + x8033;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8294 = x7970 + x8034;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8295 = x7971 + x8035;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8296 = x7972 + x8036;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8297 = x7973 + x8037;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8298 = x7974 + x8038;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8299 = x7975 + x8039;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8300 = x7976 + x8040;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8301 = x7977 + x8041;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8302 = x7978 + x8042;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8303 = x7979 + x8043;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8304 = x7980 + x8044;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8305 = x8242 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8306 = x8243 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8307 = x8244 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8308 = x8245 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8309 = x8246 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8310 = x8247 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8311 = x8248 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8312 = x8249 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8313 = x8250 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8314 = x8251 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8315 = x8252 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8316 = x8253 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8317 = x8254 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8318 = x8255 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8319 = x8256 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8320 = x8258 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8321 = x8259 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8322 = x8260 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8323 = x8261 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8324 = x8262 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8325 = x8263 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8326 = x8264 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8327 = x8265 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8328 = x8266 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8329 = x8267 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8330 = x8268 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8331 = x8269 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8332 = x8270 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8333 = x8271 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8334 = x8272 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8335 = x7437 * x8120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8336 = x7439 * x8121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8337 = x7441 * x8122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8338 = x7443 * x8123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8339 = x7445 * x8124;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8340 = x7447 * x8125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8341 = x7449 * x8126;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8342 = x7451 * x8127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8343 = x7453 * x8128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8344 = x7455 * x8129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8345 = x7457 * x8130;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8346 = x7459 * x8131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8347 = x7461 * x8132;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8348 = x7463 * x8133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8349 = x7465 * x8134;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8350 = x7467 * x8135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8351 = x7469 * x8136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8352 = x7471 * x8137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8353 = x7473 * x8138;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8354 = x7475 * x8139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8355 = x7477 * x8140;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8356 = x7479 * x8109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8357 = x7481 * x8110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8358 = x7483 * x8111;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8359 = x7485 * x8112;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8360 = x7487 * x8113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8361 = x7489 * x8114;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8362 = x7491 * x8115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8363 = x7493 * x8116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8364 = x7495 * x8117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8365 = x7497 * x8118;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8366 = x7499 * x8119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8367 = x7501 * x8146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8368 = x7503 * x8147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8369 = x7505 * x8148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8370 = x7507 * x8149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8371 = x7509 * x8150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8372 = x7511 * x8151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8373 = x7513 * x8152;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8374 = x7515 * x8153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8375 = x7517 * x8154;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8376 = x7519 * x8155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8377 = x7521 * x8156;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8378 = x7523 * x8157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8379 = x7525 * x8158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8380 = x7527 * x8159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8381 = x7529 * x8160;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8382 = x7531 * x8161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8383 = x7533 * x8162;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8384 = x7535 * x8163;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8385 = x7537 * x8164;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8386 = x7539 * x8165;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8387 = x7541 * x8166;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8388 = x7543 * x8167;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8389 = x7545 * x8168;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8390 = x7547 * x8169;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8391 = x7549 * x8170;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8392 = x7551 * x8171;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8393 = x7553 * x8172;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8394 = x7555 * x8141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8395 = x7557 * x8142;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8396 = x7559 * x8143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8397 = x7561 * x8144;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x8398 = x7563 * x8145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8399 = x8177 - x8335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8400 = x8178 - x8336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8401 = x8179 - x8337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8402 = x8180 - x8338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8403 = x8181 - x8339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8404 = x8182 - x8340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8405 = x8183 - x8341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8406 = x8184 - x8342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8407 = x8185 - x8343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8408 = x8186 - x8344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8409 = x8187 - x8345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8410 = x8188 - x8346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8411 = x8189 - x8347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8412 = x8190 - x8348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8413 = x8191 - x8349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8414 = x8192 - x8350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8415 = x8193 - x8351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8416 = x8194 - x8352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8417 = x8195 - x8353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8418 = x8196 - x8354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8419 = x8197 - x8355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8420 = x8198 - x8356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8421 = x8199 - x8357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8422 = x8200 - x8358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8423 = x8201 - x8359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8424 = x8202 - x8360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8425 = x8203 - x8361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8426 = x8204 - x8362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8427 = x8205 - x8363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8428 = x8206 - x8364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8429 = x8207 - x8365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8430 = x8208 - x8366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8431 = x8209 - x8367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8432 = x8210 - x8368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8433 = x8211 - x8369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8434 = x8212 - x8370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8435 = x8213 - x8371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8436 = x8214 - x8372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8437 = x8215 - x8373;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8438 = x8216 - x8374;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8439 = x8217 - x8375;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8440 = x8218 - x8376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8441 = x8219 - x8377;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8442 = x8220 - x8378;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8443 = x8221 - x8379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8444 = x8222 - x8380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8445 = x8223 - x8381;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8446 = x8224 - x8382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8447 = x8225 - x8383;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8448 = x8226 - x8384;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8449 = x8227 - x8385;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8450 = x8228 - x8386;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8451 = x8229 - x8387;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8452 = x8230 - x8388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8453 = x8231 - x8389;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8454 = x8232 - x8390;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8455 = x8233 - x8391;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8456 = x8234 - x8392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8457 = x8235 - x8393;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8458 = x8236 - x8394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8459 = x8237 - x8395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8460 = x8238 - x8396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8461 = x8239 - x8397;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x8462 = x8240 - x8398;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8463 = x8173 + x7568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8464 = x8174 + x7583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8465 = x8175 + x7598;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8466 = x8176 + x7613;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8467 = x8273 + x8045;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8468 = x8274 + x8046;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8469 = x8275 + x8047;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8470 = x8276 + x8048;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8471 = x8277 + x8049;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8472 = x8278 + x8050;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8473 = x8279 + x8051;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8474 = x8280 + x8052;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8475 = x8281 + x8053;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8476 = x8282 + x8054;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8477 = x8283 + x8055;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8478 = x8284 + x8056;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8479 = x8285 + x8057;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8480 = x8286 + x8058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8481 = x8287 + x8059;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8482 = x8288 + x8060;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8483 = x8289 + x8061;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8484 = x8290 + x8062;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8485 = x8291 + x8063;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8486 = x8292 + x8064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8487 = x8293 + x8065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8488 = x8294 + x8066;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8489 = x8295 + x8067;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8490 = x8296 + x8068;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8491 = x8297 + x8069;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8492 = x8298 + x8070;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8493 = x8299 + x8071;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8494 = x8300 + x8072;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8495 = x8301 + x8073;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8496 = x8302 + x8074;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8497 = x8303 + x8075;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8498 = x8304 + x8076;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8499 = x8399 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8500 = x8400 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8501 = x8402 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8502 = x8403 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8503 = x8404 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8504 = x8405 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8505 = x8406 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8506 = x8407 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8507 = x8408 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8508 = x8409 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8509 = x8410 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8510 = x8411 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8511 = x8412 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8512 = x8413 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8513 = x8414 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8514 = x8415 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8515 = x8416 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8516 = x8418 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8517 = x8419 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8518 = x8420 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8519 = x8421 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8520 = x8422 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8521 = x8423 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8522 = x8424 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8523 = x8425 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8524 = x8426 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8525 = x8427 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8526 = x8428 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8527 = x8429 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8528 = x8430 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8529 = x8431 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8530 = x8432 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8531 = x8433 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8532 = x8434 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8533 = x8435 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8534 = x8436 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8535 = x8438 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8536 = x8439 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8537 = x8440 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8538 = x8441 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8539 = x8442 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8540 = x8443 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8541 = x8444 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8542 = x8445 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8543 = x8446 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8544 = x8447 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8545 = x8448 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8546 = x8449 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8547 = x8450 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8548 = x8451 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8549 = x8452 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8550 = x8454 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8551 = x8455 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8552 = x8456 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8553 = x8457 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8554 = x8458 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8555 = x8459 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8556 = x8460 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8557 = x8461 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8558 = x8462 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8559 = x8463 + x7569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8560 = x8464 + x7584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8561 = x8465 + x7599;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8562 = x8466 + x7614;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8563 = x8467 + x7628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8564 = x8468 + x7630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8565 = x8469 + x7632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8566 = x8470 + x7634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8567 = x8471 + x7636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8568 = x8472 + x7638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8569 = x8473 + x7640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8570 = x8474 + x7642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8571 = x8475 + x7644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8572 = x8476 + x7646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8573 = x8477 + x7648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8574 = x8478 + x7650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8575 = x8479 + x7652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8576 = x8480 + x7654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8577 = x8481 + x7656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8578 = x8482 + x7658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8579 = x8483 + x7660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8580 = x8484 + x7662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8581 = x8485 + x7664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8582 = x8486 + x7666;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8583 = x8487 + x7668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8584 = x8488 + x7670;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8585 = x8489 + x7672;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8586 = x8490 + x7674;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8587 = x8491 + x7676;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8588 = x8492 + x7678;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8589 = x8493 + x7680;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8590 = x8494 + x7682;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8591 = x8495 + x7684;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8592 = x8496 + x7686;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8593 = x8497 + x7688;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x8594 = x8498 + x7690;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8595 = x8241 + x8305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8596 = x8257 + x8320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8597 = x8564 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8598 = x8565 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8599 = x8566 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8600 = x8567 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8601 = x8568 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8602 = x8569 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8603 = x8570 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8604 = x8571 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8605 = x8572 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8606 = x8573 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8607 = x8574 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8608 = x8575 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8609 = x8576 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8610 = x8577 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8611 = x8578 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8612 = x8580 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8613 = x8581 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8614 = x8582 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8615 = x8583 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8616 = x8584 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8617 = x8585 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8618 = x8586 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8619 = x8587 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8620 = x8588 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8621 = x8589 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8622 = x8590 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8623 = x8591 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8624 = x8592 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8625 = x8593 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x8626 = x8594 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8627 = x8559 + x7570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8628 = x8560 + x7585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8629 = x8561 + x7600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8630 = x8562 + x7615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8631 = x8595 + x8306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8632 = x8596 + x8321;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8633 = x8401 + x8501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8634 = x8417 + x8516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8635 = x8437 + x8535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8636 = x8453 + x8550;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8637 = x8627 + x7571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8638 = x8628 + x7586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8639 = x8629 + x7601;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8640 = x8630 + x7616;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8641 = x8631 + x8307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8642 = x8632 + x8322;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8643 = x8633 + x8502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8644 = x8634 + x8517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8645 = x8635 + x8536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8646 = x8636 + x8551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8647 = x8563 + x8597;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8648 = x8579 + x8612;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8649 = x8637 + x7572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8650 = x8638 + x7587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8651 = x8639 + x7602;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8652 = x8640 + x7617;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8653 = x8641 + x8308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8654 = x8642 + x8323;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8655 = x8643 + x8503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8656 = x8644 + x8518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8657 = x8645 + x8537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8658 = x8646 + x8552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8659 = x8647 + x8598;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8660 = x8648 + x8613;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8661 = x8649 + x7573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8662 = x8650 + x7588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8663 = x8651 + x7603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8664 = x8652 + x7618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8665 = x8653 + x8309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8666 = x8654 + x8324;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8667 = x8655 + x8504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8668 = x8656 + x8519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8669 = x8657 + x8538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8670 = x8658 + x8553;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8671 = x8659 + x8599;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8672 = x8660 + x8614;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8673 = x8661 + x7574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8674 = x8662 + x7589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8675 = x8663 + x7604;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8676 = x8664 + x7619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8677 = x8665 + x8310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8678 = x8666 + x8325;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8679 = x8667 + x8505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8680 = x8668 + x8520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8681 = x8669 + x8539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8682 = x8670 + x8554;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8683 = x8671 + x8600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8684 = x8672 + x8615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8685 = x8673 + x7575;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8686 = x8674 + x7590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8687 = x8675 + x7605;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8688 = x8676 + x7620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8689 = x8677 + x8311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8690 = x8678 + x8326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8691 = x8679 + x8506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8692 = x8680 + x8521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8693 = x8681 + x8540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8694 = x8682 + x8555;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8695 = x8683 + x8601;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8696 = x8684 + x8616;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8697 = x8685 + x7576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8698 = x8686 + x7591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8699 = x8687 + x7606;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8700 = x8688 + x7621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8701 = x8689 + x8312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8702 = x8690 + x8327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8703 = x8691 + x8507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8704 = x8692 + x8522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8705 = x8693 + x8541;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8706 = x8694 + x8556;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8707 = x8695 + x8602;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8708 = x8696 + x8617;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8709 = x8697 + x7577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8710 = x8698 + x7592;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8711 = x8699 + x7607;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8712 = x8700 + x7622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8713 = x8701 + x8313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8714 = x8702 + x8328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8715 = x8703 + x8508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8716 = x8704 + x8523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8717 = x8705 + x8542;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8718 = x8706 + x8557;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8719 = x8707 + x8603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8720 = x8708 + x8618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8721 = x8709 + x7578;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8722 = x8710 + x7593;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8723 = x8711 + x7608;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8724 = x8712 + x7623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8725 = x8713 + x8314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8726 = x8714 + x8329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8727 = x8715 + x8509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8728 = x8716 + x8524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8729 = x8717 + x8543;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8730 = x8718 + x8558;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8731 = x8719 + x8604;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8732 = x8720 + x8619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8733 = x8721 + x7579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8734 = x8722 + x7594;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8735 = x8723 + x7609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8736 = x8724 + x7624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8737 = x8725 + x8315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8738 = x8726 + x8330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8739 = x8727 + x8510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8740 = x8728 + x8525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8741 = x8729 + x8544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8742 = x8730 + x8529;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8743 = x8731 + x8605;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8744 = x8732 + x8620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8745 = x8733 + x7580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8746 = x8734 + x7595;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8747 = x8735 + x7610;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8748 = x8736 + x7625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8749 = x8737 + x8316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8750 = x8738 + x8331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8751 = x8739 + x8511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8752 = x8740 + x8526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8753 = x8741 + x8545;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8754 = x8742 + x8530;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8755 = x8743 + x8606;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8756 = x8744 + x8621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8757 = x8745 + x7581;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8758 = x8746 + x7596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8759 = x8747 + x7611;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8760 = x8748 + x7626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8761 = x8749 + x8317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8762 = x8750 + x8332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8763 = x8751 + x8512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8764 = x8752 + x8527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8765 = x8753 + x8546;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8766 = x8754 + x8531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8767 = x8755 + x8607;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8768 = x8756 + x8622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8769 = x8761 + x8318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8770 = x8762 + x8333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8771 = x8763 + x8513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8772 = x8764 + x8528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8773 = x8765 + x8547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8774 = x8766 + x8532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8775 = x8767 + x8608;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8776 = x8768 + x8623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8777 = x8769 + x8319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8778 = x8770 + x8334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8779 = x8771 + x8514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8780 = x8772 + x8499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8781 = x8773 + x8548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8782 = x8774 + x8533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8783 = x8775 + x8609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8784 = x8776 + x8624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8785 = x8779 + x8515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8786 = x8780 + x8500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8787 = x8781 + x8549;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8788 = x8782 + x8534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8789 = x8783 + x8610;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8790 = x8784 + x8625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8791 = x8777 + x8787;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8792 = x8778 + x8788;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8793 = x8759 + x8791;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8794 = x8760 + x8792;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8795 = x7851 + x8793;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8796 = x7852 + x8794;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8797 = x7174 + x8796;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8798 = x7093 + x8795;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8799 = x8789 + x8611;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x8800 = x8790 + x8626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8801 = x8797 + x8758;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8802 = x8798 + x8757;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8803 = x8799 + x8785;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8804 = x8800 + x8786;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8805 = x8797 + x8804;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x8806 = x8798 + x8803;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":492:5)
      {
        auto& reg = arg2[154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8806);
        reg = x8806;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":493:5)
      {
        auto& reg = arg2[156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8802);
        reg = x8802;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":492:5)
      {
        auto& reg = arg2[155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8805);
        reg = x8805;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":493:5)
      {
        auto& reg = arg2[157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8801);
        reg = x8801;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:11))
      auto x8807 = arg2[154 * steps + ((cycle - 0) & mask)];
      assert(x8807 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:26))
      auto x8808 = arg2[155 * steps + ((cycle - 0) & mask)];
      assert(x8808 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8809 = Fp(x8807.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8809);
          reg = x8809;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8810 = Fp(x8807.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8811 = x8810 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8811);
          reg = x8811;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8812 = Fp(x8807.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8813 = x8812 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8813);
          reg = x8813;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8814 = Fp(x8807.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8815 = x8814 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8815);
          reg = x8815;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8816 = Fp(x8807.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8817 = x8816 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8817);
          reg = x8817;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8818 = Fp(x8807.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8819 = x8818 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8819);
          reg = x8819;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8820 = Fp(x8807.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8821 = x8820 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8821);
          reg = x8821;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8822 = Fp(x8807.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8823 = x8822 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8823);
          reg = x8823;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8824 = Fp(x8807.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8825 = x8824 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8825);
          reg = x8825;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8826 = Fp(x8807.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8827 = x8826 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8827);
          reg = x8827;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8828 = Fp(x8807.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8829 = x8828 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8829);
          reg = x8829;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8830 = Fp(x8807.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8831 = x8830 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8831);
          reg = x8831;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8832 = Fp(x8807.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8833 = x8832 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8833);
          reg = x8833;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8834 = Fp(x8807.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8835 = x8834 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8835);
          reg = x8835;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8836 = Fp(x8807.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8837 = x8836 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8837);
          reg = x8837;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8838 = Fp(x8807.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8839 = x8838 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8839);
          reg = x8839;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8840 = arg2[160 * steps + ((cycle - 0) & mask)];
      assert(x8840 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8841 = arg2[161 * steps + ((cycle - 0) & mask)];
      assert(x8841 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8842 = arg2[162 * steps + ((cycle - 0) & mask)];
      assert(x8842 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8843 = arg2[163 * steps + ((cycle - 0) & mask)];
      assert(x8843 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8844 = arg2[164 * steps + ((cycle - 0) & mask)];
      assert(x8844 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8845 = arg2[165 * steps + ((cycle - 0) & mask)];
      assert(x8845 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8846 = arg2[166 * steps + ((cycle - 0) & mask)];
      assert(x8846 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8847 = arg2[167 * steps + ((cycle - 0) & mask)];
      assert(x8847 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8848 = arg2[168 * steps + ((cycle - 0) & mask)];
      assert(x8848 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8849 = arg2[169 * steps + ((cycle - 0) & mask)];
      assert(x8849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8850 = arg2[170 * steps + ((cycle - 0) & mask)];
      assert(x8850 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8851 = arg2[171 * steps + ((cycle - 0) & mask)];
      assert(x8851 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8852 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x8852 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8853 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x8853 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8854 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x8854 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8855 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x8855 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8856 = x8841 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8857 = x8842 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8858 = x8843 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8859 = x8844 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8860 = x8845 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8861 = x8846 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8862 = x8847 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8863 = x8848 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8864 = x8849 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8865 = x8850 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8866 = x8851 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8867 = x8852 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8868 = x8853 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8869 = x8854 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8870 = x8855 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8871 = x8840 + x8856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8872 = x8871 + x8857;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8873 = x8872 + x8858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8874 = x8873 + x8859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8875 = x8874 + x8860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8876 = x8875 + x8861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8877 = x8876 + x8862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8878 = x8877 + x8863;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8879 = x8878 + x8864;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8880 = x8879 + x8865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8881 = x8880 + x8866;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8882 = x8881 + x8867;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8883 = x8882 + x8868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8884 = x8883 + x8869;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8885 = x8884 + x8870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x8886 = x8807 - x8885;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x8887 = x8886 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
        auto x8888 = Fp(x8887.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8888);
          reg = x8888;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8889 = arg2[73 * steps + ((cycle - 0) & mask)];
      assert(x8889 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
      auto x8890 = x8887 - x8889;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
      auto x8891 = x8890 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
      auto x8892 = x99 - x8891;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      auto x8893 = x8891 * x8892;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      assert(x8893 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
      auto x8894 = x8808 + x8887;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8895 = Fp(x8894.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8895);
          reg = x8895;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8896 = Fp(x8894.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8897 = x8896 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8897);
          reg = x8897;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8898 = Fp(x8894.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8899 = x8898 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8899);
          reg = x8899;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8900 = Fp(x8894.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8901 = x8900 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8901);
          reg = x8901;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8902 = Fp(x8894.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8903 = x8902 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8903);
          reg = x8903;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8904 = Fp(x8894.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8905 = x8904 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8905);
          reg = x8905;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8906 = Fp(x8894.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8907 = x8906 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8907);
          reg = x8907;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8908 = Fp(x8894.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8909 = x8908 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8909);
          reg = x8909;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8910 = Fp(x8894.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8911 = x8910 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8911);
          reg = x8911;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8912 = Fp(x8894.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8913 = x8912 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8913);
          reg = x8913;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8914 = Fp(x8894.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8915 = x8914 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8915);
          reg = x8915;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8916 = Fp(x8894.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8917 = x8916 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8917);
          reg = x8917;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8918 = Fp(x8894.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8919 = x8918 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8919);
          reg = x8919;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8920 = Fp(x8894.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8921 = x8920 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8921);
          reg = x8921;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8922 = Fp(x8894.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8923 = x8922 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8923);
          reg = x8923;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8924 = Fp(x8894.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8925 = x8924 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8925);
          reg = x8925;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8926 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x8926 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8927 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x8927 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8928 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x8928 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8929 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x8929 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8930 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x8930 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8931 = arg2[181 * steps + ((cycle - 0) & mask)];
      assert(x8931 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8932 = arg2[182 * steps + ((cycle - 0) & mask)];
      assert(x8932 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8933 = arg2[183 * steps + ((cycle - 0) & mask)];
      assert(x8933 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8934 = arg2[184 * steps + ((cycle - 0) & mask)];
      assert(x8934 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8935 = arg2[185 * steps + ((cycle - 0) & mask)];
      assert(x8935 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8936 = arg2[186 * steps + ((cycle - 0) & mask)];
      assert(x8936 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8937 = arg2[187 * steps + ((cycle - 0) & mask)];
      assert(x8937 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8938 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x8938 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8939 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x8939 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8940 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x8940 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8941 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x8941 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8942 = x8927 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8943 = x8928 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8944 = x8929 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8945 = x8930 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8946 = x8931 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8947 = x8932 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8948 = x8933 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8949 = x8934 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8950 = x8935 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8951 = x8936 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8952 = x8937 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8953 = x8938 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8954 = x8939 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8955 = x8940 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x8956 = x8941 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8957 = x8926 + x8942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8958 = x8957 + x8943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8959 = x8958 + x8944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8960 = x8959 + x8945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8961 = x8960 + x8946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8962 = x8961 + x8947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8963 = x8962 + x8948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8964 = x8963 + x8949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8965 = x8964 + x8950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8966 = x8965 + x8951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8967 = x8966 + x8952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8968 = x8967 + x8953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8969 = x8968 + x8954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8970 = x8969 + x8955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x8971 = x8970 + x8956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x8972 = x8894 - x8971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x8973 = x8972 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
        auto x8974 = Fp(x8973.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8974);
          reg = x8974;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8975 = arg2[74 * steps + ((cycle - 0) & mask)];
      assert(x8975 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
      auto x8976 = x8973 - x8975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
      auto x8977 = x8976 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
      auto x8978 = x99 - x8977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      auto x8979 = x8977 * x8978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      assert(x8979 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:11))
      auto x8980 = arg2[156 * steps + ((cycle - 0) & mask)];
      assert(x8980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:26))
      auto x8981 = arg2[157 * steps + ((cycle - 0) & mask)];
      assert(x8981 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8982 = Fp(x8980.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8982);
          reg = x8982;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8983 = Fp(x8980.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8984 = x8983 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8984);
          reg = x8984;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8985 = Fp(x8980.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8986 = x8985 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8986);
          reg = x8986;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8987 = Fp(x8980.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8988 = x8987 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8988);
          reg = x8988;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8989 = Fp(x8980.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8990 = x8989 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8990);
          reg = x8990;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8991 = Fp(x8980.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8992 = x8991 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8992);
          reg = x8992;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8993 = Fp(x8980.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8994 = x8993 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8994);
          reg = x8994;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8995 = Fp(x8980.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8996 = x8995 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8996);
          reg = x8996;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8997 = Fp(x8980.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x8998 = x8997 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8998);
          reg = x8998;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x8999 = Fp(x8980.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9000 = x8999 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9000);
          reg = x9000;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9001 = Fp(x8980.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9002 = x9001 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9002);
          reg = x9002;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9003 = Fp(x8980.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9004 = x9003 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9004);
          reg = x9004;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9005 = Fp(x8980.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9006 = x9005 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9006);
          reg = x9006;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9007 = Fp(x8980.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9008 = x9007 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9008);
          reg = x9008;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9009 = Fp(x8980.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9010 = x9009 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9010);
          reg = x9010;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9011 = Fp(x8980.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9012 = x9011 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9012);
          reg = x9012;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9013 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x9013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9014 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x9014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9015 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x9015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9016 = arg2[195 * steps + ((cycle - 0) & mask)];
      assert(x9016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9017 = arg2[196 * steps + ((cycle - 0) & mask)];
      assert(x9017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9018 = arg2[197 * steps + ((cycle - 0) & mask)];
      assert(x9018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9019 = arg2[198 * steps + ((cycle - 0) & mask)];
      assert(x9019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9020 = arg2[199 * steps + ((cycle - 0) & mask)];
      assert(x9020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9021 = arg2[200 * steps + ((cycle - 0) & mask)];
      assert(x9021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9022 = arg2[201 * steps + ((cycle - 0) & mask)];
      assert(x9022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9023 = arg2[202 * steps + ((cycle - 0) & mask)];
      assert(x9023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9024 = arg2[203 * steps + ((cycle - 0) & mask)];
      assert(x9024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9025 = arg2[204 * steps + ((cycle - 0) & mask)];
      assert(x9025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9026 = arg2[205 * steps + ((cycle - 0) & mask)];
      assert(x9026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9027 = arg2[206 * steps + ((cycle - 0) & mask)];
      assert(x9027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9028 = arg2[207 * steps + ((cycle - 0) & mask)];
      assert(x9028 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9029 = x9014 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9030 = x9015 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9031 = x9016 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9032 = x9017 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9033 = x9018 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9034 = x9019 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9035 = x9020 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9036 = x9021 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9037 = x9022 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9038 = x9023 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9039 = x9024 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9040 = x9025 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9041 = x9026 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9042 = x9027 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9043 = x9028 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9044 = x9013 + x9029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9045 = x9044 + x9030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9046 = x9045 + x9031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9047 = x9046 + x9032;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9048 = x9047 + x9033;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9049 = x9048 + x9034;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9050 = x9049 + x9035;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9051 = x9050 + x9036;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9052 = x9051 + x9037;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9053 = x9052 + x9038;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9054 = x9053 + x9039;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9055 = x9054 + x9040;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9056 = x9055 + x9041;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9057 = x9056 + x9042;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9058 = x9057 + x9043;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x9059 = x8980 - x9058;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x9060 = x9059 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
        auto x9061 = Fp(x9060.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9061);
          reg = x9061;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9062 = arg2[75 * steps + ((cycle - 0) & mask)];
      assert(x9062 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
      auto x9063 = x9060 - x9062;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
      auto x9064 = x9063 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
      auto x9065 = x99 - x9064;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      auto x9066 = x9064 * x9065;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
      assert(x9066 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
      auto x9067 = x8981 + x9060;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9068 = Fp(x9067.asUInt32() & x99.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9068);
          reg = x9068;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9069 = Fp(x9067.asUInt32() & x96.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9070 = x9069 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9070);
          reg = x9070;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9071 = Fp(x9067.asUInt32() & x81.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9072 = x9071 * x78;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9072);
          reg = x9072;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9073 = Fp(x9067.asUInt32() & x67.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9074 = x9073 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9074);
          reg = x9074;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9075 = Fp(x9067.asUInt32() & x65.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9076 = x9075 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9076);
          reg = x9076;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9077 = Fp(x9067.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9078 = x9077 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9078);
          reg = x9078;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9079 = Fp(x9067.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9080 = x9079 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9080);
          reg = x9080;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9081 = Fp(x9067.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9082 = x9081 * x63;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9082);
          reg = x9082;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9083 = Fp(x9067.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9084 = x9083 * x94;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9084);
          reg = x9084;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9085 = Fp(x9067.asUInt32() & x21.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9086 = x9085 * x22;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9086);
          reg = x9086;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9087 = Fp(x9067.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9088 = x9087 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9088);
          reg = x9088;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9089 = Fp(x9067.asUInt32() & x18.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9090 = x9089 * x19;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9090);
          reg = x9090;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9091 = Fp(x9067.asUInt32() & x16.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9092 = x9091 * x17;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9092);
          reg = x9092;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9093 = Fp(x9067.asUInt32() & x14.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9094 = x9093 * x15;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9094);
          reg = x9094;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9095 = Fp(x9067.asUInt32() & x40.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9096 = x9095 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9096);
          reg = x9096;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
        auto x9097 = Fp(x9067.asUInt32() & x11.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
        auto x9098 = x9097 * x12;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[223 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9098);
          reg = x9098;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9099 = arg2[208 * steps + ((cycle - 0) & mask)];
      assert(x9099 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9100 = arg2[209 * steps + ((cycle - 0) & mask)];
      assert(x9100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9101 = arg2[210 * steps + ((cycle - 0) & mask)];
      assert(x9101 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9102 = arg2[211 * steps + ((cycle - 0) & mask)];
      assert(x9102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9103 = arg2[212 * steps + ((cycle - 0) & mask)];
      assert(x9103 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9104 = arg2[213 * steps + ((cycle - 0) & mask)];
      assert(x9104 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9105 = arg2[214 * steps + ((cycle - 0) & mask)];
      assert(x9105 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9106 = arg2[215 * steps + ((cycle - 0) & mask)];
      assert(x9106 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9107 = arg2[216 * steps + ((cycle - 0) & mask)];
      assert(x9107 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9108 = arg2[217 * steps + ((cycle - 0) & mask)];
      assert(x9108 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9109 = arg2[218 * steps + ((cycle - 0) & mask)];
      assert(x9109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9110 = arg2[219 * steps + ((cycle - 0) & mask)];
      assert(x9110 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9111 = arg2[220 * steps + ((cycle - 0) & mask)];
      assert(x9111 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9112 = arg2[221 * steps + ((cycle - 0) & mask)];
      assert(x9112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9113 = arg2[222 * steps + ((cycle - 0) & mask)];
      assert(x9113 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9114 = arg2[223 * steps + ((cycle - 0) & mask)];
      assert(x9114 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9115 = x9100 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9116 = x9101 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9117 = x9102 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9118 = x9103 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9119 = x9104 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9120 = x9105 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9121 = x9106 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9122 = x9107 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9123 = x9108 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9124 = x9109 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9125 = x9110 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9126 = x9111 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9127 = x9112 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9128 = x9113 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
      auto x9129 = x9114 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9130 = x9099 + x9115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9131 = x9130 + x9116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9132 = x9131 + x9117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9133 = x9132 + x9118;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9134 = x9133 + x9119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9135 = x9134 + x9120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9136 = x9135 + x9121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9137 = x9136 + x9122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9138 = x9137 + x9123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9139 = x9138 + x9124;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9140 = x9139 + x9125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9141 = x9140 + x9126;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9142 = x9141 + x9127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9143 = x9142 + x9128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
      auto x9144 = x9143 + x9129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
      auto x9145 = x9067 - x9144;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
      auto x9146 = x9145 * x10;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
        auto x9147 = Fp(x9146.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9147);
          reg = x9147;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9148 = arg2[76 * steps + ((cycle - 0) & mask)];
      assert(x9148 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
      auto x9149 = x9146 - x9148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
      auto x9150 = x9149 * x78;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
      auto x9151 = x99 - x9150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      auto x9152 = x9150 * x9151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
      assert(x9152 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9153 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x9153 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x9154 = x9153 * x6940;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x9155 = x9154 * x6941;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x9155 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[11](Reg)"("./zirgen/components/mux.h":49:25))
    auto x9156 = arg2[112 * steps + ((cycle - 0) & mask)];
    assert(x9156 != Fp::invalid());
    if (x9156 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9157 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x9157 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9157);
        reg = x9157;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":341:37))
      auto x9158 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x9158 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":341:37)
      auto x9159 = x9158 - x75;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":341:37)
      assert(x9159 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:341");
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9160 = arg2[145 * steps + ((cycle - 1) & mask)];
      assert(x9160 != Fp::invalid());
      if (x9160 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[10](Reg)"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":344:72))
        auto x9161 = arg2[111 * steps + ((cycle - 1) & mask)];
        assert(x9161 != Fp::invalid());
        if (x9161 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":347:7)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7);
            reg = x7;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":348:40))
          auto x9162 = arg2[147 * steps + ((cycle - 1) & mask)];
          assert(x9162 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":348:7)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9162);
            reg = x9162;
          }
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":350:22)
        auto x9163 = x99 - x9161;
        if (x9163 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":352:7)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":353:44))
          auto x9164 = arg2[147 * steps + ((cycle - 1) & mask)];
          assert(x9164 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":353:44)
          auto x9165 = x9164 - x99;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":353:7)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9165);
            reg = x9165;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":356:18)
      auto x9166 = x99 - x9160;
      if (x9166 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9167 = arg2[150 * steps + ((cycle - 1) & mask)];
        assert(x9167 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9167);
          reg = x9167;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":359:40))
        auto x9168 = arg2[144 * steps + ((cycle - 1) & mask)];
        assert(x9168 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":359:40)
        auto x9169 = x9168 - x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":359:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9169);
          reg = x9169;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":360:38))
        auto x9170 = arg2[147 * steps + ((cycle - 1) & mask)];
        assert(x9170 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":360:5)
        {
          auto& reg = arg2[147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9170);
          reg = x9170;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9171 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x9171 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x9172 = (x9171 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9172);
          reg = x9172;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x9173 = inv(x9171);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9173);
          reg = x9173;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9174 = arg2[145 * steps + ((cycle - 0) & mask)];
      assert(x9174 != Fp::invalid());
      if (x9174 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x9171 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x9175 = x99 - x9174;
      if (x9175 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x9176 = arg2[146 * steps + ((cycle - 0) & mask)];
        assert(x9176 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x9177 = x9171 * x9176;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x9178 = x9177 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x9178 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9179 = arg2[150 * steps + ((cycle - 0) & mask)];
      assert(x9179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":364:15)
      auto x9180 = x99 - x9179;
      if (x9174 != 0) {
        if (x9180 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        if (x9179 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
        }
      }
      if (x9175 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":374:38))
      auto x9181 = arg2[141 * steps + ((cycle - 1) & mask)];
      assert(x9181 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":374:3)
      {
        auto& reg = arg2[141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9181);
        reg = x9181;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":375:40))
      auto x9182 = arg2[140 * steps + ((cycle - 1) & mask)];
      assert(x9182 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":375:3)
      {
        auto& reg = arg2[140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9182);
        reg = x9182;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9183 = arg2[152 * steps + ((cycle - 1) & mask)];
      assert(x9183 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9183);
        reg = x9183;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":377:36))
      auto x9184 = arg2[153 * steps + ((cycle - 1) & mask)];
      assert(x9184 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":377:3)
      {
        auto& reg = arg2[153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9184);
        reg = x9184;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9185 = arg2[147 * steps + ((cycle - 0) & mask)];
      assert(x9185 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x9186 = (x9185 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9186);
          reg = x9186;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x9187 = inv(x9185);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9187);
          reg = x9187;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9188 = arg2[148 * steps + ((cycle - 0) & mask)];
      assert(x9188 != Fp::invalid());
      if (x9188 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x9185 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x9189 = x99 - x9188;
      if (x9189 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x9190 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x9190 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x9191 = x9185 * x9190;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x9192 = x9191 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x9192 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x9193 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x9194 = Fp(x9193.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9194);
          reg = x9194;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x9195 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x9195 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x9196 = x9193 - x9195;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x9197 = x9196 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x9198 = Fp(x9197.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9198);
          reg = x9198;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x9199 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x9199 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x9200 = x9197 - x9199;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x9201 = x9200 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x9202 = Fp(x9201.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9202);
          reg = x9202;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x9203 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x9203 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x9204 = x9201 - x9203;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x9205 = x9204 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x9206 = Fp(x9205.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9206);
          reg = x9206;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9207 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x9207 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x9208 = x9205 - x9207;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x9209 = x9208 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9209);
        reg = x9209;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9210 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x9210 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x9211 = x99 - x9210;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x9212 = x9210 * x9211;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9212);
        reg = x9212;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x9213 = x96 - x9210;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x9214 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x9214 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x9215 = x9214 * x9213;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x9215 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      extern_args[0] = x75;
      extern_args[1] = x9179;
      extern_args[2] = x9171;
      extern_args[3] = x9185;
      extern_log(ctx, cycle, "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", extern_args, extern_outs);
      if (x9180 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":387:24)
        auto x9216 = x6 - x9171;
        {
          extern_args[0] = x9216;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x9217 = extern_outs[0];
          auto x9218 = extern_outs[1];
          auto x9219 = extern_outs[2];
          auto x9220 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9217);
            reg = x9217;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9218);
            reg = x9218;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9219);
            reg = x9219;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9220);
            reg = x9220;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9221 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x9221 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9222 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x9222 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9223 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x9223 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9224 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x9224 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9216);
          reg = x9216;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9221);
          reg = x9221;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9222);
          reg = x9222;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9223);
          reg = x9223;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9224);
          reg = x9224;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9225 = arg2[79 * steps + ((cycle - 15) & mask)];
      assert(x9225 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9226 = arg2[80 * steps + ((cycle - 15) & mask)];
      assert(x9226 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9227 = arg2[81 * steps + ((cycle - 15) & mask)];
      assert(x9227 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9228 = arg2[12 * steps + ((cycle - 15) & mask)];
      assert(x9228 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9229 = arg2[13 * steps + ((cycle - 15) & mask)];
      assert(x9229 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9230 = arg2[14 * steps + ((cycle - 15) & mask)];
      assert(x9230 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9231 = arg2[15 * steps + ((cycle - 15) & mask)];
      assert(x9231 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9232 = arg2[16 * steps + ((cycle - 15) & mask)];
      assert(x9232 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9233 = arg2[20 * steps + ((cycle - 15) & mask)];
      assert(x9233 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9234 = arg2[21 * steps + ((cycle - 15) & mask)];
      assert(x9234 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9235 = arg2[22 * steps + ((cycle - 15) & mask)];
      assert(x9235 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9236 = arg2[23 * steps + ((cycle - 15) & mask)];
      assert(x9236 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9237 = arg2[24 * steps + ((cycle - 15) & mask)];
      assert(x9237 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9238 = arg2[25 * steps + ((cycle - 15) & mask)];
      assert(x9238 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9239 = arg2[26 * steps + ((cycle - 15) & mask)];
      assert(x9239 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9240 = arg2[27 * steps + ((cycle - 15) & mask)];
      assert(x9240 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9241 = arg2[28 * steps + ((cycle - 15) & mask)];
      assert(x9241 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9242 = arg2[29 * steps + ((cycle - 15) & mask)];
      assert(x9242 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9243 = arg2[30 * steps + ((cycle - 15) & mask)];
      assert(x9243 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9244 = arg2[31 * steps + ((cycle - 15) & mask)];
      assert(x9244 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9245 = arg2[32 * steps + ((cycle - 15) & mask)];
      assert(x9245 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9246 = arg2[33 * steps + ((cycle - 15) & mask)];
      assert(x9246 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9247 = arg2[82 * steps + ((cycle - 15) & mask)];
      assert(x9247 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9248 = arg2[83 * steps + ((cycle - 15) & mask)];
      assert(x9248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9249 = arg2[84 * steps + ((cycle - 15) & mask)];
      assert(x9249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9250 = arg2[85 * steps + ((cycle - 15) & mask)];
      assert(x9250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9251 = arg2[86 * steps + ((cycle - 15) & mask)];
      assert(x9251 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9252 = arg2[87 * steps + ((cycle - 15) & mask)];
      assert(x9252 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9253 = arg2[88 * steps + ((cycle - 15) & mask)];
      assert(x9253 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9254 = arg2[17 * steps + ((cycle - 15) & mask)];
      assert(x9254 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9255 = arg2[18 * steps + ((cycle - 15) & mask)];
      assert(x9255 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9256 = arg2[19 * steps + ((cycle - 15) & mask)];
      assert(x9256 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9257 = arg2[12 * steps + ((cycle - 16) & mask)];
      assert(x9257 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9258 = arg2[13 * steps + ((cycle - 16) & mask)];
      assert(x9258 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9259 = arg2[14 * steps + ((cycle - 16) & mask)];
      assert(x9259 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9260 = arg2[15 * steps + ((cycle - 16) & mask)];
      assert(x9260 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9261 = arg2[16 * steps + ((cycle - 16) & mask)];
      assert(x9261 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9262 = arg2[17 * steps + ((cycle - 16) & mask)];
      assert(x9262 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9263 = arg2[18 * steps + ((cycle - 16) & mask)];
      assert(x9263 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9264 = arg2[19 * steps + ((cycle - 16) & mask)];
      assert(x9264 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9265 = arg2[20 * steps + ((cycle - 16) & mask)];
      assert(x9265 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9266 = arg2[21 * steps + ((cycle - 16) & mask)];
      assert(x9266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9267 = arg2[22 * steps + ((cycle - 16) & mask)];
      assert(x9267 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9268 = arg2[23 * steps + ((cycle - 16) & mask)];
      assert(x9268 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9269 = arg2[24 * steps + ((cycle - 16) & mask)];
      assert(x9269 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9270 = arg2[25 * steps + ((cycle - 16) & mask)];
      assert(x9270 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9271 = arg2[26 * steps + ((cycle - 16) & mask)];
      assert(x9271 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9272 = arg2[27 * steps + ((cycle - 16) & mask)];
      assert(x9272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9273 = arg2[28 * steps + ((cycle - 16) & mask)];
      assert(x9273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9274 = arg2[29 * steps + ((cycle - 16) & mask)];
      assert(x9274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9275 = arg2[30 * steps + ((cycle - 16) & mask)];
      assert(x9275 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9276 = arg2[31 * steps + ((cycle - 16) & mask)];
      assert(x9276 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9277 = arg2[32 * steps + ((cycle - 16) & mask)];
      assert(x9277 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9278 = arg2[33 * steps + ((cycle - 16) & mask)];
      assert(x9278 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9279 = arg2[79 * steps + ((cycle - 16) & mask)];
      assert(x9279 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9280 = arg2[80 * steps + ((cycle - 16) & mask)];
      assert(x9280 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9281 = arg2[81 * steps + ((cycle - 16) & mask)];
      assert(x9281 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9282 = arg2[82 * steps + ((cycle - 16) & mask)];
      assert(x9282 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9283 = arg2[83 * steps + ((cycle - 16) & mask)];
      assert(x9283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9284 = arg2[84 * steps + ((cycle - 16) & mask)];
      assert(x9284 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9285 = arg2[85 * steps + ((cycle - 16) & mask)];
      assert(x9285 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9286 = arg2[86 * steps + ((cycle - 16) & mask)];
      assert(x9286 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9287 = arg2[87 * steps + ((cycle - 16) & mask)];
      assert(x9287 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9288 = arg2[88 * steps + ((cycle - 16) & mask)];
      assert(x9288 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9289 = arg2[79 * steps + ((cycle - 2) & mask)];
      assert(x9289 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9290 = arg2[80 * steps + ((cycle - 2) & mask)];
      assert(x9290 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9291 = arg2[81 * steps + ((cycle - 2) & mask)];
      assert(x9291 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9292 = arg2[82 * steps + ((cycle - 2) & mask)];
      assert(x9292 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9293 = arg2[83 * steps + ((cycle - 2) & mask)];
      assert(x9293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9294 = arg2[84 * steps + ((cycle - 2) & mask)];
      assert(x9294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9295 = arg2[85 * steps + ((cycle - 2) & mask)];
      assert(x9295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9296 = arg2[86 * steps + ((cycle - 2) & mask)];
      assert(x9296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9297 = arg2[87 * steps + ((cycle - 2) & mask)];
      assert(x9297 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9298 = arg2[21 * steps + ((cycle - 2) & mask)];
      assert(x9298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9299 = arg2[22 * steps + ((cycle - 2) & mask)];
      assert(x9299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9300 = arg2[23 * steps + ((cycle - 2) & mask)];
      assert(x9300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9301 = arg2[24 * steps + ((cycle - 2) & mask)];
      assert(x9301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9302 = arg2[25 * steps + ((cycle - 2) & mask)];
      assert(x9302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9303 = arg2[26 * steps + ((cycle - 2) & mask)];
      assert(x9303 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9304 = arg2[27 * steps + ((cycle - 2) & mask)];
      assert(x9304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9305 = arg2[28 * steps + ((cycle - 2) & mask)];
      assert(x9305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9306 = arg2[29 * steps + ((cycle - 2) & mask)];
      assert(x9306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9307 = arg2[30 * steps + ((cycle - 2) & mask)];
      assert(x9307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9308 = arg2[31 * steps + ((cycle - 2) & mask)];
      assert(x9308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9309 = arg2[32 * steps + ((cycle - 2) & mask)];
      assert(x9309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9310 = arg2[33 * steps + ((cycle - 2) & mask)];
      assert(x9310 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9311 = arg2[88 * steps + ((cycle - 2) & mask)];
      assert(x9311 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9312 = arg2[12 * steps + ((cycle - 2) & mask)];
      assert(x9312 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9313 = arg2[13 * steps + ((cycle - 2) & mask)];
      assert(x9313 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9314 = arg2[14 * steps + ((cycle - 2) & mask)];
      assert(x9314 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9315 = arg2[15 * steps + ((cycle - 2) & mask)];
      assert(x9315 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9316 = arg2[16 * steps + ((cycle - 2) & mask)];
      assert(x9316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9317 = arg2[17 * steps + ((cycle - 2) & mask)];
      assert(x9317 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9318 = arg2[18 * steps + ((cycle - 2) & mask)];
      assert(x9318 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9319 = arg2[19 * steps + ((cycle - 2) & mask)];
      assert(x9319 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9320 = arg2[20 * steps + ((cycle - 2) & mask)];
      assert(x9320 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9321 = arg2[12 * steps + ((cycle - 7) & mask)];
      assert(x9321 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9322 = arg2[13 * steps + ((cycle - 7) & mask)];
      assert(x9322 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9323 = arg2[14 * steps + ((cycle - 7) & mask)];
      assert(x9323 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9324 = arg2[15 * steps + ((cycle - 7) & mask)];
      assert(x9324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9325 = arg2[16 * steps + ((cycle - 7) & mask)];
      assert(x9325 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9326 = arg2[17 * steps + ((cycle - 7) & mask)];
      assert(x9326 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9327 = arg2[18 * steps + ((cycle - 7) & mask)];
      assert(x9327 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9328 = arg2[19 * steps + ((cycle - 7) & mask)];
      assert(x9328 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9329 = arg2[20 * steps + ((cycle - 7) & mask)];
      assert(x9329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9330 = arg2[21 * steps + ((cycle - 7) & mask)];
      assert(x9330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9331 = arg2[22 * steps + ((cycle - 7) & mask)];
      assert(x9331 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9332 = arg2[23 * steps + ((cycle - 7) & mask)];
      assert(x9332 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9333 = arg2[24 * steps + ((cycle - 7) & mask)];
      assert(x9333 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9334 = arg2[25 * steps + ((cycle - 7) & mask)];
      assert(x9334 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9335 = arg2[26 * steps + ((cycle - 7) & mask)];
      assert(x9335 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9336 = arg2[27 * steps + ((cycle - 7) & mask)];
      assert(x9336 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9337 = arg2[28 * steps + ((cycle - 7) & mask)];
      assert(x9337 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9338 = arg2[29 * steps + ((cycle - 7) & mask)];
      assert(x9338 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9339 = arg2[30 * steps + ((cycle - 7) & mask)];
      assert(x9339 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9340 = arg2[31 * steps + ((cycle - 7) & mask)];
      assert(x9340 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9341 = arg2[32 * steps + ((cycle - 7) & mask)];
      assert(x9341 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9342 = arg2[33 * steps + ((cycle - 7) & mask)];
      assert(x9342 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9343 = arg2[79 * steps + ((cycle - 7) & mask)];
      assert(x9343 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9344 = arg2[80 * steps + ((cycle - 7) & mask)];
      assert(x9344 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9345 = arg2[81 * steps + ((cycle - 7) & mask)];
      assert(x9345 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9346 = arg2[82 * steps + ((cycle - 7) & mask)];
      assert(x9346 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9347 = arg2[83 * steps + ((cycle - 7) & mask)];
      assert(x9347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9348 = arg2[84 * steps + ((cycle - 7) & mask)];
      assert(x9348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9349 = arg2[85 * steps + ((cycle - 7) & mask)];
      assert(x9349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9350 = arg2[86 * steps + ((cycle - 7) & mask)];
      assert(x9350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9351 = arg2[87 * steps + ((cycle - 7) & mask)];
      assert(x9351 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9352 = arg2[88 * steps + ((cycle - 7) & mask)];
      assert(x9352 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9353 = x9225 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9354 = x9226 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9355 = x9227 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9356 = x9228 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9357 = x9229 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9358 = x9230 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9359 = x9231 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9360 = x9232 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9361 = x9233 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9362 = x9234 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9363 = x9235 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9364 = x9236 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9365 = x9237 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9366 = x9238 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9367 = x9239 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9368 = x9240 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9369 = x9241 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9370 = x9242 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9371 = x9243 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9372 = x9244 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9373 = x9245 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9374 = x9246 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9375 = x9247 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9376 = x9248 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9377 = x9249 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9378 = x9250 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9379 = x9251 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9380 = x9252 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9381 = x9253 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9382 = x9254 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9383 = x9255 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9384 = x9256 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9385 = x9289 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9386 = x9290 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9387 = x9291 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9388 = x9292 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9389 = x9293 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9390 = x9294 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9391 = x9295 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9392 = x9296 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9393 = x9297 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9394 = x9298 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9395 = x9299 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9396 = x9300 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9397 = x9301 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9398 = x9302 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9399 = x9303 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9400 = x9304 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9401 = x9305 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9402 = x9306 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9403 = x9307 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9404 = x9308 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9405 = x9309 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9406 = x9310 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9407 = x9311 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9408 = x9312 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9409 = x9313 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9410 = x9314 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9411 = x9315 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9412 = x9316 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9413 = x9317 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9414 = x9318 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9415 = x9319 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9416 = x9320 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9417 = x9257 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9418 = x9258 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9419 = x9259 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9420 = x9260 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9421 = x9261 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9422 = x9262 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9423 = x9264 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9424 = x9265 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9425 = x9266 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9426 = x9267 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9427 = x9268 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9428 = x9269 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9429 = x9270 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9430 = x9271 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9431 = x9272 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9432 = x9273 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9433 = x9274 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9434 = x9275 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9435 = x9276 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9436 = x9277 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9437 = x9278 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9438 = x9280 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9439 = x9281 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9440 = x9282 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9441 = x9283 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9442 = x9284 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9443 = x9285 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9444 = x9286 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9445 = x9287 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9446 = x9288 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9447 = x9321 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9448 = x9322 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9449 = x9323 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9450 = x9324 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9451 = x9325 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9452 = x9326 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9453 = x9328 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9454 = x9329 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9455 = x9330 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9456 = x9331 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9457 = x9332 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9458 = x9333 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9459 = x9334 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9460 = x9335 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9461 = x9336 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9462 = x9337 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9463 = x9338 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9464 = x9339 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9465 = x9340 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9466 = x9341 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9467 = x9342 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9468 = x9344 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9469 = x9345 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9470 = x9346 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9471 = x9347 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9472 = x9348 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9473 = x9349 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9474 = x9350 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9475 = x9351 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9476 = x9352 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9477 = x9353 * x9256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9478 = x9354 * x9233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9479 = x9355 * x9234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9480 = x9356 * x9242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9481 = x9357 * x9243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9482 = x9358 * x9244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9483 = x9359 * x9245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9484 = x9360 * x9246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9485 = x9361 * x9247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9486 = x9362 * x9248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9487 = x9363 * x9249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9488 = x9364 * x9250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9489 = x9365 * x9251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9490 = x9366 * x9252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9491 = x9367 * x9253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9492 = x9368 * x9228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9493 = x9369 * x9229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9494 = x9370 * x9230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9495 = x9371 * x9231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9496 = x9372 * x9232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9497 = x9373 * x9254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9498 = x9374 * x9255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9499 = x9375 * x9235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9500 = x9376 * x9236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9501 = x9376 * x9254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9502 = x9377 * x9237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9503 = x9377 * x9255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9504 = x9378 * x9238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9505 = x9378 * x9256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9506 = x9379 * x9239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9507 = x9380 * x9240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9508 = x9381 * x9241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9509 = x9385 * x9302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9510 = x9386 * x9303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9511 = x9387 * x9304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9512 = x9388 * x9305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9513 = x9389 * x9306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9514 = x9390 * x9307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9515 = x9391 * x9308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9516 = x9392 * x9309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9517 = x9392 * x9311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9518 = x9393 * x9310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9519 = x9393 * x9312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9520 = x9394 * x9312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9521 = x9395 * x9313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9522 = x9396 * x9314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9523 = x9397 * x9315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9524 = x9398 * x9316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9525 = x9399 * x9317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9526 = x9400 * x9318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9527 = x9401 * x9319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9528 = x9402 * x9320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9529 = x9403 * x9298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9530 = x9404 * x9299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9531 = x9405 * x9300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9532 = x9406 * x9301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9533 = x9407 * x9313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9534 = x9408 * x9314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9535 = x9409 * x9315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9536 = x9410 * x9316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9537 = x9411 * x9317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9538 = x9412 * x9318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9539 = x9413 * x9319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9540 = x9414 * x9320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9541 = x9225 + x9256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9542 = x9226 + x9233;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9543 = x9227 + x9234;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9544 = x9228 + x9242;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9545 = x9229 + x9243;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9546 = x9230 + x9244;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9547 = x9231 + x9245;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9548 = x9232 + x9246;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9549 = x9233 + x9247;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9550 = x9234 + x9248;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9551 = x9235 + x9249;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9552 = x9236 + x9250;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9553 = x9237 + x9251;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9554 = x9238 + x9252;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9555 = x9239 + x9253;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9556 = x9240 + x9228;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9557 = x9241 + x9229;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9558 = x9242 + x9230;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9559 = x9243 + x9231;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9560 = x9244 + x9232;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9561 = x9245 + x9254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9562 = x9246 + x9255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9563 = x9247 + x9235;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9564 = x9248 + x9236;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9565 = x9248 + x9254;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9566 = x9249 + x9237;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9567 = x9249 + x9255;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9568 = x9250 + x9238;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9569 = x9250 + x9256;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9570 = x9251 + x9239;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9571 = x9252 + x9240;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9572 = x9253 + x9241;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9573 = x9289 + x9302;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9574 = x9290 + x9303;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9575 = x9291 + x9304;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9576 = x9292 + x9305;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9577 = x9293 + x9306;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9578 = x9294 + x9307;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9579 = x9295 + x9308;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9580 = x9296 + x9309;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9581 = x9296 + x9311;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9582 = x9297 + x9310;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9583 = x9297 + x9312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9584 = x9298 + x9312;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9585 = x9299 + x9313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9586 = x9300 + x9314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9587 = x9301 + x9315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9588 = x9302 + x9316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9589 = x9303 + x9317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9590 = x9304 + x9318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9591 = x9305 + x9319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9592 = x9306 + x9320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9593 = x9307 + x9298;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9594 = x9308 + x9299;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9595 = x9309 + x9300;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9596 = x9310 + x9301;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9597 = x9311 + x9313;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9598 = x9312 + x9314;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9599 = x9313 + x9315;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9600 = x9314 + x9316;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9601 = x9315 + x9317;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9602 = x9316 + x9318;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9603 = x9317 + x9319;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9604 = x9318 + x9320;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9605 = x9565 - x9501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9606 = x9567 - x9503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9607 = x9569 - x9505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9608 = x9581 - x9517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9609 = x9583 - x9519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9610 = x9597 - x9533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9611 = x9598 - x9534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9612 = x9599 - x9535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9613 = x9600 - x9536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9614 = x9601 - x9537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9615 = x9602 - x9538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9616 = x9603 - x9539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9617 = x9604 - x9540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9618 = x9541 - x9477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9619 = x9542 - x9478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9620 = x9543 - x9479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9621 = x9544 - x9480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9622 = x9545 - x9481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9623 = x9546 - x9482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9624 = x9547 - x9483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9625 = x9548 - x9484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9626 = x9549 - x9485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9627 = x9550 - x9486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9628 = x9551 - x9487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9629 = x9552 - x9488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9630 = x9553 - x9489;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9631 = x9554 - x9490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9632 = x9555 - x9491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9633 = x9556 - x9492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9634 = x9557 - x9493;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9635 = x9558 - x9494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9636 = x9559 - x9495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9637 = x9560 - x9496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9638 = x9561 - x9497;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9639 = x9562 - x9498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9640 = x9563 - x9499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9641 = x9564 - x9500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9642 = x9566 - x9502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9643 = x9568 - x9504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9644 = x9570 - x9506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9645 = x9571 - x9507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9646 = x9572 - x9508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9647 = x9573 - x9509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9648 = x9574 - x9510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9649 = x9575 - x9511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9650 = x9576 - x9512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9651 = x9577 - x9513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9652 = x9578 - x9514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9653 = x9579 - x9515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9654 = x9580 - x9516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9655 = x9582 - x9518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9656 = x9584 - x9520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9657 = x9585 - x9521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9658 = x9586 - x9522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9659 = x9587 - x9523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9660 = x9588 - x9524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9661 = x9589 - x9525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9662 = x9590 - x9526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9663 = x9591 - x9527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9664 = x9592 - x9528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9665 = x9593 - x9529;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9666 = x9594 - x9530;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9667 = x9595 - x9531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9668 = x9596 - x9532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9669 = x9263 + x9423;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9670 = x9279 + x9438;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9671 = x9327 + x9453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9672 = x9343 + x9468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9673 = x9225 + x9622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9674 = x9226 + x9623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9675 = x9227 + x9624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9676 = x9228 + x9629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9677 = x9229 + x9630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9678 = x9230 + x9631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9679 = x9231 + x9632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9680 = x9232 + x9633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9681 = x9233 + x9637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9682 = x9234 + x9638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9683 = x9235 + x9639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9684 = x9236 + x9618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9685 = x9237 + x9619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9686 = x9238 + x9620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9687 = x9239 + x9640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9688 = x9240 + x9641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9689 = x9241 + x9642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9690 = x9242 + x9643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9691 = x9243 + x9644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9692 = x9244 + x9645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9693 = x9245 + x9646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9694 = x9246 + x9621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9695 = x9247 + x9625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9696 = x9251 + x9626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9697 = x9252 + x9627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9698 = x9253 + x9628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9699 = x9254 + x9634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9700 = x9255 + x9635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9701 = x9256 + x9636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9702 = x9289 + x9649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9703 = x9290 + x9650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9704 = x9291 + x9651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9705 = x9292 + x9652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9706 = x9293 + x9653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9707 = x9294 + x9654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9708 = x9295 + x9655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9709 = x9298 + x9658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9710 = x9299 + x9659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9711 = x9300 + x9660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9712 = x9301 + x9661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9713 = x9302 + x9662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9714 = x9303 + x9663;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9715 = x9304 + x9664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9716 = x9305 + x9665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9717 = x9306 + x9666;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9718 = x9307 + x9667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9719 = x9308 + x9668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9720 = x9309 + x9647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9721 = x9310 + x9648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9722 = x9319 + x9656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9723 = x9320 + x9657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9724 = x9353 * x9622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9725 = x9354 * x9623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9726 = x9355 * x9624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9727 = x9356 * x9629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9728 = x9357 * x9630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9729 = x9358 * x9631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9730 = x9359 * x9632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9731 = x9360 * x9633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9732 = x9361 * x9637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9733 = x9362 * x9638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9734 = x9363 * x9639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9735 = x9364 * x9618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9736 = x9365 * x9619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9737 = x9366 * x9620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9738 = x9367 * x9640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9739 = x9368 * x9641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9740 = x9369 * x9642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9741 = x9370 * x9643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9742 = x9371 * x9644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9743 = x9372 * x9645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9744 = x9373 * x9646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9745 = x9374 * x9621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9746 = x9375 * x9625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9747 = x9379 * x9626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9748 = x9380 * x9627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9749 = x9381 * x9628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9750 = x9382 * x9634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9751 = x9383 * x9635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9752 = x9384 * x9636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9753 = x9385 * x9649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9754 = x9386 * x9650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9755 = x9387 * x9651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9756 = x9388 * x9652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9757 = x9389 * x9653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9758 = x9390 * x9654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9759 = x9391 * x9655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9760 = x9394 * x9658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9761 = x9395 * x9659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9762 = x9396 * x9660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9763 = x9397 * x9661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9764 = x9398 * x9662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9765 = x9399 * x9663;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9766 = x9400 * x9664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9767 = x9401 * x9665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9768 = x9402 * x9666;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9769 = x9403 * x9667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9770 = x9404 * x9668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9771 = x9405 * x9647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9772 = x9406 * x9648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9773 = x9415 * x9656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x9774 = x9416 * x9657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9775 = x9605 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9776 = x9606 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9777 = x9607 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9778 = x9608 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9779 = x9609 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9780 = x9610 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9781 = x9611 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9782 = x9612 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9783 = x9613 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9784 = x9614 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9785 = x9615 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9786 = x9616 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9787 = x9617 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9788 = x9673 - x9724;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9789 = x9674 - x9725;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9790 = x9675 - x9726;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9791 = x9676 - x9727;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9792 = x9677 - x9728;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9793 = x9678 - x9729;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9794 = x9679 - x9730;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9795 = x9680 - x9731;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9796 = x9681 - x9732;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9797 = x9682 - x9733;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9798 = x9683 - x9734;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9799 = x9684 - x9735;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9800 = x9685 - x9736;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9801 = x9686 - x9737;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9802 = x9687 - x9738;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9803 = x9688 - x9739;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9804 = x9689 - x9740;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9805 = x9690 - x9741;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9806 = x9691 - x9742;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9807 = x9692 - x9743;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9808 = x9693 - x9744;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9809 = x9694 - x9745;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9810 = x9695 - x9746;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9811 = x9696 - x9747;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9812 = x9697 - x9748;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9813 = x9698 - x9749;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9814 = x9699 - x9750;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9815 = x9700 - x9751;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9816 = x9701 - x9752;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9817 = x9702 - x9753;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9818 = x9703 - x9754;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9819 = x9704 - x9755;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9820 = x9705 - x9756;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9821 = x9706 - x9757;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9822 = x9707 - x9758;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9823 = x9708 - x9759;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9824 = x9709 - x9760;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9825 = x9710 - x9761;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9826 = x9711 - x9762;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9827 = x9712 - x9763;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9828 = x9713 - x9764;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9829 = x9714 - x9765;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9830 = x9715 - x9766;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9831 = x9716 - x9767;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9832 = x9717 - x9768;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9833 = x9718 - x9769;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9834 = x9719 - x9770;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9835 = x9720 - x9771;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9836 = x9721 - x9772;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9837 = x9722 - x9773;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x9838 = x9723 - x9774;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9839 = x9669 + x9424;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9840 = x9670 + x9439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9841 = x9671 + x9454;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9842 = x9672 + x9469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9843 = x9788 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9844 = x9789 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9845 = x9790 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9846 = x9791 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9847 = x9792 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9848 = x9793 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9849 = x9794 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9850 = x9795 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9851 = x9796 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9852 = x9797 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9853 = x9798 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9854 = x9799 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9855 = x9800 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9856 = x9802 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9857 = x9803 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9858 = x9804 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9859 = x9805 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9860 = x9806 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9861 = x9807 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9862 = x9808 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9863 = x9809 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9864 = x9810 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9865 = x9812 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9866 = x9813 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9867 = x9814 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9868 = x9815 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9869 = x9816 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9870 = x9817 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9871 = x9819 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9872 = x9820 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9873 = x9821 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9874 = x9822 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9875 = x9823 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9876 = x9824 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9877 = x9825 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9878 = x9826 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9879 = x9827 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9880 = x9828 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9881 = x9829 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9882 = x9830 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9883 = x9831 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9884 = x9832 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9885 = x9833 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9886 = x9834 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9887 = x9835 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9888 = x9836 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x9889 = x9838 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9890 = x9839 + x9425;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9891 = x9840 + x9440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9892 = x9841 + x9455;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9893 = x9842 + x9470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9894 = x9890 + x9426;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9895 = x9891 + x9441;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9896 = x9892 + x9456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9897 = x9893 + x9471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9898 = x9801 + x9856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9899 = x9811 + x9865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9900 = x9818 + x9871;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9901 = x9837 + x9889;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9902 = x9894 + x9427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9903 = x9895 + x9442;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9904 = x9896 + x9457;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9905 = x9897 + x9472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9906 = x9898 + x9857;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9907 = x9899 + x9866;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9908 = x9900 + x9872;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9909 = x9901 + x9876;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9910 = x9902 + x9428;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9911 = x9903 + x9443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9912 = x9904 + x9458;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9913 = x9905 + x9473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9914 = x9906 + x9858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9915 = x9907 + x9846;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9916 = x9908 + x9873;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9917 = x9909 + x9877;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9918 = x9910 + x9429;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9919 = x9911 + x9444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9920 = x9912 + x9459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9921 = x9913 + x9474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9922 = x9914 + x9859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9923 = x9915 + x9847;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9924 = x9916 + x9874;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9925 = x9917 + x9878;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9926 = x9918 + x9430;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9927 = x9919 + x9445;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9928 = x9920 + x9460;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9929 = x9921 + x9475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9930 = x9922 + x9860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9931 = x9923 + x9848;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9932 = x9924 + x9875;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9933 = x9925 + x9879;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9934 = x9926 + x9431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9935 = x9927 + x9446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9936 = x9928 + x9461;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9937 = x9929 + x9476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9938 = x9930 + x9861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9939 = x9931 + x9849;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9940 = x9932 + x9778;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9941 = x9933 + x9880;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9942 = x9934 + x9432;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9943 = x9935 + x9417;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9944 = x9936 + x9462;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9945 = x9937 + x9447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9946 = x9938 + x9862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9947 = x9939 + x9850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9948 = x9940 + x9779;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9949 = x9941 + x9881;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9950 = x9942 + x9433;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9951 = x9943 + x9418;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9952 = x9944 + x9463;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9953 = x9945 + x9448;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9954 = x9946 + x9863;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9955 = x9947 + x9867;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9956 = x9948 + x9780;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9957 = x9949 + x9882;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9958 = x9950 + x9434;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9959 = x9951 + x9419;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9960 = x9952 + x9464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9961 = x9953 + x9449;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9962 = x9954 + x9843;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9963 = x9955 + x9868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9964 = x9956 + x9781;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9965 = x9957 + x9883;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9966 = x9958 + x9435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9967 = x9959 + x9420;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9968 = x9960 + x9465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9969 = x9961 + x9450;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9970 = x9962 + x9844;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9971 = x9963 + x9869;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9972 = x9964 + x9782;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9973 = x9965 + x9884;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9974 = x9966 + x9436;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9975 = x9967 + x9421;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9976 = x9968 + x9466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9977 = x9969 + x9451;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9978 = x9970 + x9845;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9979 = x9971 + x9851;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9980 = x9972 + x9783;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9981 = x9973 + x9885;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9982 = x9974 + x9437;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9983 = x9975 + x9422;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9984 = x9976 + x9467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9985 = x9977 + x9452;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9986 = x9978 + x9864;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9987 = x9979 + x9852;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9988 = x9980 + x9784;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9989 = x9981 + x9886;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9990 = x9986 + x9775;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9991 = x9987 + x9853;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9992 = x9988 + x9785;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9993 = x9989 + x9887;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9994 = x9990 + x9776;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9995 = x9991 + x9854;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9996 = x9992 + x9786;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9997 = x9993 + x9888;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9998 = x9996 + x9787;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x9999 = x9997 + x9870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x10000 = x9994 + x9777;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x10001 = x9995 + x9855;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10002 = x9984 + x9998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10003 = x9985 + x9999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10004 = x10000 + x10002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10005 = x10001 + x10003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10006 = x9982 + x10004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x10007 = x9983 + x10005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":463:5)
      {
        auto& reg = arg2[158 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10007);
        reg = x10007;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":463:5)
      {
        auto& reg = arg2[159 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x10006);
        reg = x10006;
      }
      if (x9179 != 0) {
        {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10008 = arg2[12 * steps + ((cycle - 0) & mask)];
        assert(x10008 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10009 = arg2[13 * steps + ((cycle - 0) & mask)];
        assert(x10009 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10010 = arg2[14 * steps + ((cycle - 0) & mask)];
        assert(x10010 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10011 = arg2[15 * steps + ((cycle - 0) & mask)];
        assert(x10011 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10012 = arg2[16 * steps + ((cycle - 0) & mask)];
        assert(x10012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10013 = arg2[17 * steps + ((cycle - 0) & mask)];
        assert(x10013 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10014 = arg2[79 * steps + ((cycle - 0) & mask)];
        assert(x10014 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10015 = arg2[80 * steps + ((cycle - 0) & mask)];
        assert(x10015 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10016 = arg2[81 * steps + ((cycle - 0) & mask)];
        assert(x10016 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10017 = arg2[82 * steps + ((cycle - 0) & mask)];
        assert(x10017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10018 = arg2[83 * steps + ((cycle - 0) & mask)];
        assert(x10018 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10019 = arg2[84 * steps + ((cycle - 0) & mask)];
        assert(x10019 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10020 = arg2[85 * steps + ((cycle - 0) & mask)];
        assert(x10020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10021 = arg2[86 * steps + ((cycle - 0) & mask)];
        assert(x10021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10022 = arg2[87 * steps + ((cycle - 0) & mask)];
        assert(x10022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10023 = arg2[88 * steps + ((cycle - 0) & mask)];
        assert(x10023 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10024 = x10008 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10025 = x10009 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10026 = x10010 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10027 = x10011 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10028 = x10012 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10029 = x10013 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10030 = x10015 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10031 = x10016 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10032 = x10017 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10033 = x10018 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10034 = x10019 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10035 = x10020 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10036 = x10021 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10037 = x10022 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10038 = x10023 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10039 = x10014 + x10030;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10040 = x10039 + x10031;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10041 = x10040 + x10032;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10042 = x10041 + x10033;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10043 = x10042 + x10034;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10044 = x10043 + x10035;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10045 = x10044 + x10036;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10046 = x10045 + x10037;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10047 = x10046 + x10038;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10048 = x10047 + x10024;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10049 = x10048 + x10025;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10050 = x10049 + x10026;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10051 = x10050 + x10027;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10052 = x10051 + x10028;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10053 = x10052 + x10029;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10054 = x98 - x10053;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10055 = x10054 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10055);
          reg = x10055;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10056 = arg2[77 * steps + ((cycle - 0) & mask)];
        assert(x10056 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10057 = Fp(x10056.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10057);
            reg = x10057;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10058 = Fp(x10056.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10059 = x10058 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10059);
            reg = x10059;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10060 = Fp(x10056.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10061 = x10060 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10061);
            reg = x10061;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10062 = Fp(x10056.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10063 = x10062 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10063);
            reg = x10063;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10064 = Fp(x10056.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10065 = x10064 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10065);
            reg = x10065;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10066 = Fp(x10056.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10067 = x10066 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10067);
            reg = x10067;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10068 = Fp(x10056.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10069 = x10068 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10069);
            reg = x10069;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10070 = Fp(x10056.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10071 = x10070 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10071);
            reg = x10071;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10072 = Fp(x10056.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10073 = x10072 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10073);
            reg = x10073;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10074 = Fp(x10056.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10075 = x10074 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10075);
            reg = x10075;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10076 = Fp(x10056.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10077 = x10076 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10077);
            reg = x10077;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10078 = Fp(x10056.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10079 = x10078 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10079);
            reg = x10079;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10080 = Fp(x10056.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10081 = x10080 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10081);
            reg = x10081;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10082 = Fp(x10056.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10083 = x10082 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10083);
            reg = x10083;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10084 = Fp(x10056.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10085 = x10084 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10085);
            reg = x10085;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10086 = Fp(x10056.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10087 = x10086 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10087);
            reg = x10087;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10088 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x10088 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10089 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x10089 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10090 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x10090 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10091 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x10091 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10092 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x10092 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10093 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x10093 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10094 = arg2[24 * steps + ((cycle - 0) & mask)];
        assert(x10094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10095 = arg2[25 * steps + ((cycle - 0) & mask)];
        assert(x10095 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10096 = arg2[26 * steps + ((cycle - 0) & mask)];
        assert(x10096 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10097 = arg2[27 * steps + ((cycle - 0) & mask)];
        assert(x10097 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10098 = arg2[28 * steps + ((cycle - 0) & mask)];
        assert(x10098 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10099 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x10099 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10100 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x10100 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10101 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x10101 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10102 = arg2[32 * steps + ((cycle - 0) & mask)];
        assert(x10102 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10103 = arg2[33 * steps + ((cycle - 0) & mask)];
        assert(x10103 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10104 = x10089 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10105 = x10090 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10106 = x10091 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10107 = x10092 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10108 = x10093 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10109 = x10094 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10110 = x10095 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10111 = x10096 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10112 = x10097 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10113 = x10098 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10114 = x10099 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10115 = x10100 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10116 = x10101 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10117 = x10102 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10118 = x10103 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10119 = x10088 + x10104;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10120 = x10119 + x10105;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10121 = x10120 + x10106;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10122 = x10121 + x10107;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10123 = x10122 + x10108;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10124 = x10123 + x10109;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10125 = x10124 + x10110;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10126 = x10125 + x10111;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10127 = x10126 + x10112;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10128 = x10127 + x10113;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10129 = x10128 + x10114;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10130 = x10129 + x10115;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10131 = x10130 + x10116;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10132 = x10131 + x10117;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10133 = x10132 + x10118;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10134 = x10056 - x10133;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10135 = x10134 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10135);
          reg = x10135;
        }
      }
      if (x9180 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:11))
        auto x10136 = arg2[158 * steps + ((cycle - 0) & mask)];
        assert(x10136 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:26))
        auto x10137 = arg2[159 * steps + ((cycle - 0) & mask)];
        assert(x10137 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10138 = Fp(x10136.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10138);
            reg = x10138;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10139 = Fp(x10136.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10140 = x10139 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10140);
            reg = x10140;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10141 = Fp(x10136.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10142 = x10141 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10142);
            reg = x10142;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10143 = Fp(x10136.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10144 = x10143 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10144);
            reg = x10144;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10145 = Fp(x10136.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10146 = x10145 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10146);
            reg = x10146;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10147 = Fp(x10136.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10148 = x10147 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10148);
            reg = x10148;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10149 = Fp(x10136.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10150 = x10149 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10150);
            reg = x10150;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10151 = Fp(x10136.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10152 = x10151 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10152);
            reg = x10152;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10153 = Fp(x10136.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10154 = x10153 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10154);
            reg = x10154;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10155 = Fp(x10136.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10156 = x10155 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10156);
            reg = x10156;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10157 = Fp(x10136.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10158 = x10157 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10158);
            reg = x10158;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10159 = Fp(x10136.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10160 = x10159 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10160);
            reg = x10160;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10161 = Fp(x10136.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10162 = x10161 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10162);
            reg = x10162;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10163 = Fp(x10136.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10164 = x10163 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10164);
            reg = x10164;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10165 = Fp(x10136.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10166 = x10165 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10166);
            reg = x10166;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10167 = Fp(x10136.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10168 = x10167 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10168);
            reg = x10168;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10169 = arg2[12 * steps + ((cycle - 0) & mask)];
        assert(x10169 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10170 = arg2[13 * steps + ((cycle - 0) & mask)];
        assert(x10170 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10171 = arg2[14 * steps + ((cycle - 0) & mask)];
        assert(x10171 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10172 = arg2[15 * steps + ((cycle - 0) & mask)];
        assert(x10172 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10173 = arg2[16 * steps + ((cycle - 0) & mask)];
        assert(x10173 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10174 = arg2[17 * steps + ((cycle - 0) & mask)];
        assert(x10174 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10175 = arg2[79 * steps + ((cycle - 0) & mask)];
        assert(x10175 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10176 = arg2[80 * steps + ((cycle - 0) & mask)];
        assert(x10176 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10177 = arg2[81 * steps + ((cycle - 0) & mask)];
        assert(x10177 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10178 = arg2[82 * steps + ((cycle - 0) & mask)];
        assert(x10178 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10179 = arg2[83 * steps + ((cycle - 0) & mask)];
        assert(x10179 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10180 = arg2[84 * steps + ((cycle - 0) & mask)];
        assert(x10180 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10181 = arg2[85 * steps + ((cycle - 0) & mask)];
        assert(x10181 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10182 = arg2[86 * steps + ((cycle - 0) & mask)];
        assert(x10182 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10183 = arg2[87 * steps + ((cycle - 0) & mask)];
        assert(x10183 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10184 = arg2[88 * steps + ((cycle - 0) & mask)];
        assert(x10184 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10185 = x10169 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10186 = x10170 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10187 = x10171 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10188 = x10172 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10189 = x10173 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10190 = x10174 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10191 = x10176 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10192 = x10177 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10193 = x10178 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10194 = x10179 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10195 = x10180 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10196 = x10181 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10197 = x10182 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10198 = x10183 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10199 = x10184 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10200 = x10175 + x10191;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10201 = x10200 + x10192;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10202 = x10201 + x10193;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10203 = x10202 + x10194;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10204 = x10203 + x10195;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10205 = x10204 + x10196;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10206 = x10205 + x10197;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10207 = x10206 + x10198;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10208 = x10207 + x10199;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10209 = x10208 + x10185;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10210 = x10209 + x10186;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10211 = x10210 + x10187;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10212 = x10211 + x10188;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10213 = x10212 + x10189;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10214 = x10213 + x10190;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10215 = x10136 - x10214;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10216 = x10215 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10216);
          reg = x10216;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10217 = arg2[77 * steps + ((cycle - 0) & mask)];
        assert(x10217 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":117:30)
        auto x10218 = x10137 + x10217;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10219 = Fp(x10218.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10219);
            reg = x10219;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10220 = Fp(x10218.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10221 = x10220 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10221);
            reg = x10221;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10222 = Fp(x10218.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10223 = x10222 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10223);
            reg = x10223;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10224 = Fp(x10218.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10225 = x10224 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10225);
            reg = x10225;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10226 = Fp(x10218.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10227 = x10226 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10227);
            reg = x10227;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10228 = Fp(x10218.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10229 = x10228 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10229);
            reg = x10229;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10230 = Fp(x10218.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10231 = x10230 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10231);
            reg = x10231;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10232 = Fp(x10218.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10233 = x10232 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10233);
            reg = x10233;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10234 = Fp(x10218.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10235 = x10234 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10235);
            reg = x10235;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10236 = Fp(x10218.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10237 = x10236 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10237);
            reg = x10237;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10238 = Fp(x10218.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10239 = x10238 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10239);
            reg = x10239;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10240 = Fp(x10218.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10241 = x10240 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10241);
            reg = x10241;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10242 = Fp(x10218.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10243 = x10242 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10243);
            reg = x10243;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10244 = Fp(x10218.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10245 = x10244 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10245);
            reg = x10245;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10246 = Fp(x10218.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10247 = x10246 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10247);
            reg = x10247;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10248 = Fp(x10218.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10249 = x10248 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10249);
            reg = x10249;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10250 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x10250 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10251 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x10251 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10252 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x10252 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10253 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x10253 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10254 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x10254 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10255 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x10255 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10256 = arg2[24 * steps + ((cycle - 0) & mask)];
        assert(x10256 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10257 = arg2[25 * steps + ((cycle - 0) & mask)];
        assert(x10257 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10258 = arg2[26 * steps + ((cycle - 0) & mask)];
        assert(x10258 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10259 = arg2[27 * steps + ((cycle - 0) & mask)];
        assert(x10259 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10260 = arg2[28 * steps + ((cycle - 0) & mask)];
        assert(x10260 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10261 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x10261 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10262 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x10262 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10263 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x10263 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10264 = arg2[32 * steps + ((cycle - 0) & mask)];
        assert(x10264 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10265 = arg2[33 * steps + ((cycle - 0) & mask)];
        assert(x10265 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10266 = x10251 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10267 = x10252 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10268 = x10253 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10269 = x10254 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10270 = x10255 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10271 = x10256 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10272 = x10257 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10273 = x10258 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10274 = x10259 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10275 = x10260 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10276 = x10261 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10277 = x10262 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10278 = x10263 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10279 = x10264 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10280 = x10265 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10281 = x10250 + x10266;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10282 = x10281 + x10267;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10283 = x10282 + x10268;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10284 = x10283 + x10269;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10285 = x10284 + x10270;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10286 = x10285 + x10271;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10287 = x10286 + x10272;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10288 = x10287 + x10273;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10289 = x10288 + x10274;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10290 = x10289 + x10275;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10291 = x10290 + x10276;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10292 = x10291 + x10277;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10293 = x10292 + x10278;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10294 = x10293 + x10279;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10295 = x10294 + x10280;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10296 = x10218 - x10295;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10297 = x10296 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10297);
          reg = x10297;
        }
      }
      if (x9179 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10298 = arg2[160 * steps + ((cycle - 4) & mask)];
        assert(x10298 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10299 = arg2[161 * steps + ((cycle - 4) & mask)];
        assert(x10299 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10300 = arg2[162 * steps + ((cycle - 4) & mask)];
        assert(x10300 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10301 = arg2[163 * steps + ((cycle - 4) & mask)];
        assert(x10301 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10302 = arg2[164 * steps + ((cycle - 4) & mask)];
        assert(x10302 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10303 = arg2[165 * steps + ((cycle - 4) & mask)];
        assert(x10303 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10304 = arg2[166 * steps + ((cycle - 4) & mask)];
        assert(x10304 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10305 = arg2[167 * steps + ((cycle - 4) & mask)];
        assert(x10305 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10306 = arg2[168 * steps + ((cycle - 4) & mask)];
        assert(x10306 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10307 = arg2[169 * steps + ((cycle - 4) & mask)];
        assert(x10307 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10308 = arg2[170 * steps + ((cycle - 4) & mask)];
        assert(x10308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10309 = arg2[171 * steps + ((cycle - 4) & mask)];
        assert(x10309 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10310 = arg2[172 * steps + ((cycle - 4) & mask)];
        assert(x10310 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10311 = arg2[173 * steps + ((cycle - 4) & mask)];
        assert(x10311 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10312 = arg2[174 * steps + ((cycle - 4) & mask)];
        assert(x10312 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10313 = arg2[175 * steps + ((cycle - 4) & mask)];
        assert(x10313 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10314 = arg2[176 * steps + ((cycle - 4) & mask)];
        assert(x10314 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10315 = arg2[177 * steps + ((cycle - 4) & mask)];
        assert(x10315 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10316 = arg2[178 * steps + ((cycle - 4) & mask)];
        assert(x10316 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10317 = arg2[179 * steps + ((cycle - 4) & mask)];
        assert(x10317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10318 = arg2[180 * steps + ((cycle - 4) & mask)];
        assert(x10318 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10319 = arg2[181 * steps + ((cycle - 4) & mask)];
        assert(x10319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10320 = arg2[182 * steps + ((cycle - 4) & mask)];
        assert(x10320 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10321 = arg2[183 * steps + ((cycle - 4) & mask)];
        assert(x10321 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10322 = arg2[184 * steps + ((cycle - 4) & mask)];
        assert(x10322 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10323 = arg2[185 * steps + ((cycle - 4) & mask)];
        assert(x10323 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10324 = arg2[186 * steps + ((cycle - 4) & mask)];
        assert(x10324 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10325 = arg2[187 * steps + ((cycle - 4) & mask)];
        assert(x10325 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10326 = arg2[188 * steps + ((cycle - 4) & mask)];
        assert(x10326 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10327 = arg2[189 * steps + ((cycle - 4) & mask)];
        assert(x10327 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10328 = arg2[190 * steps + ((cycle - 4) & mask)];
        assert(x10328 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10329 = arg2[191 * steps + ((cycle - 4) & mask)];
        assert(x10329 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10330 = arg2[160 * steps + ((cycle - 68) & mask)];
        assert(x10330 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10331 = arg2[161 * steps + ((cycle - 68) & mask)];
        assert(x10331 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10332 = arg2[162 * steps + ((cycle - 68) & mask)];
        assert(x10332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10333 = arg2[163 * steps + ((cycle - 68) & mask)];
        assert(x10333 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10334 = arg2[164 * steps + ((cycle - 68) & mask)];
        assert(x10334 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10335 = arg2[165 * steps + ((cycle - 68) & mask)];
        assert(x10335 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10336 = arg2[166 * steps + ((cycle - 68) & mask)];
        assert(x10336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10337 = arg2[167 * steps + ((cycle - 68) & mask)];
        assert(x10337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10338 = arg2[168 * steps + ((cycle - 68) & mask)];
        assert(x10338 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10339 = arg2[169 * steps + ((cycle - 68) & mask)];
        assert(x10339 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10340 = arg2[170 * steps + ((cycle - 68) & mask)];
        assert(x10340 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10341 = arg2[171 * steps + ((cycle - 68) & mask)];
        assert(x10341 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10342 = arg2[172 * steps + ((cycle - 68) & mask)];
        assert(x10342 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10343 = arg2[173 * steps + ((cycle - 68) & mask)];
        assert(x10343 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10344 = arg2[174 * steps + ((cycle - 68) & mask)];
        assert(x10344 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10345 = arg2[175 * steps + ((cycle - 68) & mask)];
        assert(x10345 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10346 = arg2[176 * steps + ((cycle - 68) & mask)];
        assert(x10346 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10347 = arg2[177 * steps + ((cycle - 68) & mask)];
        assert(x10347 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10348 = arg2[178 * steps + ((cycle - 68) & mask)];
        assert(x10348 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10349 = arg2[179 * steps + ((cycle - 68) & mask)];
        assert(x10349 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10350 = arg2[180 * steps + ((cycle - 68) & mask)];
        assert(x10350 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10351 = arg2[181 * steps + ((cycle - 68) & mask)];
        assert(x10351 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10352 = arg2[182 * steps + ((cycle - 68) & mask)];
        assert(x10352 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10353 = arg2[183 * steps + ((cycle - 68) & mask)];
        assert(x10353 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10354 = arg2[184 * steps + ((cycle - 68) & mask)];
        assert(x10354 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10355 = arg2[185 * steps + ((cycle - 68) & mask)];
        assert(x10355 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10356 = arg2[186 * steps + ((cycle - 68) & mask)];
        assert(x10356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10357 = arg2[187 * steps + ((cycle - 68) & mask)];
        assert(x10357 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10358 = arg2[188 * steps + ((cycle - 68) & mask)];
        assert(x10358 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10359 = arg2[189 * steps + ((cycle - 68) & mask)];
        assert(x10359 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10360 = arg2[190 * steps + ((cycle - 68) & mask)];
        assert(x10360 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10361 = arg2[191 * steps + ((cycle - 68) & mask)];
        assert(x10361 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10362 = x10299 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10363 = x10300 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10364 = x10301 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10365 = x10302 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10366 = x10303 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10367 = x10304 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10368 = x10305 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10369 = x10306 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10370 = x10307 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10371 = x10308 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10372 = x10309 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10373 = x10310 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10374 = x10311 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10375 = x10312 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10376 = x10313 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10377 = x10315 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10378 = x10316 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10379 = x10317 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10380 = x10318 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10381 = x10319 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10382 = x10320 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10383 = x10321 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10384 = x10322 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10385 = x10323 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10386 = x10324 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10387 = x10325 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10388 = x10326 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10389 = x10327 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10390 = x10328 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10391 = x10329 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10392 = x10331 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10393 = x10332 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10394 = x10333 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10395 = x10334 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10396 = x10335 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10397 = x10336 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10398 = x10337 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10399 = x10338 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10400 = x10339 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10401 = x10340 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10402 = x10341 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10403 = x10342 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10404 = x10343 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10405 = x10344 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10406 = x10345 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10407 = x10347 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10408 = x10348 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10409 = x10349 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10410 = x10350 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10411 = x10351 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10412 = x10352 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10413 = x10353 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10414 = x10354 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10415 = x10355 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10416 = x10356 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10417 = x10357 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10418 = x10358 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10419 = x10359 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10420 = x10360 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10421 = x10361 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10422 = x10298 + x10362;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10423 = x10314 + x10377;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10424 = x10330 + x10392;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10425 = x10346 + x10407;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10426 = x10422 + x10363;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10427 = x10423 + x10378;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10428 = x10424 + x10393;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10429 = x10425 + x10408;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10430 = x10426 + x10364;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10431 = x10427 + x10379;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10432 = x10428 + x10394;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10433 = x10429 + x10409;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10434 = x10430 + x10365;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10435 = x10431 + x10380;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10436 = x10432 + x10395;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10437 = x10433 + x10410;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10438 = x10434 + x10366;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10439 = x10435 + x10381;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10440 = x10436 + x10396;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10441 = x10437 + x10411;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10442 = x10438 + x10367;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10443 = x10439 + x10382;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10444 = x10440 + x10397;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10445 = x10441 + x10412;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10446 = x10442 + x10368;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10447 = x10443 + x10383;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10448 = x10444 + x10398;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10449 = x10445 + x10413;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10450 = x10446 + x10369;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10451 = x10447 + x10384;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10452 = x10448 + x10399;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10453 = x10449 + x10414;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10454 = x10450 + x10370;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10455 = x10451 + x10385;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10456 = x10452 + x10400;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10457 = x10453 + x10415;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10458 = x10454 + x10371;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10459 = x10455 + x10386;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10460 = x10456 + x10401;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10461 = x10457 + x10416;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10462 = x10458 + x10372;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10463 = x10459 + x10387;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10464 = x10460 + x10402;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10465 = x10461 + x10417;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10466 = x10462 + x10373;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10467 = x10463 + x10388;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10468 = x10464 + x10403;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10469 = x10465 + x10418;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10470 = x10466 + x10374;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10471 = x10467 + x10389;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10472 = x10468 + x10404;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10473 = x10469 + x10419;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10474 = x10470 + x10375;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10475 = x10471 + x10390;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10476 = x10472 + x10405;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10477 = x10473 + x10420;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10478 = x10476 + x10406;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10479 = x10477 + x10421;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10480 = x10474 + x10376;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10481 = x10475 + x10391;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
        auto x10482 = x10480 + x10478;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
        auto x10483 = x10481 + x10479;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10484 = Fp(x10482.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10484);
            reg = x10484;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10485 = Fp(x10482.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10486 = x10485 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10486);
            reg = x10486;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10487 = Fp(x10482.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10488 = x10487 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10488);
            reg = x10488;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10489 = Fp(x10482.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10490 = x10489 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10490);
            reg = x10490;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10491 = Fp(x10482.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10492 = x10491 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10492);
            reg = x10492;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10493 = Fp(x10482.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10494 = x10493 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10494);
            reg = x10494;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10495 = Fp(x10482.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10496 = x10495 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10496);
            reg = x10496;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10497 = Fp(x10482.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10498 = x10497 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10498);
            reg = x10498;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10499 = Fp(x10482.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10500 = x10499 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10500);
            reg = x10500;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10501 = Fp(x10482.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10502 = x10501 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10502);
            reg = x10502;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10503 = Fp(x10482.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10504 = x10503 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10504);
            reg = x10504;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10505 = Fp(x10482.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10506 = x10505 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10506);
            reg = x10506;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10507 = Fp(x10482.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10508 = x10507 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10508);
            reg = x10508;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10509 = Fp(x10482.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10510 = x10509 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10510);
            reg = x10510;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10511 = Fp(x10482.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10512 = x10511 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10512);
            reg = x10512;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10513 = Fp(x10482.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10514 = x10513 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10514);
            reg = x10514;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10515 = arg2[160 * steps + ((cycle - 0) & mask)];
        assert(x10515 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10516 = arg2[161 * steps + ((cycle - 0) & mask)];
        assert(x10516 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10517 = arg2[162 * steps + ((cycle - 0) & mask)];
        assert(x10517 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10518 = arg2[163 * steps + ((cycle - 0) & mask)];
        assert(x10518 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10519 = arg2[164 * steps + ((cycle - 0) & mask)];
        assert(x10519 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10520 = arg2[165 * steps + ((cycle - 0) & mask)];
        assert(x10520 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10521 = arg2[166 * steps + ((cycle - 0) & mask)];
        assert(x10521 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10522 = arg2[167 * steps + ((cycle - 0) & mask)];
        assert(x10522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10523 = arg2[168 * steps + ((cycle - 0) & mask)];
        assert(x10523 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10524 = arg2[169 * steps + ((cycle - 0) & mask)];
        assert(x10524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10525 = arg2[170 * steps + ((cycle - 0) & mask)];
        assert(x10525 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10526 = arg2[171 * steps + ((cycle - 0) & mask)];
        assert(x10526 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10527 = arg2[172 * steps + ((cycle - 0) & mask)];
        assert(x10527 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10528 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x10528 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10529 = arg2[174 * steps + ((cycle - 0) & mask)];
        assert(x10529 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10530 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x10530 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10531 = x10516 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10532 = x10517 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10533 = x10518 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10534 = x10519 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10535 = x10520 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10536 = x10521 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10537 = x10522 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10538 = x10523 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10539 = x10524 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10540 = x10525 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10541 = x10526 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10542 = x10527 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10543 = x10528 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10544 = x10529 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10545 = x10530 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10546 = x10515 + x10531;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10547 = x10546 + x10532;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10548 = x10547 + x10533;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10549 = x10548 + x10534;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10550 = x10549 + x10535;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10551 = x10550 + x10536;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10552 = x10551 + x10537;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10553 = x10552 + x10538;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10554 = x10553 + x10539;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10555 = x10554 + x10540;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10556 = x10555 + x10541;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10557 = x10556 + x10542;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10558 = x10557 + x10543;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10559 = x10558 + x10544;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10560 = x10559 + x10545;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10561 = x10482 - x10560;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10562 = x10561 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
          auto x10563 = Fp(x10562.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10563);
            reg = x10563;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10564 = arg2[73 * steps + ((cycle - 0) & mask)];
        assert(x10564 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
        auto x10565 = x10562 - x10564;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
        auto x10566 = x10565 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
        auto x10567 = x99 - x10566;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        auto x10568 = x10566 * x10567;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        assert(x10568 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
        auto x10569 = x10483 + x10562;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10570 = Fp(x10569.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10570);
            reg = x10570;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10571 = Fp(x10569.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10572 = x10571 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10572);
            reg = x10572;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10573 = Fp(x10569.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10574 = x10573 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10574);
            reg = x10574;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10575 = Fp(x10569.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10576 = x10575 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10576);
            reg = x10576;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10577 = Fp(x10569.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10578 = x10577 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10578);
            reg = x10578;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10579 = Fp(x10569.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10580 = x10579 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10580);
            reg = x10580;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10581 = Fp(x10569.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10582 = x10581 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10582);
            reg = x10582;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10583 = Fp(x10569.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10584 = x10583 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10584);
            reg = x10584;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10585 = Fp(x10569.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10586 = x10585 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10586);
            reg = x10586;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10587 = Fp(x10569.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10588 = x10587 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10588);
            reg = x10588;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10589 = Fp(x10569.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10590 = x10589 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10590);
            reg = x10590;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10591 = Fp(x10569.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10592 = x10591 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10592);
            reg = x10592;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10593 = Fp(x10569.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10594 = x10593 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10594);
            reg = x10594;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10595 = Fp(x10569.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10596 = x10595 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10596);
            reg = x10596;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10597 = Fp(x10569.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10598 = x10597 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10598);
            reg = x10598;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10599 = Fp(x10569.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10600 = x10599 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10600);
            reg = x10600;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10601 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x10601 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10602 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x10602 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10603 = arg2[178 * steps + ((cycle - 0) & mask)];
        assert(x10603 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10604 = arg2[179 * steps + ((cycle - 0) & mask)];
        assert(x10604 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10605 = arg2[180 * steps + ((cycle - 0) & mask)];
        assert(x10605 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10606 = arg2[181 * steps + ((cycle - 0) & mask)];
        assert(x10606 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10607 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x10607 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10608 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x10608 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10609 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x10609 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10610 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x10610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10611 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x10611 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10612 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x10612 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10613 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x10613 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10614 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x10614 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10615 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x10615 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10616 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x10616 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10617 = x10602 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10618 = x10603 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10619 = x10604 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10620 = x10605 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10621 = x10606 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10622 = x10607 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10623 = x10608 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10624 = x10609 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10625 = x10610 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10626 = x10611 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10627 = x10612 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10628 = x10613 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10629 = x10614 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10630 = x10615 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10631 = x10616 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10632 = x10601 + x10617;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10633 = x10632 + x10618;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10634 = x10633 + x10619;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10635 = x10634 + x10620;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10636 = x10635 + x10621;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10637 = x10636 + x10622;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10638 = x10637 + x10623;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10639 = x10638 + x10624;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10640 = x10639 + x10625;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10641 = x10640 + x10626;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10642 = x10641 + x10627;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10643 = x10642 + x10628;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10644 = x10643 + x10629;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10645 = x10644 + x10630;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10646 = x10645 + x10631;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10647 = x10569 - x10646;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10648 = x10647 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
          auto x10649 = Fp(x10648.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10649);
            reg = x10649;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10650 = arg2[74 * steps + ((cycle - 0) & mask)];
        assert(x10650 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
        auto x10651 = x10648 - x10650;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
        auto x10652 = x10651 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
        auto x10653 = x99 - x10652;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        auto x10654 = x10652 * x10653;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        assert(x10654 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10655 = arg2[192 * steps + ((cycle - 4) & mask)];
        assert(x10655 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10656 = arg2[193 * steps + ((cycle - 4) & mask)];
        assert(x10656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10657 = arg2[194 * steps + ((cycle - 4) & mask)];
        assert(x10657 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10658 = arg2[195 * steps + ((cycle - 4) & mask)];
        assert(x10658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10659 = arg2[196 * steps + ((cycle - 4) & mask)];
        assert(x10659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10660 = arg2[197 * steps + ((cycle - 4) & mask)];
        assert(x10660 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10661 = arg2[198 * steps + ((cycle - 4) & mask)];
        assert(x10661 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10662 = arg2[199 * steps + ((cycle - 4) & mask)];
        assert(x10662 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10663 = arg2[200 * steps + ((cycle - 4) & mask)];
        assert(x10663 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10664 = arg2[201 * steps + ((cycle - 4) & mask)];
        assert(x10664 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10665 = arg2[202 * steps + ((cycle - 4) & mask)];
        assert(x10665 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10666 = arg2[203 * steps + ((cycle - 4) & mask)];
        assert(x10666 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10667 = arg2[204 * steps + ((cycle - 4) & mask)];
        assert(x10667 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10668 = arg2[205 * steps + ((cycle - 4) & mask)];
        assert(x10668 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10669 = arg2[206 * steps + ((cycle - 4) & mask)];
        assert(x10669 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10670 = arg2[207 * steps + ((cycle - 4) & mask)];
        assert(x10670 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10671 = arg2[208 * steps + ((cycle - 4) & mask)];
        assert(x10671 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10672 = arg2[209 * steps + ((cycle - 4) & mask)];
        assert(x10672 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10673 = arg2[210 * steps + ((cycle - 4) & mask)];
        assert(x10673 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10674 = arg2[211 * steps + ((cycle - 4) & mask)];
        assert(x10674 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10675 = arg2[212 * steps + ((cycle - 4) & mask)];
        assert(x10675 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10676 = arg2[213 * steps + ((cycle - 4) & mask)];
        assert(x10676 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10677 = arg2[214 * steps + ((cycle - 4) & mask)];
        assert(x10677 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10678 = arg2[215 * steps + ((cycle - 4) & mask)];
        assert(x10678 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10679 = arg2[216 * steps + ((cycle - 4) & mask)];
        assert(x10679 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10680 = arg2[217 * steps + ((cycle - 4) & mask)];
        assert(x10680 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10681 = arg2[218 * steps + ((cycle - 4) & mask)];
        assert(x10681 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10682 = arg2[219 * steps + ((cycle - 4) & mask)];
        assert(x10682 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10683 = arg2[220 * steps + ((cycle - 4) & mask)];
        assert(x10683 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10684 = arg2[221 * steps + ((cycle - 4) & mask)];
        assert(x10684 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10685 = arg2[222 * steps + ((cycle - 4) & mask)];
        assert(x10685 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10686 = arg2[223 * steps + ((cycle - 4) & mask)];
        assert(x10686 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10687 = arg2[192 * steps + ((cycle - 68) & mask)];
        assert(x10687 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10688 = arg2[193 * steps + ((cycle - 68) & mask)];
        assert(x10688 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10689 = arg2[194 * steps + ((cycle - 68) & mask)];
        assert(x10689 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10690 = arg2[195 * steps + ((cycle - 68) & mask)];
        assert(x10690 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10691 = arg2[196 * steps + ((cycle - 68) & mask)];
        assert(x10691 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10692 = arg2[197 * steps + ((cycle - 68) & mask)];
        assert(x10692 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10693 = arg2[198 * steps + ((cycle - 68) & mask)];
        assert(x10693 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10694 = arg2[199 * steps + ((cycle - 68) & mask)];
        assert(x10694 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10695 = arg2[200 * steps + ((cycle - 68) & mask)];
        assert(x10695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10696 = arg2[201 * steps + ((cycle - 68) & mask)];
        assert(x10696 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10697 = arg2[202 * steps + ((cycle - 68) & mask)];
        assert(x10697 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10698 = arg2[203 * steps + ((cycle - 68) & mask)];
        assert(x10698 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10699 = arg2[204 * steps + ((cycle - 68) & mask)];
        assert(x10699 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10700 = arg2[205 * steps + ((cycle - 68) & mask)];
        assert(x10700 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10701 = arg2[206 * steps + ((cycle - 68) & mask)];
        assert(x10701 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10702 = arg2[207 * steps + ((cycle - 68) & mask)];
        assert(x10702 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10703 = arg2[208 * steps + ((cycle - 68) & mask)];
        assert(x10703 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10704 = arg2[209 * steps + ((cycle - 68) & mask)];
        assert(x10704 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10705 = arg2[210 * steps + ((cycle - 68) & mask)];
        assert(x10705 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10706 = arg2[211 * steps + ((cycle - 68) & mask)];
        assert(x10706 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10707 = arg2[212 * steps + ((cycle - 68) & mask)];
        assert(x10707 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10708 = arg2[213 * steps + ((cycle - 68) & mask)];
        assert(x10708 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10709 = arg2[214 * steps + ((cycle - 68) & mask)];
        assert(x10709 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10710 = arg2[215 * steps + ((cycle - 68) & mask)];
        assert(x10710 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10711 = arg2[216 * steps + ((cycle - 68) & mask)];
        assert(x10711 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10712 = arg2[217 * steps + ((cycle - 68) & mask)];
        assert(x10712 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10713 = arg2[218 * steps + ((cycle - 68) & mask)];
        assert(x10713 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10714 = arg2[219 * steps + ((cycle - 68) & mask)];
        assert(x10714 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10715 = arg2[220 * steps + ((cycle - 68) & mask)];
        assert(x10715 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10716 = arg2[221 * steps + ((cycle - 68) & mask)];
        assert(x10716 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10717 = arg2[222 * steps + ((cycle - 68) & mask)];
        assert(x10717 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10718 = arg2[223 * steps + ((cycle - 68) & mask)];
        assert(x10718 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10719 = x10656 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10720 = x10657 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10721 = x10658 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10722 = x10659 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10723 = x10660 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10724 = x10661 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10725 = x10662 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10726 = x10663 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10727 = x10664 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10728 = x10665 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10729 = x10666 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10730 = x10667 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10731 = x10668 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10732 = x10669 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10733 = x10670 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10734 = x10672 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10735 = x10673 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10736 = x10674 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10737 = x10675 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10738 = x10676 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10739 = x10677 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10740 = x10678 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10741 = x10679 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10742 = x10680 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10743 = x10681 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10744 = x10682 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10745 = x10683 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10746 = x10684 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10747 = x10685 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10748 = x10686 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10749 = x10688 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10750 = x10689 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10751 = x10690 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10752 = x10691 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10753 = x10692 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10754 = x10693 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10755 = x10694 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10756 = x10695 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10757 = x10696 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10758 = x10697 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10759 = x10698 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10760 = x10699 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10761 = x10700 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10762 = x10701 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10763 = x10702 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10764 = x10704 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10765 = x10705 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10766 = x10706 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10767 = x10707 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10768 = x10708 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10769 = x10709 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10770 = x10710 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10771 = x10711 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10772 = x10712 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10773 = x10713 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10774 = x10714 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10775 = x10715 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10776 = x10716 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10777 = x10717 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
        auto x10778 = x10718 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10779 = x10655 + x10719;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10780 = x10671 + x10734;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10781 = x10687 + x10749;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10782 = x10703 + x10764;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10783 = x10779 + x10720;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10784 = x10780 + x10735;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10785 = x10781 + x10750;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10786 = x10782 + x10765;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10787 = x10783 + x10721;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10788 = x10784 + x10736;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10789 = x10785 + x10751;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10790 = x10786 + x10766;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10791 = x10787 + x10722;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10792 = x10788 + x10737;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10793 = x10789 + x10752;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10794 = x10790 + x10767;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10795 = x10791 + x10723;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10796 = x10792 + x10738;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10797 = x10793 + x10753;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10798 = x10794 + x10768;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10799 = x10795 + x10724;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10800 = x10796 + x10739;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10801 = x10797 + x10754;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10802 = x10798 + x10769;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10803 = x10799 + x10725;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10804 = x10800 + x10740;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10805 = x10801 + x10755;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10806 = x10802 + x10770;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10807 = x10803 + x10726;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10808 = x10804 + x10741;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10809 = x10805 + x10756;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10810 = x10806 + x10771;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10811 = x10807 + x10727;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10812 = x10808 + x10742;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10813 = x10809 + x10757;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10814 = x10810 + x10772;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10815 = x10811 + x10728;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10816 = x10812 + x10743;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10817 = x10813 + x10758;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10818 = x10814 + x10773;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10819 = x10815 + x10729;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10820 = x10816 + x10744;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10821 = x10817 + x10759;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10822 = x10818 + x10774;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10823 = x10819 + x10730;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10824 = x10820 + x10745;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10825 = x10821 + x10760;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10826 = x10822 + x10775;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10827 = x10823 + x10731;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10828 = x10824 + x10746;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10829 = x10825 + x10761;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10830 = x10826 + x10776;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10831 = x10827 + x10732;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10832 = x10828 + x10747;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10833 = x10829 + x10762;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10834 = x10830 + x10777;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10835 = x10833 + x10763;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10836 = x10834 + x10778;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10837 = x10831 + x10733;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
        auto x10838 = x10832 + x10748;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
        auto x10839 = x10837 + x10835;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
        auto x10840 = x10838 + x10836;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10841 = Fp(x10839.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10841);
            reg = x10841;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10842 = Fp(x10839.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10843 = x10842 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10843);
            reg = x10843;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10844 = Fp(x10839.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10845 = x10844 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10845);
            reg = x10845;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10846 = Fp(x10839.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10847 = x10846 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10847);
            reg = x10847;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10848 = Fp(x10839.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10849 = x10848 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10849);
            reg = x10849;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10850 = Fp(x10839.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10851 = x10850 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10851);
            reg = x10851;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10852 = Fp(x10839.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10853 = x10852 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10853);
            reg = x10853;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10854 = Fp(x10839.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10855 = x10854 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10855);
            reg = x10855;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10856 = Fp(x10839.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10857 = x10856 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10857);
            reg = x10857;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10858 = Fp(x10839.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10859 = x10858 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10859);
            reg = x10859;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10860 = Fp(x10839.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10861 = x10860 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10861);
            reg = x10861;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10862 = Fp(x10839.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10863 = x10862 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10863);
            reg = x10863;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10864 = Fp(x10839.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10865 = x10864 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10865);
            reg = x10865;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10866 = Fp(x10839.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10867 = x10866 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10867);
            reg = x10867;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10868 = Fp(x10839.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10869 = x10868 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10869);
            reg = x10869;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10870 = Fp(x10839.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10871 = x10870 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10871);
            reg = x10871;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10872 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x10872 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10873 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x10873 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10874 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x10874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10875 = arg2[195 * steps + ((cycle - 0) & mask)];
        assert(x10875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10876 = arg2[196 * steps + ((cycle - 0) & mask)];
        assert(x10876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10877 = arg2[197 * steps + ((cycle - 0) & mask)];
        assert(x10877 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10878 = arg2[198 * steps + ((cycle - 0) & mask)];
        assert(x10878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10879 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x10879 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10880 = arg2[200 * steps + ((cycle - 0) & mask)];
        assert(x10880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10881 = arg2[201 * steps + ((cycle - 0) & mask)];
        assert(x10881 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10882 = arg2[202 * steps + ((cycle - 0) & mask)];
        assert(x10882 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10883 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x10883 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10884 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x10884 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10885 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x10885 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10886 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x10886 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10887 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x10887 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10888 = x10873 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10889 = x10874 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10890 = x10875 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10891 = x10876 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10892 = x10877 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10893 = x10878 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10894 = x10879 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10895 = x10880 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10896 = x10881 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10897 = x10882 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10898 = x10883 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10899 = x10884 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10900 = x10885 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10901 = x10886 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10902 = x10887 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10903 = x10872 + x10888;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10904 = x10903 + x10889;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10905 = x10904 + x10890;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10906 = x10905 + x10891;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10907 = x10906 + x10892;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10908 = x10907 + x10893;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10909 = x10908 + x10894;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10910 = x10909 + x10895;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10911 = x10910 + x10896;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10912 = x10911 + x10897;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10913 = x10912 + x10898;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10914 = x10913 + x10899;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10915 = x10914 + x10900;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10916 = x10915 + x10901;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10917 = x10916 + x10902;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x10918 = x10839 - x10917;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x10919 = x10918 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
          auto x10920 = Fp(x10919.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10920);
            reg = x10920;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10921 = arg2[75 * steps + ((cycle - 0) & mask)];
        assert(x10921 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
        auto x10922 = x10919 - x10921;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
        auto x10923 = x10922 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
        auto x10924 = x99 - x10923;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        auto x10925 = x10923 * x10924;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        assert(x10925 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
        auto x10926 = x10840 + x10919;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10927 = Fp(x10926.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10927);
            reg = x10927;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10928 = Fp(x10926.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10929 = x10928 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10929);
            reg = x10929;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10930 = Fp(x10926.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10931 = x10930 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10931);
            reg = x10931;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10932 = Fp(x10926.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10933 = x10932 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10933);
            reg = x10933;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10934 = Fp(x10926.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10935 = x10934 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10935);
            reg = x10935;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10936 = Fp(x10926.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10937 = x10936 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10937);
            reg = x10937;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10938 = Fp(x10926.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10939 = x10938 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10939);
            reg = x10939;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10940 = Fp(x10926.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10941 = x10940 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10941);
            reg = x10941;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10942 = Fp(x10926.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10943 = x10942 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10943);
            reg = x10943;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10944 = Fp(x10926.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10945 = x10944 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10945);
            reg = x10945;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10946 = Fp(x10926.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10947 = x10946 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10947);
            reg = x10947;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10948 = Fp(x10926.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10949 = x10948 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10949);
            reg = x10949;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10950 = Fp(x10926.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10951 = x10950 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10951);
            reg = x10951;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10952 = Fp(x10926.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10953 = x10952 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10953);
            reg = x10953;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10954 = Fp(x10926.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10955 = x10954 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10955);
            reg = x10955;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x10956 = Fp(x10926.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x10957 = x10956 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[223 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10957);
            reg = x10957;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10958 = arg2[208 * steps + ((cycle - 0) & mask)];
        assert(x10958 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10959 = arg2[209 * steps + ((cycle - 0) & mask)];
        assert(x10959 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10960 = arg2[210 * steps + ((cycle - 0) & mask)];
        assert(x10960 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10961 = arg2[211 * steps + ((cycle - 0) & mask)];
        assert(x10961 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10962 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x10962 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10963 = arg2[213 * steps + ((cycle - 0) & mask)];
        assert(x10963 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10964 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x10964 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10965 = arg2[215 * steps + ((cycle - 0) & mask)];
        assert(x10965 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10966 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x10966 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10967 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x10967 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10968 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x10968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10969 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x10969 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10970 = arg2[220 * steps + ((cycle - 0) & mask)];
        assert(x10970 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10971 = arg2[221 * steps + ((cycle - 0) & mask)];
        assert(x10971 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10972 = arg2[222 * steps + ((cycle - 0) & mask)];
        assert(x10972 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10973 = arg2[223 * steps + ((cycle - 0) & mask)];
        assert(x10973 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10974 = x10959 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10975 = x10960 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10976 = x10961 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10977 = x10962 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10978 = x10963 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10979 = x10964 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10980 = x10965 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10981 = x10966 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10982 = x10967 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10983 = x10968 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10984 = x10969 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10985 = x10970 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10986 = x10971 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10987 = x10972 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x10988 = x10973 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10989 = x10958 + x10974;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10990 = x10989 + x10975;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10991 = x10990 + x10976;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10992 = x10991 + x10977;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10993 = x10992 + x10978;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10994 = x10993 + x10979;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10995 = x10994 + x10980;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10996 = x10995 + x10981;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10997 = x10996 + x10982;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10998 = x10997 + x10983;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x10999 = x10998 + x10984;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x11000 = x10999 + x10985;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x11001 = x11000 + x10986;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x11002 = x11001 + x10987;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x11003 = x11002 + x10988;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x11004 = x10926 - x11003;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x11005 = x11004 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
          auto x11006 = Fp(x11005.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11006);
            reg = x11006;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x11007 = arg2[76 * steps + ((cycle - 0) & mask)];
        assert(x11007 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
        auto x11008 = x11005 - x11007;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
        auto x11009 = x11008 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
        auto x11010 = x99 - x11009;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        auto x11011 = x11009 * x11010;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        assert(x11011 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11012 = arg2[152 * steps + ((cycle - 0) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":405:17)
      auto x11013 = x99 - x11012;
      if (x9188 != 0) {
        if (x11012 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
          auto x11014 = arg2[140 * steps + ((cycle - 0) & mask)];
          assert(x11014 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":409:26)
          auto x11015 = x11014 + x9171;
          {
            extern_args[0] = x11015;
            extern_args[1] = x99;
            extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
            auto x11016 = extern_outs[0];
            auto x11017 = extern_outs[1];
            auto x11018 = extern_outs[2];
            auto x11019 = extern_outs[3];
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11016);
              reg = x11016;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11017);
              reg = x11017;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11018);
              reg = x11018;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11019);
              reg = x11019;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11020 = arg2[120 * steps + ((cycle - 0) & mask)];
          assert(x11020 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11021 = arg2[121 * steps + ((cycle - 0) & mask)];
          assert(x11021 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11022 = arg2[122 * steps + ((cycle - 0) & mask)];
          assert(x11022 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11023 = arg2[123 * steps + ((cycle - 0) & mask)];
          assert(x11023 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11015);
            reg = x11015;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11020);
            reg = x11020;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11021);
            reg = x11021;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11022);
            reg = x11022;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11023);
            reg = x11023;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":410:26)
          auto x11024 = x11014 + x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":410:26)
          auto x11025 = x11024 + x9171;
          {
            extern_args[0] = x11025;
            extern_args[1] = x99;
            extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
            auto x11026 = extern_outs[0];
            auto x11027 = extern_outs[1];
            auto x11028 = extern_outs[2];
            auto x11029 = extern_outs[3];
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11026);
              reg = x11026;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11027);
              reg = x11027;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11028);
              reg = x11028;
            }
            // loc("zirgen/components/u32.cpp":88:5)
            {
              auto& reg = arg2[130 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x11029);
              reg = x11029;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11030 = arg2[127 * steps + ((cycle - 0) & mask)];
          assert(x11030 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11031 = arg2[128 * steps + ((cycle - 0) & mask)];
          assert(x11031 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11032 = arg2[129 * steps + ((cycle - 0) & mask)];
          assert(x11032 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11033 = arg2[130 * steps + ((cycle - 0) & mask)];
          assert(x11033 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11025);
            reg = x11025;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11030);
            reg = x11030;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11031);
            reg = x11031;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11032);
            reg = x11032;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11033);
            reg = x11033;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
          auto x11034 = arg2[117 * steps + ((cycle - 0) & mask)];
          assert(x11034 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11035 = arg2[160 * steps + ((cycle - 0) & mask)];
          assert(x11035 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11036 = arg2[161 * steps + ((cycle - 0) & mask)];
          assert(x11036 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11037 = arg2[162 * steps + ((cycle - 0) & mask)];
          assert(x11037 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11038 = arg2[163 * steps + ((cycle - 0) & mask)];
          assert(x11038 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11039 = arg2[164 * steps + ((cycle - 0) & mask)];
          assert(x11039 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11040 = arg2[165 * steps + ((cycle - 0) & mask)];
          assert(x11040 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11041 = arg2[166 * steps + ((cycle - 0) & mask)];
          assert(x11041 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11042 = arg2[167 * steps + ((cycle - 0) & mask)];
          assert(x11042 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11043 = arg2[168 * steps + ((cycle - 0) & mask)];
          assert(x11043 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11044 = arg2[169 * steps + ((cycle - 0) & mask)];
          assert(x11044 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11045 = arg2[170 * steps + ((cycle - 0) & mask)];
          assert(x11045 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11046 = arg2[171 * steps + ((cycle - 0) & mask)];
          assert(x11046 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11047 = arg2[172 * steps + ((cycle - 0) & mask)];
          assert(x11047 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11048 = arg2[173 * steps + ((cycle - 0) & mask)];
          assert(x11048 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11049 = arg2[174 * steps + ((cycle - 0) & mask)];
          assert(x11049 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11050 = arg2[175 * steps + ((cycle - 0) & mask)];
          assert(x11050 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11051 = arg2[176 * steps + ((cycle - 0) & mask)];
          assert(x11051 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11052 = arg2[177 * steps + ((cycle - 0) & mask)];
          assert(x11052 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11053 = arg2[178 * steps + ((cycle - 0) & mask)];
          assert(x11053 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11054 = arg2[179 * steps + ((cycle - 0) & mask)];
          assert(x11054 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11055 = arg2[180 * steps + ((cycle - 0) & mask)];
          assert(x11055 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11056 = arg2[181 * steps + ((cycle - 0) & mask)];
          assert(x11056 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11057 = arg2[182 * steps + ((cycle - 0) & mask)];
          assert(x11057 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11058 = arg2[183 * steps + ((cycle - 0) & mask)];
          assert(x11058 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11059 = arg2[184 * steps + ((cycle - 0) & mask)];
          assert(x11059 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11060 = arg2[185 * steps + ((cycle - 0) & mask)];
          assert(x11060 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11061 = arg2[186 * steps + ((cycle - 0) & mask)];
          assert(x11061 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11062 = arg2[187 * steps + ((cycle - 0) & mask)];
          assert(x11062 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11063 = arg2[188 * steps + ((cycle - 0) & mask)];
          assert(x11063 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11064 = arg2[189 * steps + ((cycle - 0) & mask)];
          assert(x11064 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11065 = arg2[190 * steps + ((cycle - 0) & mask)];
          assert(x11065 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11066 = arg2[191 * steps + ((cycle - 0) & mask)];
          assert(x11066 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":411:39)
          auto x11067 = x11034 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11068 = x11036 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11069 = x11037 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11070 = x11038 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11071 = x11039 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11072 = x11040 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11073 = x11041 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11074 = x11042 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11075 = x11044 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11076 = x11045 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11077 = x11046 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11078 = x11047 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11079 = x11048 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11080 = x11049 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11081 = x11050 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11082 = x11052 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11083 = x11053 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11084 = x11054 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11085 = x11055 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11086 = x11056 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11087 = x11057 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11088 = x11058 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11089 = x11060 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11090 = x11061 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11091 = x11062 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11092 = x11063 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11093 = x11064 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11094 = x11065 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11095 = x11066 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11096 = x11035 + x11068;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11097 = x11043 + x11075;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11098 = x11051 + x11082;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11099 = x11059 + x11089;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11100 = x11096 + x11069;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11101 = x11097 + x11076;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11102 = x11098 + x11083;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11103 = x11099 + x11090;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11104 = x11100 + x11070;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11105 = x11101 + x11077;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11106 = x11102 + x11084;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11107 = x11103 + x11091;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11108 = x11104 + x11071;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11109 = x11105 + x11078;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11110 = x11106 + x11085;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11111 = x11107 + x11092;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11112 = x11108 + x11072;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11113 = x11109 + x11079;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11114 = x11110 + x11086;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11115 = x11111 + x11093;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11116 = x11112 + x11073;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11117 = x11113 + x11080;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11118 = x11114 + x11087;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11119 = x11115 + x11094;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11120 = x11119 + x11095;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11121 = x11118 + x11088;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11122 = x11117 + x11081;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11123 = x11116 + x11074;
          extern_args[0] = x11067;
          extern_args[1] = x11020;
          extern_args[2] = x11021;
          extern_args[3] = x11022;
          extern_args[4] = x11023;
          extern_args[5] = x11120;
          extern_args[6] = x11121;
          extern_args[7] = x11122;
          extern_args[8] = x11123;
          extern_log(ctx, cycle, "  io0: [%10x] %w, a: %w", extern_args, extern_outs);
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
          auto x11124 = arg2[124 * steps + ((cycle - 0) & mask)];
          assert(x11124 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11125 = arg2[192 * steps + ((cycle - 0) & mask)];
          assert(x11125 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11126 = arg2[193 * steps + ((cycle - 0) & mask)];
          assert(x11126 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11127 = arg2[194 * steps + ((cycle - 0) & mask)];
          assert(x11127 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11128 = arg2[195 * steps + ((cycle - 0) & mask)];
          assert(x11128 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11129 = arg2[196 * steps + ((cycle - 0) & mask)];
          assert(x11129 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11130 = arg2[197 * steps + ((cycle - 0) & mask)];
          assert(x11130 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11131 = arg2[198 * steps + ((cycle - 0) & mask)];
          assert(x11131 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11132 = arg2[199 * steps + ((cycle - 0) & mask)];
          assert(x11132 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11133 = arg2[200 * steps + ((cycle - 0) & mask)];
          assert(x11133 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11134 = arg2[201 * steps + ((cycle - 0) & mask)];
          assert(x11134 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11135 = arg2[202 * steps + ((cycle - 0) & mask)];
          assert(x11135 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11136 = arg2[203 * steps + ((cycle - 0) & mask)];
          assert(x11136 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11137 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x11137 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11138 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x11138 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11139 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x11139 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11140 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x11140 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11141 = arg2[208 * steps + ((cycle - 0) & mask)];
          assert(x11141 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11142 = arg2[209 * steps + ((cycle - 0) & mask)];
          assert(x11142 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11143 = arg2[210 * steps + ((cycle - 0) & mask)];
          assert(x11143 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11144 = arg2[211 * steps + ((cycle - 0) & mask)];
          assert(x11144 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11145 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x11145 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11146 = arg2[213 * steps + ((cycle - 0) & mask)];
          assert(x11146 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11147 = arg2[214 * steps + ((cycle - 0) & mask)];
          assert(x11147 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11148 = arg2[215 * steps + ((cycle - 0) & mask)];
          assert(x11148 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11149 = arg2[216 * steps + ((cycle - 0) & mask)];
          assert(x11149 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11150 = arg2[217 * steps + ((cycle - 0) & mask)];
          assert(x11150 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11151 = arg2[218 * steps + ((cycle - 0) & mask)];
          assert(x11151 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11152 = arg2[219 * steps + ((cycle - 0) & mask)];
          assert(x11152 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11153 = arg2[220 * steps + ((cycle - 0) & mask)];
          assert(x11153 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11154 = arg2[221 * steps + ((cycle - 0) & mask)];
          assert(x11154 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11155 = arg2[222 * steps + ((cycle - 0) & mask)];
          assert(x11155 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11156 = arg2[223 * steps + ((cycle - 0) & mask)];
          assert(x11156 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":412:39)
          auto x11157 = x11124 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11158 = x11126 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11159 = x11127 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11160 = x11128 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11161 = x11129 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11162 = x11130 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11163 = x11131 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11164 = x11132 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11165 = x11134 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11166 = x11135 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11167 = x11136 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11168 = x11137 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11169 = x11138 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11170 = x11139 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11171 = x11140 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11172 = x11142 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11173 = x11143 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11174 = x11144 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11175 = x11145 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11176 = x11146 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11177 = x11147 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11178 = x11148 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11179 = x11150 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11180 = x11151 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11181 = x11152 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11182 = x11153 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11183 = x11154 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11184 = x11155 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11185 = x11156 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11186 = x11125 + x11158;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11187 = x11133 + x11165;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11188 = x11141 + x11172;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11189 = x11149 + x11179;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11190 = x11186 + x11159;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11191 = x11187 + x11166;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11192 = x11188 + x11173;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11193 = x11189 + x11180;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11194 = x11190 + x11160;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11195 = x11191 + x11167;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11196 = x11192 + x11174;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11197 = x11193 + x11181;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11198 = x11194 + x11161;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11199 = x11195 + x11168;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11200 = x11196 + x11175;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11201 = x11197 + x11182;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11202 = x11198 + x11162;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11203 = x11199 + x11169;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11204 = x11200 + x11176;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11205 = x11201 + x11183;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11206 = x11202 + x11163;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11207 = x11203 + x11170;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11208 = x11204 + x11177;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11209 = x11205 + x11184;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11210 = x11209 + x11185;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11211 = x11208 + x11178;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11212 = x11207 + x11171;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11213 = x11206 + x11164;
          extern_args[0] = x11157;
          extern_args[1] = x11030;
          extern_args[2] = x11031;
          extern_args[3] = x11032;
          extern_args[4] = x11033;
          extern_args[5] = x11210;
          extern_args[6] = x11211;
          extern_args[7] = x11212;
          extern_args[8] = x11213;
          extern_log(ctx, cycle, "  io1: [%10x] %w, e: %w", extern_args, extern_outs);
          // loc("./zirgen/components/u32.h":25:12)
          auto x11214 = x11021 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x11215 = x11022 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x11216 = x11023 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11217 = x11020 + x11214;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11218 = x11217 + x11215;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11219 = x11218 + x11216;
          // loc("./zirgen/components/u32.h":27:12)
          auto x11220 = x11123 * x82;
          // loc("./zirgen/components/u32.h":26:12)
          auto x11221 = x11122 * x80;
          // loc("./zirgen/components/u32.h":25:12)
          auto x11222 = x11121 * x93;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11223 = x11120 + x11222;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11224 = x11223 + x11221;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11225 = x11224 + x11220;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":413:10)
          auto x11226 = x11219 - x11225;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":413:10)
          assert(x11226 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:413");
          // loc("./zirgen/components/u32.h":25:12)
          auto x11227 = x11031 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x11228 = x11032 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x11229 = x11033 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11230 = x11030 + x11227;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11231 = x11230 + x11228;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11232 = x11231 + x11229;
          // loc("./zirgen/components/u32.h":27:12)
          auto x11233 = x11213 * x82;
          // loc("./zirgen/components/u32.h":26:12)
          auto x11234 = x11212 * x80;
          // loc("./zirgen/components/u32.h":25:12)
          auto x11235 = x11211 * x93;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11236 = x11210 + x11235;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11237 = x11236 + x11234;
          // loc("./zirgen/components/u32.h":24:12)
          auto x11238 = x11237 + x11233;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":414:10)
          auto x11239 = x11232 - x11238;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":414:10)
          assert(x11239 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:414");
        }
        if (x11013 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
          auto x11240 = arg2[140 * steps + ((cycle - 0) & mask)];
          assert(x11240 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11241 = arg2[160 * steps + ((cycle - 0) & mask)];
          assert(x11241 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11242 = arg2[161 * steps + ((cycle - 0) & mask)];
          assert(x11242 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11243 = arg2[162 * steps + ((cycle - 0) & mask)];
          assert(x11243 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11244 = arg2[163 * steps + ((cycle - 0) & mask)];
          assert(x11244 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11245 = arg2[164 * steps + ((cycle - 0) & mask)];
          assert(x11245 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11246 = arg2[165 * steps + ((cycle - 0) & mask)];
          assert(x11246 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11247 = arg2[166 * steps + ((cycle - 0) & mask)];
          assert(x11247 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11248 = arg2[167 * steps + ((cycle - 0) & mask)];
          assert(x11248 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11249 = arg2[168 * steps + ((cycle - 0) & mask)];
          assert(x11249 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11250 = arg2[169 * steps + ((cycle - 0) & mask)];
          assert(x11250 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11251 = arg2[170 * steps + ((cycle - 0) & mask)];
          assert(x11251 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11252 = arg2[171 * steps + ((cycle - 0) & mask)];
          assert(x11252 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11253 = arg2[172 * steps + ((cycle - 0) & mask)];
          assert(x11253 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11254 = arg2[173 * steps + ((cycle - 0) & mask)];
          assert(x11254 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11255 = arg2[174 * steps + ((cycle - 0) & mask)];
          assert(x11255 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11256 = arg2[175 * steps + ((cycle - 0) & mask)];
          assert(x11256 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11257 = arg2[176 * steps + ((cycle - 0) & mask)];
          assert(x11257 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11258 = arg2[177 * steps + ((cycle - 0) & mask)];
          assert(x11258 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11259 = arg2[178 * steps + ((cycle - 0) & mask)];
          assert(x11259 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11260 = arg2[179 * steps + ((cycle - 0) & mask)];
          assert(x11260 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11261 = arg2[180 * steps + ((cycle - 0) & mask)];
          assert(x11261 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11262 = arg2[181 * steps + ((cycle - 0) & mask)];
          assert(x11262 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11263 = arg2[182 * steps + ((cycle - 0) & mask)];
          assert(x11263 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11264 = arg2[183 * steps + ((cycle - 0) & mask)];
          assert(x11264 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11265 = arg2[184 * steps + ((cycle - 0) & mask)];
          assert(x11265 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11266 = arg2[185 * steps + ((cycle - 0) & mask)];
          assert(x11266 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11267 = arg2[186 * steps + ((cycle - 0) & mask)];
          assert(x11267 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11268 = arg2[187 * steps + ((cycle - 0) & mask)];
          assert(x11268 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11269 = arg2[188 * steps + ((cycle - 0) & mask)];
          assert(x11269 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11270 = arg2[189 * steps + ((cycle - 0) & mask)];
          assert(x11270 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11271 = arg2[190 * steps + ((cycle - 0) & mask)];
          assert(x11271 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11272 = arg2[191 * steps + ((cycle - 0) & mask)];
          assert(x11272 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11273 = x11242 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11274 = x11243 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11275 = x11244 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11276 = x11245 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11277 = x11246 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11278 = x11247 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11279 = x11248 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11280 = x11250 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11281 = x11251 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11282 = x11252 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11283 = x11253 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11284 = x11254 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11285 = x11255 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11286 = x11256 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11287 = x11258 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11288 = x11259 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11289 = x11260 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11290 = x11261 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11291 = x11262 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11292 = x11263 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11293 = x11264 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11294 = x11266 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11295 = x11267 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11296 = x11268 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11297 = x11269 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11298 = x11270 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11299 = x11271 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11300 = x11272 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":417:27)
          auto x11301 = x11240 + x9171;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11302 = x11241 + x11273;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11303 = x11249 + x11280;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11304 = x11257 + x11287;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11305 = x11265 + x11294;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11306 = x11302 + x11274;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11307 = x11303 + x11281;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11308 = x11304 + x11288;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11309 = x11305 + x11295;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11310 = x11306 + x11275;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11311 = x11307 + x11282;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11312 = x11308 + x11289;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11313 = x11309 + x11296;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11314 = x11310 + x11276;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11315 = x11311 + x11283;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11316 = x11312 + x11290;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11317 = x11313 + x11297;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11318 = x11314 + x11277;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11319 = x11315 + x11284;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11320 = x11316 + x11291;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11321 = x11317 + x11298;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11322 = x11318 + x11278;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11323 = x11319 + x11285;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11324 = x11320 + x11292;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11325 = x11321 + x11299;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11326 = x11325 + x11300;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11327 = x11324 + x11293;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11328 = x11323 + x11286;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11329 = x11322 + x11279;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11326);
            reg = x11326;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11327);
            reg = x11327;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11328);
            reg = x11328;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11329);
            reg = x11329;
          }
          {
            extern_args[0] = x11301;
            extern_args[1] = x11326;
            extern_args[2] = x11327;
            extern_args[3] = x11328;
            extern_args[4] = x11329;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11330 = arg2[120 * steps + ((cycle - 0) & mask)];
          assert(x11330 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11331 = arg2[121 * steps + ((cycle - 0) & mask)];
          assert(x11331 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11332 = arg2[122 * steps + ((cycle - 0) & mask)];
          assert(x11332 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11333 = arg2[123 * steps + ((cycle - 0) & mask)];
          assert(x11333 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11301);
            reg = x11301;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11330);
            reg = x11330;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11331);
            reg = x11331;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11332);
            reg = x11332;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11333);
            reg = x11333;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11334 = arg2[192 * steps + ((cycle - 0) & mask)];
          assert(x11334 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11335 = arg2[193 * steps + ((cycle - 0) & mask)];
          assert(x11335 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11336 = arg2[194 * steps + ((cycle - 0) & mask)];
          assert(x11336 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11337 = arg2[195 * steps + ((cycle - 0) & mask)];
          assert(x11337 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11338 = arg2[196 * steps + ((cycle - 0) & mask)];
          assert(x11338 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11339 = arg2[197 * steps + ((cycle - 0) & mask)];
          assert(x11339 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11340 = arg2[198 * steps + ((cycle - 0) & mask)];
          assert(x11340 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11341 = arg2[199 * steps + ((cycle - 0) & mask)];
          assert(x11341 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11342 = arg2[200 * steps + ((cycle - 0) & mask)];
          assert(x11342 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11343 = arg2[201 * steps + ((cycle - 0) & mask)];
          assert(x11343 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11344 = arg2[202 * steps + ((cycle - 0) & mask)];
          assert(x11344 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11345 = arg2[203 * steps + ((cycle - 0) & mask)];
          assert(x11345 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11346 = arg2[204 * steps + ((cycle - 0) & mask)];
          assert(x11346 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11347 = arg2[205 * steps + ((cycle - 0) & mask)];
          assert(x11347 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11348 = arg2[206 * steps + ((cycle - 0) & mask)];
          assert(x11348 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11349 = arg2[207 * steps + ((cycle - 0) & mask)];
          assert(x11349 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11350 = arg2[208 * steps + ((cycle - 0) & mask)];
          assert(x11350 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11351 = arg2[209 * steps + ((cycle - 0) & mask)];
          assert(x11351 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11352 = arg2[210 * steps + ((cycle - 0) & mask)];
          assert(x11352 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11353 = arg2[211 * steps + ((cycle - 0) & mask)];
          assert(x11353 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11354 = arg2[212 * steps + ((cycle - 0) & mask)];
          assert(x11354 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11355 = arg2[213 * steps + ((cycle - 0) & mask)];
          assert(x11355 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11356 = arg2[214 * steps + ((cycle - 0) & mask)];
          assert(x11356 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11357 = arg2[215 * steps + ((cycle - 0) & mask)];
          assert(x11357 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11358 = arg2[216 * steps + ((cycle - 0) & mask)];
          assert(x11358 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11359 = arg2[217 * steps + ((cycle - 0) & mask)];
          assert(x11359 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11360 = arg2[218 * steps + ((cycle - 0) & mask)];
          assert(x11360 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11361 = arg2[219 * steps + ((cycle - 0) & mask)];
          assert(x11361 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11362 = arg2[220 * steps + ((cycle - 0) & mask)];
          assert(x11362 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11363 = arg2[221 * steps + ((cycle - 0) & mask)];
          assert(x11363 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11364 = arg2[222 * steps + ((cycle - 0) & mask)];
          assert(x11364 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11365 = arg2[223 * steps + ((cycle - 0) & mask)];
          assert(x11365 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11366 = x11335 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11367 = x11336 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11368 = x11337 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11369 = x11338 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11370 = x11339 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11371 = x11340 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11372 = x11341 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11373 = x11343 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11374 = x11344 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11375 = x11345 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11376 = x11346 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11377 = x11347 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11378 = x11348 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11379 = x11349 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11380 = x11351 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11381 = x11352 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11382 = x11353 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11383 = x11354 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11384 = x11355 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11385 = x11356 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11386 = x11357 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11387 = x11359 * x96;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11388 = x11360 * x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11389 = x11361 * x67;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11390 = x11362 * x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11391 = x11363 * x61;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11392 = x11364 * x55;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:53)
          auto x11393 = x11365 * x64;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":418:27)
          auto x11394 = x11240 + x81;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":418:27)
          auto x11395 = x11394 + x9171;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11396 = x11334 + x11366;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11397 = x11342 + x11373;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11398 = x11350 + x11380;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11399 = x11358 + x11387;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11400 = x11396 + x11367;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11401 = x11397 + x11374;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11402 = x11398 + x11381;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11403 = x11399 + x11388;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11404 = x11400 + x11368;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11405 = x11401 + x11375;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11406 = x11402 + x11382;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11407 = x11403 + x11389;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11408 = x11404 + x11369;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11409 = x11405 + x11376;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11410 = x11406 + x11383;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11411 = x11407 + x11390;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11412 = x11408 + x11370;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11413 = x11409 + x11377;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11414 = x11410 + x11384;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11415 = x11411 + x11391;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11416 = x11412 + x11371;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11417 = x11413 + x11378;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11418 = x11414 + x11385;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11419 = x11415 + x11392;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11420 = x11419 + x11393;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11421 = x11418 + x11386;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11422 = x11417 + x11379;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":147:30)
          auto x11423 = x11416 + x11372;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11420);
            reg = x11420;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11421);
            reg = x11421;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11422);
            reg = x11422;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11423);
            reg = x11423;
          }
          {
            extern_args[0] = x11395;
            extern_args[1] = x11420;
            extern_args[2] = x11421;
            extern_args[3] = x11422;
            extern_args[4] = x11423;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11424 = arg2[127 * steps + ((cycle - 0) & mask)];
          assert(x11424 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11425 = arg2[128 * steps + ((cycle - 0) & mask)];
          assert(x11425 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11426 = arg2[129 * steps + ((cycle - 0) & mask)];
          assert(x11426 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11427 = arg2[130 * steps + ((cycle - 0) & mask)];
          assert(x11427 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11395);
            reg = x11395;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11424);
            reg = x11424;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11425);
            reg = x11425;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11426);
            reg = x11426;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11427);
            reg = x11427;
          }
        }
      }
      if (x9189 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        if (x9179 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11428 = arg2[12 * steps + ((cycle - 0) & mask)];
      assert(x11428 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11429 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x11429 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11430 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x11430 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11431 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x11431 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11432 = arg2[13 * steps + ((cycle - 0) & mask)];
      assert(x11432 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11433 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x11433 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11434 = arg2[14 * steps + ((cycle - 0) & mask)];
      assert(x11434 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11435 = arg2[15 * steps + ((cycle - 0) & mask)];
      assert(x11435 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11436 = arg2[16 * steps + ((cycle - 0) & mask)];
      assert(x11436 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11437 = arg2[17 * steps + ((cycle - 0) & mask)];
      assert(x11437 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11438 = arg2[18 * steps + ((cycle - 0) & mask)];
      assert(x11438 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11439 = arg2[19 * steps + ((cycle - 0) & mask)];
      assert(x11439 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11440 = arg2[20 * steps + ((cycle - 0) & mask)];
      assert(x11440 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11441 = arg2[21 * steps + ((cycle - 0) & mask)];
      assert(x11441 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11442 = arg2[22 * steps + ((cycle - 0) & mask)];
      assert(x11442 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11443 = arg2[23 * steps + ((cycle - 0) & mask)];
      assert(x11443 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11444 = arg2[24 * steps + ((cycle - 0) & mask)];
      assert(x11444 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11445 = arg2[25 * steps + ((cycle - 0) & mask)];
      assert(x11445 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11446 = arg2[26 * steps + ((cycle - 0) & mask)];
      assert(x11446 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11447 = arg2[27 * steps + ((cycle - 0) & mask)];
      assert(x11447 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11448 = arg2[28 * steps + ((cycle - 0) & mask)];
      assert(x11448 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11449 = arg2[29 * steps + ((cycle - 0) & mask)];
      assert(x11449 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11450 = arg2[30 * steps + ((cycle - 0) & mask)];
      assert(x11450 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11451 = arg2[31 * steps + ((cycle - 0) & mask)];
      assert(x11451 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11452 = arg2[32 * steps + ((cycle - 0) & mask)];
      assert(x11452 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11453 = arg2[33 * steps + ((cycle - 0) & mask)];
      assert(x11453 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11454 = arg2[79 * steps + ((cycle - 0) & mask)];
      assert(x11454 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11455 = arg2[80 * steps + ((cycle - 0) & mask)];
      assert(x11455 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11456 = arg2[81 * steps + ((cycle - 0) & mask)];
      assert(x11456 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11457 = arg2[82 * steps + ((cycle - 0) & mask)];
      assert(x11457 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11458 = arg2[83 * steps + ((cycle - 0) & mask)];
      assert(x11458 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11459 = arg2[84 * steps + ((cycle - 0) & mask)];
      assert(x11459 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11460 = arg2[85 * steps + ((cycle - 0) & mask)];
      assert(x11460 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11461 = arg2[86 * steps + ((cycle - 0) & mask)];
      assert(x11461 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11462 = arg2[87 * steps + ((cycle - 0) & mask)];
      assert(x11462 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11463 = arg2[88 * steps + ((cycle - 0) & mask)];
      assert(x11463 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11464 = arg2[160 * steps + ((cycle - 1) & mask)];
      assert(x11464 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11465 = arg2[161 * steps + ((cycle - 1) & mask)];
      assert(x11465 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11466 = arg2[162 * steps + ((cycle - 1) & mask)];
      assert(x11466 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11467 = arg2[163 * steps + ((cycle - 1) & mask)];
      assert(x11467 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11468 = arg2[164 * steps + ((cycle - 1) & mask)];
      assert(x11468 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11469 = arg2[165 * steps + ((cycle - 1) & mask)];
      assert(x11469 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11470 = arg2[166 * steps + ((cycle - 1) & mask)];
      assert(x11470 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11471 = arg2[167 * steps + ((cycle - 1) & mask)];
      assert(x11471 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11472 = arg2[168 * steps + ((cycle - 1) & mask)];
      assert(x11472 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11473 = arg2[169 * steps + ((cycle - 1) & mask)];
      assert(x11473 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11474 = arg2[170 * steps + ((cycle - 1) & mask)];
      assert(x11474 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11475 = arg2[171 * steps + ((cycle - 1) & mask)];
      assert(x11475 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11476 = arg2[172 * steps + ((cycle - 1) & mask)];
      assert(x11476 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11477 = arg2[173 * steps + ((cycle - 1) & mask)];
      assert(x11477 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11478 = arg2[174 * steps + ((cycle - 1) & mask)];
      assert(x11478 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11479 = arg2[175 * steps + ((cycle - 1) & mask)];
      assert(x11479 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11480 = arg2[176 * steps + ((cycle - 1) & mask)];
      assert(x11480 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11481 = arg2[177 * steps + ((cycle - 1) & mask)];
      assert(x11481 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11482 = arg2[178 * steps + ((cycle - 1) & mask)];
      assert(x11482 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11483 = arg2[179 * steps + ((cycle - 1) & mask)];
      assert(x11483 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11484 = arg2[180 * steps + ((cycle - 1) & mask)];
      assert(x11484 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11485 = arg2[181 * steps + ((cycle - 1) & mask)];
      assert(x11485 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11486 = arg2[182 * steps + ((cycle - 1) & mask)];
      assert(x11486 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11487 = arg2[183 * steps + ((cycle - 1) & mask)];
      assert(x11487 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11488 = arg2[184 * steps + ((cycle - 1) & mask)];
      assert(x11488 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11489 = arg2[185 * steps + ((cycle - 1) & mask)];
      assert(x11489 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11490 = arg2[186 * steps + ((cycle - 1) & mask)];
      assert(x11490 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11491 = arg2[187 * steps + ((cycle - 1) & mask)];
      assert(x11491 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11492 = arg2[188 * steps + ((cycle - 1) & mask)];
      assert(x11492 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11493 = arg2[189 * steps + ((cycle - 1) & mask)];
      assert(x11493 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11494 = arg2[190 * steps + ((cycle - 1) & mask)];
      assert(x11494 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11495 = arg2[191 * steps + ((cycle - 1) & mask)];
      assert(x11495 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11496 = arg2[192 * steps + ((cycle - 1) & mask)];
      assert(x11496 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11497 = arg2[193 * steps + ((cycle - 1) & mask)];
      assert(x11497 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11498 = arg2[194 * steps + ((cycle - 1) & mask)];
      assert(x11498 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11499 = arg2[195 * steps + ((cycle - 1) & mask)];
      assert(x11499 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11500 = arg2[196 * steps + ((cycle - 1) & mask)];
      assert(x11500 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11501 = arg2[197 * steps + ((cycle - 1) & mask)];
      assert(x11501 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11502 = arg2[198 * steps + ((cycle - 1) & mask)];
      assert(x11502 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11503 = arg2[199 * steps + ((cycle - 1) & mask)];
      assert(x11503 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11504 = arg2[200 * steps + ((cycle - 1) & mask)];
      assert(x11504 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11505 = arg2[201 * steps + ((cycle - 1) & mask)];
      assert(x11505 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11506 = arg2[202 * steps + ((cycle - 1) & mask)];
      assert(x11506 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11507 = arg2[203 * steps + ((cycle - 1) & mask)];
      assert(x11507 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11508 = arg2[204 * steps + ((cycle - 1) & mask)];
      assert(x11508 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11509 = arg2[205 * steps + ((cycle - 1) & mask)];
      assert(x11509 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11510 = arg2[206 * steps + ((cycle - 1) & mask)];
      assert(x11510 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11511 = arg2[207 * steps + ((cycle - 1) & mask)];
      assert(x11511 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11512 = arg2[208 * steps + ((cycle - 1) & mask)];
      assert(x11512 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11513 = arg2[209 * steps + ((cycle - 1) & mask)];
      assert(x11513 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11514 = arg2[210 * steps + ((cycle - 1) & mask)];
      assert(x11514 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11515 = arg2[211 * steps + ((cycle - 1) & mask)];
      assert(x11515 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11516 = arg2[212 * steps + ((cycle - 1) & mask)];
      assert(x11516 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11517 = arg2[213 * steps + ((cycle - 1) & mask)];
      assert(x11517 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11518 = arg2[214 * steps + ((cycle - 1) & mask)];
      assert(x11518 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11519 = arg2[215 * steps + ((cycle - 1) & mask)];
      assert(x11519 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11520 = arg2[216 * steps + ((cycle - 1) & mask)];
      assert(x11520 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11521 = arg2[217 * steps + ((cycle - 1) & mask)];
      assert(x11521 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11522 = arg2[218 * steps + ((cycle - 1) & mask)];
      assert(x11522 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11523 = arg2[219 * steps + ((cycle - 1) & mask)];
      assert(x11523 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11524 = arg2[220 * steps + ((cycle - 1) & mask)];
      assert(x11524 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11525 = arg2[221 * steps + ((cycle - 1) & mask)];
      assert(x11525 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11526 = arg2[222 * steps + ((cycle - 1) & mask)];
      assert(x11526 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11527 = arg2[223 * steps + ((cycle - 1) & mask)];
      assert(x11527 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11528 = arg2[192 * steps + ((cycle - 2) & mask)];
      assert(x11528 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11529 = arg2[193 * steps + ((cycle - 2) & mask)];
      assert(x11529 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11530 = arg2[194 * steps + ((cycle - 2) & mask)];
      assert(x11530 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11531 = arg2[195 * steps + ((cycle - 2) & mask)];
      assert(x11531 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11532 = arg2[196 * steps + ((cycle - 2) & mask)];
      assert(x11532 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11533 = arg2[197 * steps + ((cycle - 2) & mask)];
      assert(x11533 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11534 = arg2[198 * steps + ((cycle - 2) & mask)];
      assert(x11534 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11535 = arg2[199 * steps + ((cycle - 2) & mask)];
      assert(x11535 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11536 = arg2[200 * steps + ((cycle - 2) & mask)];
      assert(x11536 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11537 = arg2[201 * steps + ((cycle - 2) & mask)];
      assert(x11537 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11538 = arg2[202 * steps + ((cycle - 2) & mask)];
      assert(x11538 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11539 = arg2[203 * steps + ((cycle - 2) & mask)];
      assert(x11539 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11540 = arg2[204 * steps + ((cycle - 2) & mask)];
      assert(x11540 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11541 = arg2[205 * steps + ((cycle - 2) & mask)];
      assert(x11541 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11542 = arg2[206 * steps + ((cycle - 2) & mask)];
      assert(x11542 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11543 = arg2[207 * steps + ((cycle - 2) & mask)];
      assert(x11543 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11544 = arg2[208 * steps + ((cycle - 2) & mask)];
      assert(x11544 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11545 = arg2[209 * steps + ((cycle - 2) & mask)];
      assert(x11545 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11546 = arg2[210 * steps + ((cycle - 2) & mask)];
      assert(x11546 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11547 = arg2[211 * steps + ((cycle - 2) & mask)];
      assert(x11547 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11548 = arg2[212 * steps + ((cycle - 2) & mask)];
      assert(x11548 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11549 = arg2[213 * steps + ((cycle - 2) & mask)];
      assert(x11549 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11550 = arg2[214 * steps + ((cycle - 2) & mask)];
      assert(x11550 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11551 = arg2[215 * steps + ((cycle - 2) & mask)];
      assert(x11551 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11552 = arg2[216 * steps + ((cycle - 2) & mask)];
      assert(x11552 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11553 = arg2[217 * steps + ((cycle - 2) & mask)];
      assert(x11553 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11554 = arg2[218 * steps + ((cycle - 2) & mask)];
      assert(x11554 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11555 = arg2[219 * steps + ((cycle - 2) & mask)];
      assert(x11555 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11556 = arg2[220 * steps + ((cycle - 2) & mask)];
      assert(x11556 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11557 = arg2[221 * steps + ((cycle - 2) & mask)];
      assert(x11557 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11558 = arg2[222 * steps + ((cycle - 2) & mask)];
      assert(x11558 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11559 = arg2[223 * steps + ((cycle - 2) & mask)];
      assert(x11559 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11560 = arg2[160 * steps + ((cycle - 2) & mask)];
      assert(x11560 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11561 = arg2[161 * steps + ((cycle - 2) & mask)];
      assert(x11561 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11562 = arg2[162 * steps + ((cycle - 2) & mask)];
      assert(x11562 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11563 = arg2[163 * steps + ((cycle - 2) & mask)];
      assert(x11563 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11564 = arg2[164 * steps + ((cycle - 2) & mask)];
      assert(x11564 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11565 = arg2[165 * steps + ((cycle - 2) & mask)];
      assert(x11565 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11566 = arg2[166 * steps + ((cycle - 2) & mask)];
      assert(x11566 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11567 = arg2[167 * steps + ((cycle - 2) & mask)];
      assert(x11567 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11568 = arg2[168 * steps + ((cycle - 2) & mask)];
      assert(x11568 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11569 = arg2[169 * steps + ((cycle - 2) & mask)];
      assert(x11569 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11570 = arg2[170 * steps + ((cycle - 2) & mask)];
      assert(x11570 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11571 = arg2[171 * steps + ((cycle - 2) & mask)];
      assert(x11571 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11572 = arg2[172 * steps + ((cycle - 2) & mask)];
      assert(x11572 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11573 = arg2[173 * steps + ((cycle - 2) & mask)];
      assert(x11573 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11574 = arg2[174 * steps + ((cycle - 2) & mask)];
      assert(x11574 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11575 = arg2[175 * steps + ((cycle - 2) & mask)];
      assert(x11575 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11576 = arg2[176 * steps + ((cycle - 2) & mask)];
      assert(x11576 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11577 = arg2[177 * steps + ((cycle - 2) & mask)];
      assert(x11577 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11578 = arg2[178 * steps + ((cycle - 2) & mask)];
      assert(x11578 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11579 = arg2[179 * steps + ((cycle - 2) & mask)];
      assert(x11579 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11580 = arg2[180 * steps + ((cycle - 2) & mask)];
      assert(x11580 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11581 = arg2[181 * steps + ((cycle - 2) & mask)];
      assert(x11581 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11582 = arg2[182 * steps + ((cycle - 2) & mask)];
      assert(x11582 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11583 = arg2[183 * steps + ((cycle - 2) & mask)];
      assert(x11583 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11584 = arg2[184 * steps + ((cycle - 2) & mask)];
      assert(x11584 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11585 = arg2[185 * steps + ((cycle - 2) & mask)];
      assert(x11585 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11586 = arg2[186 * steps + ((cycle - 2) & mask)];
      assert(x11586 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11587 = arg2[187 * steps + ((cycle - 2) & mask)];
      assert(x11587 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11588 = arg2[188 * steps + ((cycle - 2) & mask)];
      assert(x11588 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11589 = arg2[189 * steps + ((cycle - 2) & mask)];
      assert(x11589 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11590 = arg2[190 * steps + ((cycle - 2) & mask)];
      assert(x11590 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11591 = arg2[191 * steps + ((cycle - 2) & mask)];
      assert(x11591 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11592 = arg2[192 * steps + ((cycle - 3) & mask)];
      assert(x11592 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11593 = arg2[193 * steps + ((cycle - 3) & mask)];
      assert(x11593 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11594 = arg2[194 * steps + ((cycle - 3) & mask)];
      assert(x11594 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11595 = arg2[195 * steps + ((cycle - 3) & mask)];
      assert(x11595 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11596 = arg2[196 * steps + ((cycle - 3) & mask)];
      assert(x11596 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11597 = arg2[197 * steps + ((cycle - 3) & mask)];
      assert(x11597 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11598 = arg2[198 * steps + ((cycle - 3) & mask)];
      assert(x11598 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11599 = arg2[199 * steps + ((cycle - 3) & mask)];
      assert(x11599 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11600 = arg2[200 * steps + ((cycle - 3) & mask)];
      assert(x11600 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11601 = arg2[201 * steps + ((cycle - 3) & mask)];
      assert(x11601 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11602 = arg2[202 * steps + ((cycle - 3) & mask)];
      assert(x11602 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11603 = arg2[203 * steps + ((cycle - 3) & mask)];
      assert(x11603 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11604 = arg2[204 * steps + ((cycle - 3) & mask)];
      assert(x11604 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11605 = arg2[205 * steps + ((cycle - 3) & mask)];
      assert(x11605 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11606 = arg2[206 * steps + ((cycle - 3) & mask)];
      assert(x11606 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11607 = arg2[207 * steps + ((cycle - 3) & mask)];
      assert(x11607 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11608 = arg2[208 * steps + ((cycle - 3) & mask)];
      assert(x11608 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11609 = arg2[209 * steps + ((cycle - 3) & mask)];
      assert(x11609 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11610 = arg2[210 * steps + ((cycle - 3) & mask)];
      assert(x11610 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11611 = arg2[211 * steps + ((cycle - 3) & mask)];
      assert(x11611 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11612 = arg2[212 * steps + ((cycle - 3) & mask)];
      assert(x11612 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11613 = arg2[213 * steps + ((cycle - 3) & mask)];
      assert(x11613 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11614 = arg2[214 * steps + ((cycle - 3) & mask)];
      assert(x11614 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11615 = arg2[215 * steps + ((cycle - 3) & mask)];
      assert(x11615 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11616 = arg2[216 * steps + ((cycle - 3) & mask)];
      assert(x11616 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11617 = arg2[217 * steps + ((cycle - 3) & mask)];
      assert(x11617 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11618 = arg2[218 * steps + ((cycle - 3) & mask)];
      assert(x11618 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11619 = arg2[219 * steps + ((cycle - 3) & mask)];
      assert(x11619 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11620 = arg2[220 * steps + ((cycle - 3) & mask)];
      assert(x11620 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11621 = arg2[221 * steps + ((cycle - 3) & mask)];
      assert(x11621 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11622 = arg2[222 * steps + ((cycle - 3) & mask)];
      assert(x11622 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11623 = arg2[223 * steps + ((cycle - 3) & mask)];
      assert(x11623 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11624 = arg2[160 * steps + ((cycle - 3) & mask)];
      assert(x11624 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11625 = arg2[161 * steps + ((cycle - 3) & mask)];
      assert(x11625 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11626 = arg2[162 * steps + ((cycle - 3) & mask)];
      assert(x11626 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11627 = arg2[163 * steps + ((cycle - 3) & mask)];
      assert(x11627 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11628 = arg2[164 * steps + ((cycle - 3) & mask)];
      assert(x11628 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11629 = arg2[165 * steps + ((cycle - 3) & mask)];
      assert(x11629 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11630 = arg2[166 * steps + ((cycle - 3) & mask)];
      assert(x11630 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11631 = arg2[167 * steps + ((cycle - 3) & mask)];
      assert(x11631 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11632 = arg2[168 * steps + ((cycle - 3) & mask)];
      assert(x11632 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11633 = arg2[169 * steps + ((cycle - 3) & mask)];
      assert(x11633 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11634 = arg2[170 * steps + ((cycle - 3) & mask)];
      assert(x11634 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11635 = arg2[171 * steps + ((cycle - 3) & mask)];
      assert(x11635 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11636 = arg2[172 * steps + ((cycle - 3) & mask)];
      assert(x11636 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11637 = arg2[173 * steps + ((cycle - 3) & mask)];
      assert(x11637 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11638 = arg2[174 * steps + ((cycle - 3) & mask)];
      assert(x11638 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11639 = arg2[175 * steps + ((cycle - 3) & mask)];
      assert(x11639 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11640 = arg2[176 * steps + ((cycle - 3) & mask)];
      assert(x11640 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11641 = arg2[177 * steps + ((cycle - 3) & mask)];
      assert(x11641 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11642 = arg2[178 * steps + ((cycle - 3) & mask)];
      assert(x11642 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11643 = arg2[179 * steps + ((cycle - 3) & mask)];
      assert(x11643 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11644 = arg2[180 * steps + ((cycle - 3) & mask)];
      assert(x11644 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11645 = arg2[181 * steps + ((cycle - 3) & mask)];
      assert(x11645 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11646 = arg2[182 * steps + ((cycle - 3) & mask)];
      assert(x11646 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11647 = arg2[183 * steps + ((cycle - 3) & mask)];
      assert(x11647 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11648 = arg2[184 * steps + ((cycle - 3) & mask)];
      assert(x11648 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11649 = arg2[185 * steps + ((cycle - 3) & mask)];
      assert(x11649 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11650 = arg2[186 * steps + ((cycle - 3) & mask)];
      assert(x11650 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11651 = arg2[187 * steps + ((cycle - 3) & mask)];
      assert(x11651 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11652 = arg2[188 * steps + ((cycle - 3) & mask)];
      assert(x11652 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11653 = arg2[189 * steps + ((cycle - 3) & mask)];
      assert(x11653 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11654 = arg2[190 * steps + ((cycle - 3) & mask)];
      assert(x11654 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11655 = arg2[191 * steps + ((cycle - 3) & mask)];
      assert(x11655 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11656 = arg2[160 * steps + ((cycle - 4) & mask)];
      assert(x11656 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11657 = arg2[161 * steps + ((cycle - 4) & mask)];
      assert(x11657 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11658 = arg2[162 * steps + ((cycle - 4) & mask)];
      assert(x11658 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11659 = arg2[163 * steps + ((cycle - 4) & mask)];
      assert(x11659 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11660 = arg2[164 * steps + ((cycle - 4) & mask)];
      assert(x11660 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11661 = arg2[165 * steps + ((cycle - 4) & mask)];
      assert(x11661 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11662 = arg2[166 * steps + ((cycle - 4) & mask)];
      assert(x11662 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11663 = arg2[167 * steps + ((cycle - 4) & mask)];
      assert(x11663 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11664 = arg2[168 * steps + ((cycle - 4) & mask)];
      assert(x11664 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11665 = arg2[169 * steps + ((cycle - 4) & mask)];
      assert(x11665 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11666 = arg2[170 * steps + ((cycle - 4) & mask)];
      assert(x11666 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11667 = arg2[171 * steps + ((cycle - 4) & mask)];
      assert(x11667 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11668 = arg2[172 * steps + ((cycle - 4) & mask)];
      assert(x11668 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11669 = arg2[173 * steps + ((cycle - 4) & mask)];
      assert(x11669 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11670 = arg2[174 * steps + ((cycle - 4) & mask)];
      assert(x11670 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11671 = arg2[175 * steps + ((cycle - 4) & mask)];
      assert(x11671 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11672 = arg2[176 * steps + ((cycle - 4) & mask)];
      assert(x11672 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11673 = arg2[177 * steps + ((cycle - 4) & mask)];
      assert(x11673 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11674 = arg2[178 * steps + ((cycle - 4) & mask)];
      assert(x11674 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11675 = arg2[179 * steps + ((cycle - 4) & mask)];
      assert(x11675 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11676 = arg2[180 * steps + ((cycle - 4) & mask)];
      assert(x11676 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11677 = arg2[181 * steps + ((cycle - 4) & mask)];
      assert(x11677 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11678 = arg2[182 * steps + ((cycle - 4) & mask)];
      assert(x11678 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11679 = arg2[183 * steps + ((cycle - 4) & mask)];
      assert(x11679 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11680 = arg2[184 * steps + ((cycle - 4) & mask)];
      assert(x11680 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11681 = arg2[185 * steps + ((cycle - 4) & mask)];
      assert(x11681 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11682 = arg2[186 * steps + ((cycle - 4) & mask)];
      assert(x11682 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11683 = arg2[187 * steps + ((cycle - 4) & mask)];
      assert(x11683 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11684 = arg2[188 * steps + ((cycle - 4) & mask)];
      assert(x11684 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11685 = arg2[189 * steps + ((cycle - 4) & mask)];
      assert(x11685 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11686 = arg2[190 * steps + ((cycle - 4) & mask)];
      assert(x11686 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11687 = arg2[191 * steps + ((cycle - 4) & mask)];
      assert(x11687 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11688 = arg2[192 * steps + ((cycle - 4) & mask)];
      assert(x11688 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11689 = arg2[193 * steps + ((cycle - 4) & mask)];
      assert(x11689 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11690 = arg2[194 * steps + ((cycle - 4) & mask)];
      assert(x11690 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11691 = arg2[195 * steps + ((cycle - 4) & mask)];
      assert(x11691 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11692 = arg2[196 * steps + ((cycle - 4) & mask)];
      assert(x11692 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11693 = arg2[197 * steps + ((cycle - 4) & mask)];
      assert(x11693 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11694 = arg2[198 * steps + ((cycle - 4) & mask)];
      assert(x11694 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11695 = arg2[199 * steps + ((cycle - 4) & mask)];
      assert(x11695 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11696 = arg2[200 * steps + ((cycle - 4) & mask)];
      assert(x11696 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11697 = arg2[201 * steps + ((cycle - 4) & mask)];
      assert(x11697 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11698 = arg2[202 * steps + ((cycle - 4) & mask)];
      assert(x11698 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11699 = arg2[203 * steps + ((cycle - 4) & mask)];
      assert(x11699 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11700 = arg2[204 * steps + ((cycle - 4) & mask)];
      assert(x11700 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11701 = arg2[205 * steps + ((cycle - 4) & mask)];
      assert(x11701 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11702 = arg2[206 * steps + ((cycle - 4) & mask)];
      assert(x11702 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11703 = arg2[207 * steps + ((cycle - 4) & mask)];
      assert(x11703 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11704 = arg2[208 * steps + ((cycle - 4) & mask)];
      assert(x11704 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11705 = arg2[209 * steps + ((cycle - 4) & mask)];
      assert(x11705 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11706 = arg2[210 * steps + ((cycle - 4) & mask)];
      assert(x11706 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11707 = arg2[211 * steps + ((cycle - 4) & mask)];
      assert(x11707 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11708 = arg2[212 * steps + ((cycle - 4) & mask)];
      assert(x11708 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11709 = arg2[213 * steps + ((cycle - 4) & mask)];
      assert(x11709 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11710 = arg2[214 * steps + ((cycle - 4) & mask)];
      assert(x11710 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11711 = arg2[215 * steps + ((cycle - 4) & mask)];
      assert(x11711 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11712 = arg2[216 * steps + ((cycle - 4) & mask)];
      assert(x11712 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11713 = arg2[217 * steps + ((cycle - 4) & mask)];
      assert(x11713 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11714 = arg2[218 * steps + ((cycle - 4) & mask)];
      assert(x11714 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11715 = arg2[219 * steps + ((cycle - 4) & mask)];
      assert(x11715 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11716 = arg2[220 * steps + ((cycle - 4) & mask)];
      assert(x11716 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11717 = arg2[221 * steps + ((cycle - 4) & mask)];
      assert(x11717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11718 = arg2[222 * steps + ((cycle - 4) & mask)];
      assert(x11718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11719 = arg2[223 * steps + ((cycle - 4) & mask)];
      assert(x11719 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11720 = x11464 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11721 = x11464 * x11560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11722 = x11465 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11723 = x11465 * x11561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11724 = x11466 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11725 = x11466 * x11562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11726 = x11467 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11727 = x11467 * x11563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11728 = x11468 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11729 = x11468 * x11564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11730 = x11469 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11731 = x11469 * x11565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11732 = x11470 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11733 = x11470 * x11566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11734 = x11471 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11735 = x11471 * x11567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11736 = x11472 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11737 = x11472 * x11568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11738 = x11473 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11739 = x11473 * x11569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11740 = x11474 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11741 = x11474 * x11570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11742 = x11475 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11743 = x11475 * x11571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11744 = x11476 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11745 = x11476 * x11572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11746 = x11477 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11747 = x11477 * x11573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11748 = x11478 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11749 = x11478 * x11574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11750 = x11479 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11751 = x11479 * x11575;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11752 = x11480 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11753 = x11480 * x11576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11754 = x11481 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11755 = x11481 * x11577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11756 = x11482 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11757 = x11482 * x11578;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11758 = x11483 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11759 = x11483 * x11579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11760 = x11484 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11761 = x11484 * x11580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11762 = x11485 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11763 = x11485 * x11581;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11764 = x11486 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11765 = x11486 * x11582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11766 = x11487 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11767 = x11487 * x11583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11768 = x11488 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11769 = x11488 * x11584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11770 = x11489 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11771 = x11489 * x11585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11772 = x11490 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11773 = x11490 * x11586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11774 = x11491 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11775 = x11491 * x11587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11776 = x11492 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11777 = x11492 * x11588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11778 = x11493 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11779 = x11493 * x11589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11780 = x11494 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11781 = x11494 * x11590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11782 = x11495 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x11783 = x11495 * x11591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11784 = x11496 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11785 = x11496 * x11528;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11786 = x11497 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11787 = x11497 * x11529;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11788 = x11498 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11789 = x11498 * x11530;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11790 = x11499 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11791 = x11499 * x11531;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11792 = x11500 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11793 = x11500 * x11532;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11794 = x11501 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11795 = x11501 * x11533;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11796 = x11502 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11797 = x11502 * x11534;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11798 = x11503 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11799 = x11503 * x11535;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11800 = x11504 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11801 = x11504 * x11536;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11802 = x11505 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11803 = x11505 * x11537;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11804 = x11506 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11805 = x11506 * x11538;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11806 = x11507 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11807 = x11507 * x11539;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11808 = x11508 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11809 = x11508 * x11540;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11810 = x11509 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11811 = x11509 * x11541;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11812 = x11510 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11813 = x11510 * x11542;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11814 = x11511 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11815 = x11511 * x11543;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11816 = x11512 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11817 = x11512 * x11544;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11818 = x11513 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11819 = x11513 * x11545;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11820 = x11514 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11821 = x11514 * x11546;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11822 = x11515 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11823 = x11515 * x11547;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11824 = x11516 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11825 = x11516 * x11548;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11826 = x11517 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11827 = x11517 * x11549;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11828 = x11518 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11829 = x11518 * x11550;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11830 = x11519 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11831 = x11519 * x11551;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11832 = x11520 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11833 = x11520 * x11552;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11834 = x11521 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11835 = x11521 * x11553;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11836 = x11522 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11837 = x11522 * x11554;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11838 = x11523 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11839 = x11523 * x11555;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11840 = x11524 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11841 = x11524 * x11556;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11842 = x11525 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11843 = x11525 * x11557;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11844 = x11526 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11845 = x11526 * x11558;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11846 = x11527 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x11847 = x11527 * x11559;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11848 = x11428 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:26)
      auto x11849 = x11430 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11850 = x11432 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:61)
      auto x11851 = x11433 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11852 = x11434 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11853 = x11435 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11854 = x11436 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11855 = x11437 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11856 = x11439 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11857 = x11440 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11858 = x11441 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11859 = x11442 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11860 = x11443 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11861 = x11444 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11862 = x11445 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11863 = x11446 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11864 = x11447 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11865 = x11448 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11866 = x11449 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11867 = x11450 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11868 = x11451 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11869 = x11452 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11870 = x11453 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11871 = x11455 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11872 = x11456 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11873 = x11457 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11874 = x11458 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11875 = x11459 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11876 = x11460 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11877 = x11461 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11878 = x11462 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11879 = x11463 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11880 = x11657 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11881 = x11658 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11882 = x11659 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11883 = x11660 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11884 = x11661 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11885 = x11662 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11886 = x11663 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11887 = x11664 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11888 = x11665 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11889 = x11666 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11890 = x11667 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11891 = x11668 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11892 = x11669 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11893 = x11670 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11894 = x11671 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11895 = x11673 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11896 = x11674 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11897 = x11675 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11898 = x11676 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11899 = x11677 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11900 = x11678 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11901 = x11679 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11902 = x11680 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11903 = x11681 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11904 = x11682 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11905 = x11683 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11906 = x11684 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11907 = x11685 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11908 = x11686 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11909 = x11687 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11910 = x11689 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11911 = x11690 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11912 = x11691 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11913 = x11692 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11914 = x11693 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11915 = x11694 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11916 = x11695 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11917 = x11696 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11918 = x11697 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11919 = x11698 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11920 = x11699 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11921 = x11700 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11922 = x11701 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11923 = x11702 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11924 = x11703 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11925 = x11705 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11926 = x11706 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11927 = x11707 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11928 = x11708 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11929 = x11709 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11930 = x11710 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11931 = x11711 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11932 = x11712 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11933 = x11713 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11934 = x11714 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11935 = x11715 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11936 = x11716 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11937 = x11717 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11938 = x11718 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x11939 = x11719 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11940 = x11720 * x11473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11941 = x11721 * x11624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11942 = x11722 * x11474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11943 = x11723 * x11625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11944 = x11724 * x11475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11945 = x11725 * x11626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11946 = x11726 * x11476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11947 = x11727 * x11627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11948 = x11728 * x11477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11949 = x11729 * x11628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11950 = x11730 * x11478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11951 = x11731 * x11629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11952 = x11732 * x11479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11953 = x11733 * x11630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11954 = x11734 * x11480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11955 = x11735 * x11631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11956 = x11736 * x11481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11957 = x11737 * x11632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11958 = x11738 * x11482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11959 = x11739 * x11633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11960 = x11740 * x11483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11961 = x11741 * x11634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11962 = x11742 * x11484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11963 = x11743 * x11635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11964 = x11744 * x11485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11965 = x11745 * x11636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11966 = x11746 * x11486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11967 = x11747 * x11637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11968 = x11748 * x11487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11969 = x11749 * x11638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11970 = x11750 * x11488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11971 = x11751 * x11639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11972 = x11752 * x11489;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11973 = x11753 * x11640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11974 = x11754 * x11490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11975 = x11755 * x11641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11976 = x11756 * x11491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11977 = x11757 * x11642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11978 = x11758 * x11492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11979 = x11759 * x11643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11980 = x11760 * x11493;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11981 = x11761 * x11644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11982 = x11762 * x11494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11983 = x11763 * x11645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11984 = x11764 * x11495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11985 = x11765 * x11646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11986 = x11766 * x11464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11987 = x11767 * x11647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11988 = x11768 * x11465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11989 = x11769 * x11648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11990 = x11770 * x11466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11991 = x11771 * x11649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11992 = x11772 * x11467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11993 = x11773 * x11650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11994 = x11774 * x11468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11995 = x11775 * x11651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11996 = x11776 * x11469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11997 = x11777 * x11652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x11998 = x11778 * x11470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x11999 = x11779 * x11653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12000 = x11780 * x11471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x12001 = x11781 * x11654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12002 = x11782 * x11472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":56:14)
      auto x12003 = x11783 * x11655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12004 = x11784 * x11510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12005 = x11786 * x11511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12006 = x11788 * x11512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12007 = x11790 * x11513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12008 = x11792 * x11514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12009 = x11794 * x11515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12010 = x11796 * x11516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12011 = x11798 * x11517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12012 = x11800 * x11518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12013 = x11802 * x11519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12014 = x11804 * x11520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12015 = x11806 * x11521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12016 = x11808 * x11522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12017 = x11810 * x11523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12018 = x11812 * x11524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12019 = x11814 * x11525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12020 = x11816 * x11526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12021 = x11818 * x11527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12022 = x11820 * x11496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12023 = x11822 * x11497;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12024 = x11824 * x11498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12025 = x11826 * x11499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12026 = x11828 * x11500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12027 = x11830 * x11501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12028 = x11832 * x11502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12029 = x11834 * x11503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12030 = x11836 * x11504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12031 = x11838 * x11505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12032 = x11840 * x11506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12033 = x11842 * x11507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12034 = x11844 * x11508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12035 = x11846 * x11509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12036 = x99 - x11464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12037 = x99 - x11465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12038 = x99 - x11466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12039 = x99 - x11467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12040 = x99 - x11468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12041 = x99 - x11469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12042 = x99 - x11470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12043 = x99 - x11471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12044 = x99 - x11472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12045 = x99 - x11473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12046 = x99 - x11474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12047 = x99 - x11475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12048 = x99 - x11476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12049 = x99 - x11477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12050 = x99 - x11478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12051 = x99 - x11479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12052 = x99 - x11480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12053 = x99 - x11481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12054 = x99 - x11482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12055 = x99 - x11483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12056 = x99 - x11484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12057 = x99 - x11485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12058 = x99 - x11486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12059 = x99 - x11487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12060 = x99 - x11488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12061 = x99 - x11489;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12062 = x99 - x11490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12063 = x99 - x11491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12064 = x99 - x11492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12065 = x99 - x11493;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12066 = x99 - x11494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:69)
      auto x12067 = x99 - x11495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12068 = x99 - x11496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12069 = x99 - x11497;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12070 = x99 - x11498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12071 = x99 - x11499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12072 = x99 - x11500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12073 = x99 - x11501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12074 = x99 - x11502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12075 = x99 - x11503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12076 = x99 - x11504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12077 = x99 - x11505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12078 = x99 - x11506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12079 = x99 - x11507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12080 = x99 - x11508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12081 = x99 - x11509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12082 = x99 - x11510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12083 = x99 - x11511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12084 = x99 - x11512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12085 = x99 - x11513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12086 = x99 - x11514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12087 = x99 - x11515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12088 = x99 - x11516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12089 = x99 - x11517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12090 = x99 - x11518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12091 = x99 - x11519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12092 = x99 - x11520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12093 = x99 - x11521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12094 = x99 - x11522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12095 = x99 - x11523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12096 = x99 - x11524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12097 = x99 - x11525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12098 = x99 - x11526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:29)
      auto x12099 = x99 - x11527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12100 = x99 - x11560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12101 = x99 - x11561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12102 = x99 - x11562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12103 = x99 - x11563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12104 = x99 - x11564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12105 = x99 - x11565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12106 = x99 - x11566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12107 = x99 - x11567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12108 = x99 - x11568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12109 = x99 - x11569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12110 = x99 - x11570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12111 = x99 - x11571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12112 = x99 - x11572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12113 = x99 - x11573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12114 = x99 - x11574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12115 = x99 - x11575;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12116 = x99 - x11576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12117 = x99 - x11577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12118 = x99 - x11578;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12119 = x99 - x11579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12120 = x99 - x11580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12121 = x99 - x11581;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12122 = x99 - x11582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12123 = x99 - x11583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12124 = x99 - x11584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12125 = x99 - x11585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12126 = x99 - x11586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12127 = x99 - x11587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12128 = x99 - x11588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12129 = x99 - x11589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12130 = x99 - x11590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:49)
      auto x12131 = x99 - x11591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12132 = x99 - x11624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12133 = x99 - x11625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12134 = x99 - x11626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12135 = x99 - x11627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12136 = x99 - x11628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12137 = x99 - x11629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12138 = x99 - x11630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12139 = x99 - x11631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12140 = x99 - x11632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12141 = x99 - x11633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12142 = x99 - x11634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12143 = x99 - x11635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12144 = x99 - x11636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12145 = x99 - x11637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12146 = x99 - x11638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12147 = x99 - x11639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12148 = x99 - x11640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12149 = x99 - x11641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12150 = x99 - x11642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12151 = x99 - x11643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12152 = x99 - x11644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12153 = x99 - x11645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12154 = x99 - x11646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12155 = x99 - x11647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12156 = x99 - x11648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12157 = x99 - x11649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12158 = x99 - x11650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12159 = x99 - x11651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12160 = x99 - x11652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12161 = x99 - x11653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12162 = x99 - x11654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:29)
      auto x12163 = x99 - x11655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:11)
      auto x12164 = x11429 + x11849;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":132:46)
      auto x12165 = x11431 + x11851;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12166 = x11464 + x11473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12167 = x11465 + x11474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12168 = x11466 + x11475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12169 = x11467 + x11476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12170 = x11468 + x11477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12171 = x11469 + x11478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12172 = x11470 + x11479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12173 = x11471 + x11480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12174 = x11472 + x11481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12175 = x11473 + x11482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12176 = x11474 + x11483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12177 = x11475 + x11484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12178 = x11476 + x11485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12179 = x11477 + x11486;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12180 = x11478 + x11487;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12181 = x11479 + x11488;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12182 = x11480 + x11489;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12183 = x11481 + x11490;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12184 = x11482 + x11491;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12185 = x11483 + x11492;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12186 = x11484 + x11493;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12187 = x11485 + x11494;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12188 = x11486 + x11495;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12189 = x11487 + x11464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12190 = x11488 + x11465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12191 = x11489 + x11466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12192 = x11490 + x11467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12193 = x11491 + x11468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12194 = x11492 + x11469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12195 = x11493 + x11470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12196 = x11494 + x11471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12197 = x11495 + x11472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12198 = x11496 + x11510;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12199 = x11497 + x11511;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12200 = x11498 + x11512;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12201 = x11499 + x11513;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12202 = x11500 + x11514;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12203 = x11501 + x11515;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12204 = x11502 + x11516;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12205 = x11503 + x11517;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12206 = x11504 + x11518;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12207 = x11505 + x11519;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12208 = x11506 + x11520;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12209 = x11507 + x11521;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12210 = x11508 + x11522;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12211 = x11509 + x11523;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12212 = x11510 + x11524;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12213 = x11511 + x11525;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12214 = x11512 + x11526;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12215 = x11513 + x11527;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12216 = x11514 + x11496;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12217 = x11515 + x11497;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12218 = x11516 + x11498;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12219 = x11517 + x11499;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12220 = x11518 + x11500;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12221 = x11519 + x11501;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12222 = x11520 + x11502;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12223 = x11521 + x11503;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12224 = x11522 + x11504;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12225 = x11523 + x11505;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12226 = x11524 + x11506;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12227 = x11525 + x11507;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12228 = x11526 + x11508;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12229 = x11527 + x11509;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12230 = x11464 * x12100;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12231 = x11465 * x12101;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12232 = x11466 * x12102;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12233 = x11467 * x12103;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12234 = x11468 * x12104;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12235 = x11469 * x12105;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12236 = x11470 * x12106;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12237 = x11471 * x12107;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12238 = x11472 * x12108;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12239 = x11473 * x12109;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12240 = x11474 * x12110;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12241 = x11475 * x12111;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12242 = x11476 * x12112;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12243 = x11477 * x12113;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12244 = x11478 * x12114;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12245 = x11479 * x12115;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12246 = x11480 * x12116;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12247 = x11481 * x12117;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12248 = x11482 * x12118;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12249 = x11483 * x12119;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12250 = x11484 * x12120;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12251 = x11485 * x12121;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12252 = x11486 * x12122;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12253 = x11487 * x12123;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12254 = x11488 * x12124;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12255 = x11489 * x12125;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12256 = x11490 * x12126;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12257 = x11491 * x12127;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12258 = x11492 * x12128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12259 = x11493 * x12129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12260 = x11494 * x12130;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12261 = x11495 * x12131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12262 = x11721 * x12132;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12263 = x11723 * x12133;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12264 = x11725 * x12134;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12265 = x11727 * x12135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12266 = x11729 * x12136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12267 = x11731 * x12137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12268 = x11733 * x12138;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12269 = x11735 * x12139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12270 = x11737 * x12140;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12271 = x11739 * x12141;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12272 = x11741 * x12142;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12273 = x11743 * x12143;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12274 = x11745 * x12144;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12275 = x11747 * x12145;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12276 = x11749 * x12146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12277 = x11751 * x12147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12278 = x11753 * x12148;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12279 = x11755 * x12149;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12280 = x11757 * x12150;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12281 = x11759 * x12151;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12282 = x11761 * x12152;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12283 = x11763 * x12153;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12284 = x11765 * x12154;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12285 = x11767 * x12155;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12286 = x11769 * x12156;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12287 = x11771 * x12157;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12288 = x11773 * x12158;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12289 = x11775 * x12159;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12290 = x11777 * x12160;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12291 = x11779 * x12161;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12292 = x11781 * x12162;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12293 = x11783 * x12163;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12294 = x12036 * x11560;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12295 = x12037 * x11561;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12296 = x12038 * x11562;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12297 = x12039 * x11563;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12298 = x12040 * x11564;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12299 = x12041 * x11565;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12300 = x12042 * x11566;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12301 = x12043 * x11567;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12302 = x12044 * x11568;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12303 = x12045 * x11569;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12304 = x12046 * x11570;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12305 = x12047 * x11571;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12306 = x12048 * x11572;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12307 = x12049 * x11573;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12308 = x12050 * x11574;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12309 = x12051 * x11575;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12310 = x12052 * x11576;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12311 = x12053 * x11577;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12312 = x12054 * x11578;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12313 = x12055 * x11579;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12314 = x12056 * x11580;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12315 = x12057 * x11581;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12316 = x12058 * x11582;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12317 = x12059 * x11583;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12318 = x12060 * x11584;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12319 = x12061 * x11585;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12320 = x12062 * x11586;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12321 = x12063 * x11587;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12322 = x12064 * x11588;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12323 = x12065 * x11589;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12324 = x12066 * x11590;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12325 = x12067 * x11591;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12326 = x12230 * x11624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12327 = x12231 * x11625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12328 = x12232 * x11626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12329 = x12233 * x11627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12330 = x12234 * x11628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12331 = x12235 * x11629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12332 = x12236 * x11630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12333 = x12237 * x11631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12334 = x12238 * x11632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12335 = x12239 * x11633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12336 = x12240 * x11634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12337 = x12241 * x11635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12338 = x12242 * x11636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12339 = x12243 * x11637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12340 = x12244 * x11638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12341 = x12245 * x11639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12342 = x12246 * x11640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12343 = x12247 * x11641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12344 = x12248 * x11642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12345 = x12249 * x11643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12346 = x12250 * x11644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12347 = x12251 * x11645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12348 = x12252 * x11646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12349 = x12253 * x11647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12350 = x12254 * x11648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12351 = x12255 * x11649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12352 = x12256 * x11650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12353 = x12257 * x11651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12354 = x12258 * x11652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12355 = x12259 * x11653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12356 = x12260 * x11654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:41)
      auto x12357 = x12261 * x11655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12358 = x12294 * x11624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12359 = x12295 * x11625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12360 = x12296 * x11626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12361 = x12297 * x11627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12362 = x12298 * x11628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12363 = x12299 * x11629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12364 = x12300 * x11630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12365 = x12301 * x11631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12366 = x12302 * x11632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12367 = x12303 * x11633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12368 = x12304 * x11634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12369 = x12305 * x11635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12370 = x12306 * x11636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12371 = x12307 * x11637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12372 = x12308 * x11638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12373 = x12309 * x11639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12374 = x12310 * x11640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12375 = x12311 * x11641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12376 = x12312 * x11642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12377 = x12313 * x11643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12378 = x12314 * x11644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12379 = x12315 * x11645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12380 = x12316 * x11646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12381 = x12317 * x11647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12382 = x12318 * x11648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12383 = x12319 * x11649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12384 = x12320 * x11650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12385 = x12321 * x11651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12386 = x12322 * x11652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12387 = x12323 * x11653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12388 = x12324 * x11654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:68)
      auto x12389 = x12325 * x11655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12390 = x12068 * x11592;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12391 = x12069 * x11593;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12392 = x12070 * x11594;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12393 = x12071 * x11595;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12394 = x12072 * x11596;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12395 = x12073 * x11597;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12396 = x12074 * x11598;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12397 = x12075 * x11599;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12398 = x12076 * x11600;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12399 = x12077 * x11601;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12400 = x12078 * x11602;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12401 = x12079 * x11603;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12402 = x12080 * x11604;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12403 = x12081 * x11605;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12404 = x12082 * x11606;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12405 = x12083 * x11607;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12406 = x12084 * x11608;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12407 = x12085 * x11609;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12408 = x12086 * x11610;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12409 = x12087 * x11611;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12410 = x12088 * x11612;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12411 = x12089 * x11613;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12412 = x12090 * x11614;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12413 = x12091 * x11615;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12414 = x12092 * x11616;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12415 = x12093 * x11617;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12416 = x12094 * x11618;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12417 = x12095 * x11619;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12418 = x12096 * x11620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12419 = x12097 * x11621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12420 = x12098 * x11622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:28)
      auto x12421 = x12099 * x11623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12422 = x12166 - x11940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12423 = x12167 - x11942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12424 = x12168 - x11944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12425 = x12169 - x11946;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12426 = x12170 - x11948;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12427 = x12171 - x11950;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12428 = x12172 - x11952;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12429 = x12173 - x11954;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12430 = x12174 - x11956;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12431 = x12175 - x11958;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12432 = x12176 - x11960;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12433 = x12177 - x11962;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12434 = x12178 - x11964;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12435 = x12179 - x11966;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12436 = x12180 - x11968;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12437 = x12181 - x11970;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12438 = x12182 - x11972;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12439 = x12183 - x11974;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12440 = x12184 - x11976;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12441 = x12185 - x11978;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12442 = x12186 - x11980;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12443 = x12187 - x11982;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12444 = x12188 - x11984;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12445 = x12189 - x11986;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12446 = x12190 - x11988;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12447 = x12191 - x11990;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12448 = x12192 - x11992;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12449 = x12193 - x11994;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12450 = x12194 - x11996;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12451 = x12195 - x11998;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12452 = x12196 - x12000;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12453 = x12197 - x12002;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12454 = x12198 - x12004;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12455 = x12199 - x12005;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12456 = x12200 - x12006;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12457 = x12201 - x12007;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12458 = x12202 - x12008;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12459 = x12203 - x12009;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12460 = x12204 - x12010;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12461 = x12205 - x12011;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12462 = x12206 - x12012;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12463 = x12207 - x12013;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12464 = x12208 - x12014;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12465 = x12209 - x12015;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12466 = x12210 - x12016;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12467 = x12211 - x12017;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12468 = x12212 - x12018;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12469 = x12213 - x12019;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12470 = x12214 - x12020;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12471 = x12215 - x12021;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12472 = x12216 - x12022;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12473 = x12217 - x12023;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12474 = x12218 - x12024;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12475 = x12219 - x12025;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12476 = x12220 - x12026;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12477 = x12221 - x12027;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12478 = x12222 - x12028;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12479 = x12223 - x12029;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12480 = x12224 - x12030;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12481 = x12225 - x12031;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12482 = x12226 - x12032;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12483 = x12227 - x12033;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12484 = x12228 - x12034;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12485 = x12229 - x12035;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12486 = x11438 + x11856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12487 = x11454 + x11871;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12488 = x11656 + x11880;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12489 = x11672 + x11895;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12490 = x11688 + x11910;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12491 = x11704 + x11925;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12492 = x11464 + x12433;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12493 = x11465 + x12434;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12494 = x11466 + x12435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12495 = x11467 + x12436;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12496 = x11468 + x12437;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12497 = x11469 + x12438;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12498 = x11470 + x12439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12499 = x11471 + x12440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12500 = x11472 + x12441;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12501 = x11473 + x12442;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12502 = x11474 + x12443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12503 = x11475 + x12444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12504 = x11476 + x12445;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12505 = x11477 + x12446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12506 = x11478 + x12447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12507 = x11479 + x12448;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12508 = x11480 + x12449;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12509 = x11481 + x12450;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12510 = x11482 + x12451;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12511 = x11483 + x12452;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12512 = x11484 + x12453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12513 = x11485 + x12422;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12514 = x11486 + x12423;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12515 = x11487 + x12424;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12516 = x11488 + x12425;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12517 = x11489 + x12426;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12518 = x11490 + x12427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12519 = x11491 + x12428;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12520 = x11492 + x12429;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12521 = x11493 + x12430;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12522 = x11494 + x12431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12523 = x11495 + x12432;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12524 = x11496 + x12459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12525 = x11497 + x12460;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12526 = x11498 + x12461;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12527 = x11499 + x12462;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12528 = x11500 + x12463;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12529 = x11501 + x12464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12530 = x11502 + x12465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12531 = x11503 + x12466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12532 = x11504 + x12467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12533 = x11505 + x12468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12534 = x11506 + x12469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12535 = x11507 + x12470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12536 = x11508 + x12471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12537 = x11509 + x12472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12538 = x11510 + x12473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12539 = x11511 + x12474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12540 = x11512 + x12475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12541 = x11513 + x12476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12542 = x11514 + x12477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12543 = x11515 + x12478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12544 = x11516 + x12479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12545 = x11517 + x12480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12546 = x11518 + x12481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12547 = x11519 + x12482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12548 = x11520 + x12483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12549 = x11521 + x12484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12550 = x11522 + x12485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12551 = x11523 + x12454;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12552 = x11524 + x12455;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12553 = x11525 + x12456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12554 = x11526 + x12457;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12555 = x11527 + x12458;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12556 = x11785 + x12390;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12557 = x11787 + x12391;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12558 = x11789 + x12392;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12559 = x11791 + x12393;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12560 = x11793 + x12394;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12561 = x11795 + x12395;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12562 = x11797 + x12396;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12563 = x11799 + x12397;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12564 = x11801 + x12398;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12565 = x11803 + x12399;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12566 = x11805 + x12400;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12567 = x11807 + x12401;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12568 = x11809 + x12402;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12569 = x11811 + x12403;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12570 = x11813 + x12404;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12571 = x11815 + x12405;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12572 = x11817 + x12406;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12573 = x11819 + x12407;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12574 = x11821 + x12408;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12575 = x11823 + x12409;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12576 = x11825 + x12410;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12577 = x11827 + x12411;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12578 = x11829 + x12412;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12579 = x11831 + x12413;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12580 = x11833 + x12414;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12581 = x11835 + x12415;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12582 = x11837 + x12416;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12583 = x11839 + x12417;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12584 = x11841 + x12418;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12585 = x11843 + x12419;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12586 = x11845 + x12420;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":64:14)
      auto x12587 = x11847 + x12421;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12588 = x12262 + x12326;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12589 = x12263 + x12327;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12590 = x12264 + x12328;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12591 = x12265 + x12329;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12592 = x12266 + x12330;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12593 = x12267 + x12331;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12594 = x12268 + x12332;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12595 = x12269 + x12333;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12596 = x12270 + x12334;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12597 = x12271 + x12335;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12598 = x12272 + x12336;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12599 = x12273 + x12337;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12600 = x12274 + x12338;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12601 = x12275 + x12339;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12602 = x12276 + x12340;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12603 = x12277 + x12341;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12604 = x12278 + x12342;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12605 = x12279 + x12343;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12606 = x12280 + x12344;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12607 = x12281 + x12345;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12608 = x12282 + x12346;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12609 = x12283 + x12347;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12610 = x12284 + x12348;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12611 = x12285 + x12349;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12612 = x12286 + x12350;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12613 = x12287 + x12351;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12614 = x12288 + x12352;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12615 = x12289 + x12353;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12616 = x12290 + x12354;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12617 = x12291 + x12355;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12618 = x12292 + x12356;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12619 = x12293 + x12357;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12620 = x12557 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12621 = x12558 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12622 = x12559 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12623 = x12560 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12624 = x12561 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12625 = x12562 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12626 = x12563 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12627 = x12564 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12628 = x12565 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12629 = x12566 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12630 = x12567 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12631 = x12568 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12632 = x12569 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12633 = x12570 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12634 = x12571 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12635 = x12573 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12636 = x12574 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12637 = x12575 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12638 = x12576 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12639 = x12577 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12640 = x12578 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12641 = x12579 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12642 = x12580 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12643 = x12581 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12644 = x12582 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12645 = x12583 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12646 = x12584 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12647 = x12585 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12648 = x12586 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12649 = x12587 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12650 = x11720 * x12433;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12651 = x11722 * x12434;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12652 = x11724 * x12435;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12653 = x11726 * x12436;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12654 = x11728 * x12437;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12655 = x11730 * x12438;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12656 = x11732 * x12439;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12657 = x11734 * x12440;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12658 = x11736 * x12441;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12659 = x11738 * x12442;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12660 = x11740 * x12443;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12661 = x11742 * x12444;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12662 = x11744 * x12445;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12663 = x11746 * x12446;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12664 = x11748 * x12447;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12665 = x11750 * x12448;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12666 = x11752 * x12449;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12667 = x11754 * x12450;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12668 = x11756 * x12451;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12669 = x11758 * x12452;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12670 = x11760 * x12453;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12671 = x11762 * x12422;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12672 = x11764 * x12423;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12673 = x11766 * x12424;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12674 = x11768 * x12425;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12675 = x11770 * x12426;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12676 = x11772 * x12427;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12677 = x11774 * x12428;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12678 = x11776 * x12429;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12679 = x11778 * x12430;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12680 = x11780 * x12431;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12681 = x11782 * x12432;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12682 = x11784 * x12459;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12683 = x11786 * x12460;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12684 = x11788 * x12461;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12685 = x11790 * x12462;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12686 = x11792 * x12463;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12687 = x11794 * x12464;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12688 = x11796 * x12465;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12689 = x11798 * x12466;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12690 = x11800 * x12467;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12691 = x11802 * x12468;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12692 = x11804 * x12469;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12693 = x11806 * x12470;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12694 = x11808 * x12471;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12695 = x11810 * x12472;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12696 = x11812 * x12473;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12697 = x11814 * x12474;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12698 = x11816 * x12475;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12699 = x11818 * x12476;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12700 = x11820 * x12477;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12701 = x11822 * x12478;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12702 = x11824 * x12479;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12703 = x11826 * x12480;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12704 = x11828 * x12481;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12705 = x11830 * x12482;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12706 = x11832 * x12483;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12707 = x11834 * x12484;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12708 = x11836 * x12485;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12709 = x11838 * x12454;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12710 = x11840 * x12455;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12711 = x11842 * x12456;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12712 = x11844 * x12457;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:28)
      auto x12713 = x11846 * x12458;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12714 = x12492 - x12650;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12715 = x12493 - x12651;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12716 = x12494 - x12652;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12717 = x12495 - x12653;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12718 = x12496 - x12654;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12719 = x12497 - x12655;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12720 = x12498 - x12656;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12721 = x12499 - x12657;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12722 = x12500 - x12658;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12723 = x12501 - x12659;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12724 = x12502 - x12660;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12725 = x12503 - x12661;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12726 = x12504 - x12662;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12727 = x12505 - x12663;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12728 = x12506 - x12664;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12729 = x12507 - x12665;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12730 = x12508 - x12666;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12731 = x12509 - x12667;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12732 = x12510 - x12668;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12733 = x12511 - x12669;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12734 = x12512 - x12670;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12735 = x12513 - x12671;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12736 = x12514 - x12672;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12737 = x12515 - x12673;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12738 = x12516 - x12674;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12739 = x12517 - x12675;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12740 = x12518 - x12676;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12741 = x12519 - x12677;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12742 = x12520 - x12678;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12743 = x12521 - x12679;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12744 = x12522 - x12680;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12745 = x12523 - x12681;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12746 = x12524 - x12682;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12747 = x12525 - x12683;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12748 = x12526 - x12684;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12749 = x12527 - x12685;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12750 = x12528 - x12686;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12751 = x12529 - x12687;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12752 = x12530 - x12688;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12753 = x12531 - x12689;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12754 = x12532 - x12690;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12755 = x12533 - x12691;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12756 = x12534 - x12692;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12757 = x12535 - x12693;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12758 = x12536 - x12694;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12759 = x12537 - x12695;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12760 = x12538 - x12696;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12761 = x12539 - x12697;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12762 = x12540 - x12698;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12763 = x12541 - x12699;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12764 = x12542 - x12700;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12765 = x12543 - x12701;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12766 = x12544 - x12702;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12767 = x12545 - x12703;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12768 = x12546 - x12704;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12769 = x12547 - x12705;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12770 = x12548 - x12706;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12771 = x12549 - x12707;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12772 = x12550 - x12708;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12773 = x12551 - x12709;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12774 = x12552 - x12710;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12775 = x12553 - x12711;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12776 = x12554 - x12712;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":47:14)
      auto x12777 = x12555 - x12713;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12778 = x12486 + x11857;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12779 = x12487 + x11872;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12780 = x12488 + x11881;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12781 = x12489 + x11896;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12782 = x12490 + x11911;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12783 = x12491 + x11926;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12784 = x12588 + x12358;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12785 = x12589 + x12359;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12786 = x12590 + x12360;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12787 = x12591 + x12361;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12788 = x12592 + x12362;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12789 = x12593 + x12363;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12790 = x12594 + x12364;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12791 = x12595 + x12365;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12792 = x12596 + x12366;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12793 = x12597 + x12367;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12794 = x12598 + x12368;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12795 = x12599 + x12369;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12796 = x12600 + x12370;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12797 = x12601 + x12371;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12798 = x12602 + x12372;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12799 = x12603 + x12373;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12800 = x12604 + x12374;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12801 = x12605 + x12375;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12802 = x12606 + x12376;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12803 = x12607 + x12377;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12804 = x12608 + x12378;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12805 = x12609 + x12379;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12806 = x12610 + x12380;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12807 = x12611 + x12381;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12808 = x12612 + x12382;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12809 = x12613 + x12383;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12810 = x12614 + x12384;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12811 = x12615 + x12385;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12812 = x12616 + x12386;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12813 = x12617 + x12387;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12814 = x12618 + x12388;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12815 = x12619 + x12389;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12816 = x12714 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12817 = x12715 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12818 = x12717 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12819 = x12718 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12820 = x12719 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12821 = x12720 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12822 = x12721 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12823 = x12722 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12824 = x12723 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12825 = x12724 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12826 = x12725 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12827 = x12726 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12828 = x12727 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12829 = x12728 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12830 = x12729 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12831 = x12730 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12832 = x12731 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12833 = x12733 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12834 = x12734 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12835 = x12735 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12836 = x12736 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12837 = x12737 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12838 = x12738 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12839 = x12739 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12840 = x12740 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12841 = x12741 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12842 = x12742 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12843 = x12743 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12844 = x12744 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12845 = x12745 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12846 = x12746 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12847 = x12747 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12848 = x12748 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12849 = x12749 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12850 = x12750 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12851 = x12751 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12852 = x12753 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12853 = x12754 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12854 = x12755 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12855 = x12756 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12856 = x12757 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12857 = x12758 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12858 = x12759 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12859 = x12760 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12860 = x12761 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12861 = x12762 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12862 = x12763 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12863 = x12764 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12864 = x12765 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12865 = x12766 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12866 = x12767 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12867 = x12769 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12868 = x12770 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12869 = x12771 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12870 = x12772 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12871 = x12773 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12872 = x12774 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12873 = x12775 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12874 = x12776 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12875 = x12777 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12876 = x12778 + x11858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12877 = x12779 + x11873;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12878 = x12780 + x11882;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12879 = x12781 + x11897;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12880 = x12782 + x11912;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12881 = x12783 + x11927;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12882 = x12784 + x11941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12883 = x12785 + x11943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12884 = x12786 + x11945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12885 = x12787 + x11947;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12886 = x12788 + x11949;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12887 = x12789 + x11951;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12888 = x12790 + x11953;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12889 = x12791 + x11955;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12890 = x12792 + x11957;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12891 = x12793 + x11959;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12892 = x12794 + x11961;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12893 = x12795 + x11963;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12894 = x12796 + x11965;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12895 = x12797 + x11967;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12896 = x12798 + x11969;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12897 = x12799 + x11971;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12898 = x12800 + x11973;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12899 = x12801 + x11975;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12900 = x12802 + x11977;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12901 = x12803 + x11979;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12902 = x12804 + x11981;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12903 = x12805 + x11983;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12904 = x12806 + x11985;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12905 = x12807 + x11987;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12906 = x12808 + x11989;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12907 = x12809 + x11991;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12908 = x12810 + x11993;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12909 = x12811 + x11995;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12910 = x12812 + x11997;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12911 = x12813 + x11999;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12912 = x12814 + x12001;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":55:14)
      auto x12913 = x12815 + x12003;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12914 = x12556 + x12620;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12915 = x12572 + x12635;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12916 = x12883 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12917 = x12884 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12918 = x12885 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12919 = x12886 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12920 = x12887 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12921 = x12888 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12922 = x12889 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12923 = x12890 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12924 = x12891 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12925 = x12892 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12926 = x12893 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12927 = x12894 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12928 = x12895 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12929 = x12896 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12930 = x12897 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12931 = x12899 * x96;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12932 = x12900 * x81;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12933 = x12901 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12934 = x12902 * x65;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12935 = x12903 * x61;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12936 = x12904 * x55;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12937 = x12905 * x64;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12938 = x12906 * x93;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12939 = x12907 * x21;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12940 = x12908 * x23;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12941 = x12909 * x18;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12942 = x12910 * x16;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12943 = x12911 * x14;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12944 = x12912 * x40;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:25)
      auto x12945 = x12913 * x11;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12946 = x12876 + x11859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12947 = x12877 + x11874;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12948 = x12878 + x11883;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12949 = x12879 + x11898;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12950 = x12880 + x11913;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12951 = x12881 + x11928;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12952 = x12914 + x12621;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12953 = x12915 + x12636;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12954 = x12716 + x12818;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12955 = x12732 + x12833;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12956 = x12752 + x12852;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12957 = x12768 + x12867;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12958 = x12946 + x11860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12959 = x12947 + x11875;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12960 = x12948 + x11884;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12961 = x12949 + x11899;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12962 = x12950 + x11914;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12963 = x12951 + x11929;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12964 = x12952 + x12622;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12965 = x12953 + x12637;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12966 = x12954 + x12819;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12967 = x12955 + x12834;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12968 = x12956 + x12853;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12969 = x12957 + x12868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12970 = x12882 + x12916;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12971 = x12898 + x12931;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12972 = x12958 + x11861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12973 = x12959 + x11876;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12974 = x12960 + x11885;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12975 = x12961 + x11900;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12976 = x12962 + x11915;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12977 = x12963 + x11930;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12978 = x12964 + x12623;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12979 = x12965 + x12638;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12980 = x12966 + x12820;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12981 = x12967 + x12835;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12982 = x12968 + x12854;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12983 = x12969 + x12869;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12984 = x12970 + x12917;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12985 = x12971 + x12932;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12986 = x12972 + x11862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12987 = x12973 + x11877;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12988 = x12974 + x11886;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12989 = x12975 + x11901;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12990 = x12976 + x11916;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12991 = x12977 + x11931;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12992 = x12978 + x12624;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12993 = x12979 + x12639;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12994 = x12980 + x12821;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12995 = x12981 + x12836;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12996 = x12982 + x12855;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12997 = x12983 + x12870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12998 = x12984 + x12918;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x12999 = x12985 + x12933;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13000 = x12986 + x11863;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13001 = x12987 + x11878;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13002 = x12988 + x11887;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13003 = x12989 + x11902;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13004 = x12990 + x11917;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13005 = x12991 + x11932;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13006 = x12992 + x12625;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13007 = x12993 + x12640;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13008 = x12994 + x12822;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13009 = x12995 + x12837;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13010 = x12996 + x12856;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13011 = x12997 + x12871;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13012 = x12998 + x12919;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13013 = x12999 + x12934;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13014 = x13000 + x11864;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13015 = x13001 + x11879;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13016 = x13002 + x11888;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13017 = x13003 + x11903;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13018 = x13004 + x11918;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13019 = x13005 + x11933;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13020 = x13006 + x12626;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13021 = x13007 + x12641;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13022 = x13008 + x12823;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13023 = x13009 + x12838;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13024 = x13010 + x12857;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13025 = x13011 + x12872;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13026 = x13012 + x12920;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13027 = x13013 + x12935;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13028 = x13014 + x11865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13029 = x13015 + x11848;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13030 = x13016 + x11889;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13031 = x13017 + x11904;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13032 = x13018 + x11919;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13033 = x13019 + x11934;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13034 = x13020 + x12627;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13035 = x13021 + x12642;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13036 = x13022 + x12824;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13037 = x13023 + x12839;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13038 = x13024 + x12858;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13039 = x13025 + x12873;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13040 = x13026 + x12921;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13041 = x13027 + x12936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13042 = x13028 + x11866;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13043 = x13029 + x11850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13044 = x13030 + x11890;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13045 = x13031 + x11905;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13046 = x13032 + x11920;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13047 = x13033 + x11935;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13048 = x13034 + x12628;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13049 = x13035 + x12643;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13050 = x13036 + x12825;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13051 = x13037 + x12840;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13052 = x13038 + x12859;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13053 = x13039 + x12874;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13054 = x13040 + x12922;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13055 = x13041 + x12937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13056 = x13042 + x11867;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13057 = x13043 + x11852;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13058 = x13044 + x11891;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13059 = x13045 + x11906;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13060 = x13046 + x11921;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13061 = x13047 + x11936;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13062 = x13048 + x12629;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13063 = x13049 + x12644;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13064 = x13050 + x12826;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13065 = x13051 + x12841;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13066 = x13052 + x12860;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13067 = x13053 + x12875;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13068 = x13054 + x12923;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13069 = x13055 + x12938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13070 = x13056 + x11868;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13071 = x13057 + x11853;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13072 = x13058 + x11892;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13073 = x13059 + x11907;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13074 = x13060 + x11922;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13075 = x13061 + x11937;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13076 = x13062 + x12630;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13077 = x13063 + x12645;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13078 = x13064 + x12827;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13079 = x13065 + x12842;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13080 = x13066 + x12861;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13081 = x13067 + x12846;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13082 = x13068 + x12924;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13083 = x13069 + x12939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13084 = x13070 + x11869;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13085 = x13071 + x11854;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13086 = x13072 + x11893;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13087 = x13073 + x11908;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13088 = x13074 + x11923;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13089 = x13075 + x11938;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13090 = x13076 + x12631;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13091 = x13077 + x12646;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13092 = x13078 + x12828;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13093 = x13079 + x12843;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13094 = x13080 + x12862;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13095 = x13081 + x12847;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13096 = x13082 + x12925;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13097 = x13083 + x12940;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13098 = x13086 + x11894;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13099 = x13087 + x11909;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13100 = x13084 + x11870;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13101 = x13085 + x11855;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13102 = x13088 + x11924;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13103 = x13089 + x11939;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13104 = x13090 + x12632;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13105 = x13091 + x12647;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13106 = x13092 + x12829;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13107 = x13093 + x12844;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13108 = x13094 + x12863;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13109 = x13095 + x12848;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13110 = x13096 + x12926;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13111 = x13097 + x12941;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13112 = x13104 + x12633;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13113 = x13105 + x12648;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13114 = x13106 + x12830;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13115 = x13107 + x12845;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13116 = x13108 + x12864;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13117 = x13109 + x12849;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13118 = x13110 + x12927;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13119 = x13111 + x12942;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13120 = x13112 + x12634;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13121 = x13113 + x12649;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13122 = x13114 + x12831;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13123 = x13115 + x12816;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13124 = x13116 + x12865;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13125 = x13117 + x12850;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13126 = x13118 + x12928;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13127 = x13119 + x12943;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13128 = x13122 + x12832;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13129 = x13123 + x12817;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13130 = x13124 + x12866;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13131 = x13125 + x12851;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13132 = x13126 + x12929;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13133 = x13127 + x12944;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13134 = x13120 + x13130;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13135 = x13121 + x13131;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13136 = x13102 + x13134;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13137 = x13103 + x13135;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13138 = x12164 + x13136;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13139 = x12165 + x13137;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13140 = x13100 + x13139;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13141 = x13101 + x13138;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13142 = x13132 + x12930;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":74:16)
      auto x13143 = x13133 + x12945;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13144 = x13140 + x13099;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13145 = x13141 + x13098;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13146 = x13142 + x13128;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13147 = x13143 + x13129;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13148 = x13140 + x13147;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":83:14)
      auto x13149 = x13141 + x13146;
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":492:5)
      {
        auto& reg = arg2[154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13149);
        reg = x13149;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":493:5)
      {
        auto& reg = arg2[156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13145);
        reg = x13145;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":492:5)
      {
        auto& reg = arg2[155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13148);
        reg = x13148;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":493:5)
      {
        auto& reg = arg2[157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13144);
        reg = x13144;
      }
      if (x9180 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:11))
        auto x13150 = arg2[154 * steps + ((cycle - 0) & mask)];
        assert(x13150 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:26))
        auto x13151 = arg2[155 * steps + ((cycle - 0) & mask)];
        assert(x13151 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13152 = Fp(x13150.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13153 = Fp(x13150.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13154 = x13153 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13154);
            reg = x13154;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13155 = Fp(x13150.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13156 = x13155 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13156);
            reg = x13156;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13157 = Fp(x13150.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13158 = x13157 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13158);
            reg = x13158;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13159 = Fp(x13150.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13160 = x13159 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13160);
            reg = x13160;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13161 = Fp(x13150.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13162 = x13161 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13162);
            reg = x13162;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13163 = Fp(x13150.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13164 = x13163 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13164);
            reg = x13164;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13165 = Fp(x13150.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13166 = x13165 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13166);
            reg = x13166;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13167 = Fp(x13150.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13168 = x13167 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13168);
            reg = x13168;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13169 = Fp(x13150.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13170 = x13169 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13170);
            reg = x13170;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13171 = Fp(x13150.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13172 = x13171 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13172);
            reg = x13172;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13173 = Fp(x13150.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13174 = x13173 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13174);
            reg = x13174;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13175 = Fp(x13150.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13176 = x13175 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13176);
            reg = x13176;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13177 = Fp(x13150.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13178 = x13177 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13178);
            reg = x13178;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13179 = Fp(x13150.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13180 = x13179 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13180);
            reg = x13180;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13181 = Fp(x13150.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13182 = x13181 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13182);
            reg = x13182;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13183 = arg2[160 * steps + ((cycle - 0) & mask)];
        assert(x13183 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13184 = arg2[161 * steps + ((cycle - 0) & mask)];
        assert(x13184 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13185 = arg2[162 * steps + ((cycle - 0) & mask)];
        assert(x13185 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13186 = arg2[163 * steps + ((cycle - 0) & mask)];
        assert(x13186 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13187 = arg2[164 * steps + ((cycle - 0) & mask)];
        assert(x13187 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13188 = arg2[165 * steps + ((cycle - 0) & mask)];
        assert(x13188 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13189 = arg2[166 * steps + ((cycle - 0) & mask)];
        assert(x13189 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13190 = arg2[167 * steps + ((cycle - 0) & mask)];
        assert(x13190 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13191 = arg2[168 * steps + ((cycle - 0) & mask)];
        assert(x13191 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13192 = arg2[169 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13193 = arg2[170 * steps + ((cycle - 0) & mask)];
        assert(x13193 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13194 = arg2[171 * steps + ((cycle - 0) & mask)];
        assert(x13194 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13195 = arg2[172 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13196 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13196 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13197 = arg2[174 * steps + ((cycle - 0) & mask)];
        assert(x13197 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13198 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x13198 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13199 = x13184 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13200 = x13185 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13201 = x13186 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13202 = x13187 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13203 = x13188 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13204 = x13189 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13205 = x13190 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13206 = x13191 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13207 = x13192 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13208 = x13193 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13209 = x13194 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13210 = x13195 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13211 = x13196 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13212 = x13197 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13213 = x13198 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13214 = x13183 + x13199;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13215 = x13214 + x13200;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13216 = x13215 + x13201;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13217 = x13216 + x13202;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13218 = x13217 + x13203;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13219 = x13218 + x13204;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13220 = x13219 + x13205;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13221 = x13220 + x13206;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13222 = x13221 + x13207;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13223 = x13222 + x13208;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13224 = x13223 + x13209;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13225 = x13224 + x13210;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13226 = x13225 + x13211;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13227 = x13226 + x13212;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13228 = x13227 + x13213;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x13229 = x13150 - x13228;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x13230 = x13229 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
          auto x13231 = Fp(x13230.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13231);
            reg = x13231;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13232 = arg2[73 * steps + ((cycle - 0) & mask)];
        assert(x13232 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
        auto x13233 = x13230 - x13232;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
        auto x13234 = x13233 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
        auto x13235 = x99 - x13234;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        auto x13236 = x13234 * x13235;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        assert(x13236 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
        auto x13237 = x13151 + x13230;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13238 = Fp(x13237.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13238);
            reg = x13238;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13239 = Fp(x13237.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13240 = x13239 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13240);
            reg = x13240;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13241 = Fp(x13237.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13242 = x13241 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13242);
            reg = x13242;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13243 = Fp(x13237.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13244 = x13243 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13244);
            reg = x13244;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13245 = Fp(x13237.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13246 = x13245 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13246);
            reg = x13246;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13247 = Fp(x13237.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13248 = x13247 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13248);
            reg = x13248;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13249 = Fp(x13237.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13250 = x13249 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13250);
            reg = x13250;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13251 = Fp(x13237.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13252 = x13251 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13252);
            reg = x13252;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13253 = Fp(x13237.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13254 = x13253 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13254);
            reg = x13254;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13255 = Fp(x13237.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13256 = x13255 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13256);
            reg = x13256;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13257 = Fp(x13237.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13258 = x13257 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13258);
            reg = x13258;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13259 = Fp(x13237.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13260 = x13259 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13260);
            reg = x13260;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13261 = Fp(x13237.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13262 = x13261 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13262);
            reg = x13262;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13263 = Fp(x13237.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13264 = x13263 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13264);
            reg = x13264;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13265 = Fp(x13237.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13266 = x13265 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13266);
            reg = x13266;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13267 = Fp(x13237.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13268 = x13267 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13268);
            reg = x13268;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13269 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x13269 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13270 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x13270 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13271 = arg2[178 * steps + ((cycle - 0) & mask)];
        assert(x13271 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13272 = arg2[179 * steps + ((cycle - 0) & mask)];
        assert(x13272 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13273 = arg2[180 * steps + ((cycle - 0) & mask)];
        assert(x13273 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13274 = arg2[181 * steps + ((cycle - 0) & mask)];
        assert(x13274 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13275 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x13275 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13276 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x13276 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13277 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x13277 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13278 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x13278 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13279 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13280 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x13280 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13281 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x13281 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13282 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13283 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x13283 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13284 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x13284 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13285 = x13270 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13286 = x13271 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13287 = x13272 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13288 = x13273 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13289 = x13274 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13290 = x13275 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13291 = x13276 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13292 = x13277 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13293 = x13278 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13294 = x13279 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13295 = x13280 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13296 = x13281 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13297 = x13282 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13298 = x13283 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13299 = x13284 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13300 = x13269 + x13285;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13301 = x13300 + x13286;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13302 = x13301 + x13287;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13303 = x13302 + x13288;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13304 = x13303 + x13289;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13305 = x13304 + x13290;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13306 = x13305 + x13291;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13307 = x13306 + x13292;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13308 = x13307 + x13293;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13309 = x13308 + x13294;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13310 = x13309 + x13295;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13311 = x13310 + x13296;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13312 = x13311 + x13297;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13313 = x13312 + x13298;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13314 = x13313 + x13299;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x13315 = x13237 - x13314;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x13316 = x13315 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
          auto x13317 = Fp(x13316.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13317);
            reg = x13317;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13318 = arg2[74 * steps + ((cycle - 0) & mask)];
        assert(x13318 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
        auto x13319 = x13316 - x13318;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
        auto x13320 = x13319 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
        auto x13321 = x99 - x13320;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        auto x13322 = x13320 * x13321;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        assert(x13322 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:11))
        auto x13323 = arg2[156 * steps + ((cycle - 0) & mask)];
        assert(x13323 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":140:26))
        auto x13324 = arg2[157 * steps + ((cycle - 0) & mask)];
        assert(x13324 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13325 = Fp(x13323.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13325);
            reg = x13325;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13326 = Fp(x13323.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13327 = x13326 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13327);
            reg = x13327;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13328 = Fp(x13323.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13329 = x13328 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13329);
            reg = x13329;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13330 = Fp(x13323.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13331 = x13330 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13331);
            reg = x13331;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13332 = Fp(x13323.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13333 = x13332 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13333);
            reg = x13333;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13334 = Fp(x13323.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13335 = x13334 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13335);
            reg = x13335;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13336 = Fp(x13323.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13337 = x13336 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13337);
            reg = x13337;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13338 = Fp(x13323.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13339 = x13338 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13339);
            reg = x13339;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13340 = Fp(x13323.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13341 = x13340 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13341);
            reg = x13341;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13342 = Fp(x13323.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13343 = x13342 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13343);
            reg = x13343;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13344 = Fp(x13323.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13345 = x13344 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13345);
            reg = x13345;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13346 = Fp(x13323.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13347 = x13346 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13347);
            reg = x13347;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13348 = Fp(x13323.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13349 = x13348 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13349);
            reg = x13349;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13350 = Fp(x13323.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13351 = x13350 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13351);
            reg = x13351;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13352 = Fp(x13323.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13353 = x13352 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13353);
            reg = x13353;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13354 = Fp(x13323.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13355 = x13354 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13355);
            reg = x13355;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13356 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13357 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13358 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13359 = arg2[195 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13360 = arg2[196 * steps + ((cycle - 0) & mask)];
        assert(x13360 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13361 = arg2[197 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13362 = arg2[198 * steps + ((cycle - 0) & mask)];
        assert(x13362 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13363 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x13363 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13364 = arg2[200 * steps + ((cycle - 0) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13365 = arg2[201 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13366 = arg2[202 * steps + ((cycle - 0) & mask)];
        assert(x13366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13367 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13368 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13369 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x13369 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13370 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x13370 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13371 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x13371 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13372 = x13357 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13373 = x13358 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13374 = x13359 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13375 = x13360 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13376 = x13361 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13377 = x13362 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13378 = x13363 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13379 = x13364 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13380 = x13365 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13381 = x13366 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13382 = x13367 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13383 = x13368 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13384 = x13369 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13385 = x13370 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13386 = x13371 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13387 = x13356 + x13372;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13388 = x13387 + x13373;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13389 = x13388 + x13374;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13390 = x13389 + x13375;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13391 = x13390 + x13376;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13392 = x13391 + x13377;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13393 = x13392 + x13378;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13394 = x13393 + x13379;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13395 = x13394 + x13380;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13396 = x13395 + x13381;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13397 = x13396 + x13382;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13398 = x13397 + x13383;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13399 = x13398 + x13384;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13400 = x13399 + x13385;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13401 = x13400 + x13386;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x13402 = x13323 - x13401;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x13403 = x13402 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":122:26)
          auto x13404 = Fp(x13403.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13404);
            reg = x13404;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13405 = arg2[75 * steps + ((cycle - 0) & mask)];
        assert(x13405 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:20)
        auto x13406 = x13403 - x13405;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":123:19)
        auto x13407 = x13406 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:20)
        auto x13408 = x99 - x13407;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        auto x13409 = x13407 * x13408;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":124:7)
        assert(x13409 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":125:32)
        auto x13410 = x13324 + x13403;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13411 = Fp(x13410.asUInt32() & x99.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13411);
            reg = x13411;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13412 = Fp(x13410.asUInt32() & x96.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13413 = x13412 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13413);
            reg = x13413;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13414 = Fp(x13410.asUInt32() & x81.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13415 = x13414 * x78;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13415);
            reg = x13415;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13416 = Fp(x13410.asUInt32() & x67.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13417 = x13416 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13417);
            reg = x13417;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13418 = Fp(x13410.asUInt32() & x65.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13419 = x13418 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13419);
            reg = x13419;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13420 = Fp(x13410.asUInt32() & x61.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13421 = x13420 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13421);
            reg = x13421;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13422 = Fp(x13410.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13423 = x13422 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13423);
            reg = x13423;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13424 = Fp(x13410.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13425 = x13424 * x63;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13425);
            reg = x13425;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13426 = Fp(x13410.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13427 = x13426 * x94;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13427);
            reg = x13427;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13428 = Fp(x13410.asUInt32() & x21.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13429 = x13428 * x22;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13429);
            reg = x13429;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13430 = Fp(x13410.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13431 = x13430 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13431);
            reg = x13431;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13432 = Fp(x13410.asUInt32() & x18.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13433 = x13432 * x19;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13433);
            reg = x13433;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13434 = Fp(x13410.asUInt32() & x16.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13435 = x13434 * x17;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13435);
            reg = x13435;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13436 = Fp(x13410.asUInt32() & x14.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13437 = x13436 * x15;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13437);
            reg = x13437;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13438 = Fp(x13410.asUInt32() & x40.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13439 = x13438 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13439);
            reg = x13439;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:29)
          auto x13440 = Fp(x13410.asUInt32() & x11.asUInt32());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":104:28)
          auto x13441 = x13440 * x12;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = arg2[223 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13441);
            reg = x13441;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13442 = arg2[208 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13443 = arg2[209 * steps + ((cycle - 0) & mask)];
        assert(x13443 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13444 = arg2[210 * steps + ((cycle - 0) & mask)];
        assert(x13444 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13445 = arg2[211 * steps + ((cycle - 0) & mask)];
        assert(x13445 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13446 = arg2[212 * steps + ((cycle - 0) & mask)];
        assert(x13446 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13447 = arg2[213 * steps + ((cycle - 0) & mask)];
        assert(x13447 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13448 = arg2[214 * steps + ((cycle - 0) & mask)];
        assert(x13448 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13449 = arg2[215 * steps + ((cycle - 0) & mask)];
        assert(x13449 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13450 = arg2[216 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13451 = arg2[217 * steps + ((cycle - 0) & mask)];
        assert(x13451 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13452 = arg2[218 * steps + ((cycle - 0) & mask)];
        assert(x13452 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13453 = arg2[219 * steps + ((cycle - 0) & mask)];
        assert(x13453 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13454 = arg2[220 * steps + ((cycle - 0) & mask)];
        assert(x13454 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13455 = arg2[221 * steps + ((cycle - 0) & mask)];
        assert(x13455 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13456 = arg2[222 * steps + ((cycle - 0) & mask)];
        assert(x13456 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13457 = arg2[223 * steps + ((cycle - 0) & mask)];
        assert(x13457 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13458 = x13443 * x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13459 = x13444 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13460 = x13445 * x67;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13461 = x13446 * x65;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13462 = x13447 * x61;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13463 = x13448 * x55;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13464 = x13449 * x64;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13465 = x13450 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13466 = x13451 * x21;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13467 = x13452 * x23;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13468 = x13453 * x18;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13469 = x13454 * x16;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13470 = x13455 * x14;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13471 = x13456 * x40;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:21)
        auto x13472 = x13457 * x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13473 = x13442 + x13458;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13474 = x13473 + x13459;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13475 = x13474 + x13460;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13476 = x13475 + x13461;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13477 = x13476 + x13462;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13478 = x13477 + x13463;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13479 = x13478 + x13464;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13480 = x13479 + x13465;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13481 = x13480 + x13466;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13482 = x13481 + x13467;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13483 = x13482 + x13468;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13484 = x13483 + x13469;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13485 = x13484 + x13470;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13486 = x13485 + x13471;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":109:13)
        auto x13487 = x13486 + x13472;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:16)
        auto x13488 = x13410 - x13487;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":111:15)
        auto x13489 = x13488 * x10;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":126:27)
          auto x13490 = Fp(x13489.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13490);
            reg = x13490;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13491 = arg2[76 * steps + ((cycle - 0) & mask)];
        assert(x13491 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:21)
        auto x13492 = x13489 - x13491;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":127:20)
        auto x13493 = x13492 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:21)
        auto x13494 = x99 - x13493;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        auto x13495 = x13493 * x13494;
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":128:7)
        assert(x13495 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13496 = arg2[151 * steps + ((cycle - 0) & mask)];
      assert(x13496 != Fp::invalid());
      if (x13496 != 0) {
        if (x9188 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":436:38))
          auto x13497 = arg2[142 * steps + ((cycle - 1) & mask)];
          assert(x13497 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":436:7)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13497);
            reg = x13497;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":437:38))
          auto x13498 = arg2[143 * steps + ((cycle - 1) & mask)];
          assert(x13498 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":437:7)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13498);
            reg = x13498;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":438:7)
          {
            auto& reg = arg2[100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x65);
            reg = x65;
          }
        }
        if (x9189 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":442:51))
          auto x13499 = arg2[142 * steps + ((cycle - 1) & mask)];
          assert(x13499 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":442:51)
          auto x13500 = x13499 + x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":442:7)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13500);
            reg = x13500;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":443:51))
          auto x13501 = arg2[143 * steps + ((cycle - 1) & mask)];
          assert(x13501 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":443:51)
          auto x13502 = x13501 + x65;
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":443:7)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13502);
            reg = x13502;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":444:7)
          {
            auto& reg = arg2[100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":447:27)
      auto x13503 = x99 - x13496;
      if (x13503 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":448:36))
        auto x13504 = arg2[142 * steps + ((cycle - 1) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":448:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13504);
          reg = x13504;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/v1/edsl/sha.cpp":449:36))
        auto x13505 = arg2[143 * steps + ((cycle - 1) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":449:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13505);
          reg = x13505;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/sha.cpp":450:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13506 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x13506 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13507 = x13506 * x9210;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13508 = x13507 * x9211;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x13508 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13509 = arg2[113 * steps + ((cycle - 0) & mask)];
    assert(x13509 != Fp::invalid());
    if (x13509 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13510 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x13510 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13510);
        reg = x13510;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x13511 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13512 = Fp(x13511.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13512);
          reg = x13512;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13513 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x13513 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13514 = x13511 - x13513;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13515 = x13514 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13516 = Fp(x13515.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13516);
          reg = x13516;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13517 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x13517 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13518 = x13515 - x13517;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13519 = x13518 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13520 = Fp(x13519.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13520);
          reg = x13520;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13521 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x13521 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13522 = x13519 - x13521;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13523 = x13522 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x13524 = Fp(x13523.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13524);
          reg = x13524;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13525 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x13525 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x13526 = x13523 - x13525;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x13527 = x13526 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13527);
        reg = x13527;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13528 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x13528 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x13529 = x99 - x13528;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x13530 = x13528 * x13529;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13530);
        reg = x13530;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x13531 = x96 - x13528;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x13532 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x13532 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x13533 = x13532 * x13531;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x13533 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      extern_args[0] = x975;
      extern_log(ctx, cycle, "  PageFault: PC = %10x", extern_args, extern_outs);
      {
        extern_args[0] = x975;
        extern_pageInfo(ctx, cycle, "", extern_args, extern_outs);
        auto x13534 = extern_outs[0];
        auto x13535 = extern_outs[1];
        auto x13536 = extern_outs[2];
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13534);
          reg = x13534;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":43:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13535);
          reg = x13535;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13536);
          reg = x13536;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x13537 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x13537 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":49:20)
      auto x13538 = x13537 - x5;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x13539 = (x13538 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13539);
          reg = x13539;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x13540 = inv(x13538);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13540);
          reg = x13540;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13541 = arg2[124 * steps + ((cycle - 0) & mask)];
      assert(x13541 != Fp::invalid());
      if (x13541 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x13538 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x13542 = x99 - x13541;
      if (x13542 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13543 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x13543 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13544 = x13538 * x13543;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13545 = x13544 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x13545 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13541 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":51:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":52:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      if (x13542 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":55:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":56:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x13546 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x13546 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":59:24)
      auto x13547 = x13537 + x13546;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":60:36)
      auto x13548 = x13547 * x67;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":60:19)
      auto x13549 = x13548 + x4;
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":61:3)
      {
        auto& reg = arg2[117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13549);
        reg = x13549;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":62:3)
      {
        auto& reg = arg2[118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3);
        reg = x3;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/page_fault(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13550 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x13550 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":64:16)
      auto x13551 = x99 - x13550;
      if (x13551 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":74:17)
        auto x13552 = x13537 - x99;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13553 = Fp(x13552.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13553);
            reg = x13553;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13554 = arg2[9 * steps + ((cycle - 0) & mask)];
        assert(x13554 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13555 = x13552 - x13554;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13556 = x13555 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13557 = Fp(x13556.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13557);
            reg = x13557;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13558 = arg2[10 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13559 = x13556 - x13558;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13560 = x13559 * x94;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13560);
          reg = x13560;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":75:17)
        auto x13561 = x5 - x13537;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13562 = Fp(x13561.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13562);
            reg = x13562;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13563 = arg2[11 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13564 = x13561 - x13563;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13565 = x13564 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13566 = Fp(x13565.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13566);
            reg = x13566;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13567 = arg2[12 * steps + ((cycle - 0) & mask)];
        assert(x13567 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13568 = x13565 - x13567;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13569 = x13568 * x94;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13569);
          reg = x13569;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":77:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
      if (x13550 != 0) {
        {
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13570 = arg2[9 * steps + ((cycle - 0) & mask)];
        assert(x13570 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13571 = x98 - x13570;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13572 = x13571 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13573 = Fp(x13572.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13573);
            reg = x13573;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13574 = arg2[10 * steps + ((cycle - 0) & mask)];
        assert(x13574 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13575 = x13572 - x13574;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13576 = x13575 * x94;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13576);
          reg = x13576;
        }
        {
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13577 = arg2[11 * steps + ((cycle - 0) & mask)];
        assert(x13577 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13578 = x98 - x13577;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13579 = x13578 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13580 = Fp(x13579.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13580);
            reg = x13580;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13581 = arg2[12 * steps + ((cycle - 0) & mask)];
        assert(x13581 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13582 = x13579 - x13581;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13583 = x13582 * x94;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13583);
          reg = x13583;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/page_fault.cpp":83:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13584 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x13584 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13585 = x13584 * x13528;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13586 = x13585 * x13529;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x13586 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[13](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13587 = arg2[114 * steps + ((cycle - 0) & mask)];
    assert(x13587 != Fp::invalid());
    if (x13587 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13588 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x13588 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13588);
        reg = x13588;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":216:37))
      auto x13589 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x13589 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":216:37)
      auto x13590 = x13589 - x73;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":216:37)
      assert(x13590 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:216");
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":217:70))
      auto x13591 = arg2[109 * steps + ((cycle - 1) & mask)];
      assert(x13591 != Fp::invalid());
      if (x13591 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13592 = arg2[134 * steps + ((cycle - 1) & mask)];
        assert(x13592 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13593 = arg2[135 * steps + ((cycle - 1) & mask)];
        assert(x13593 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13594 = arg2[136 * steps + ((cycle - 1) & mask)];
        assert(x13594 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13595 = arg2[137 * steps + ((cycle - 1) & mask)];
        assert(x13595 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/2(ECallSoftware)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13596 = arg2[76 * steps + ((cycle - 1) & mask)];
        assert(x13596 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x13597 = x13593 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13598 = x13594 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13599 = x13595 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13600 = x13592 + x13597;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":227:98)
        auto x13601 = x13596 + x99;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13602 = x13600 + x13598;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13603 = x13602 + x13599;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":227:98)
        auto x13604 = x13603 * x78;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":227:98)
        auto x13605 = x13604 + x13601;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":227:98)
        auto x13606 = x13605 - x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":225:5)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13606);
          reg = x13606;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/2(ECallSoftware)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":228:63))
        auto x13607 = arg2[196 * steps + ((cycle - 1) & mask)];
        assert(x13607 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":228:5)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13607);
          reg = x13607;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":231:22)
      auto x13608 = x99 - x13591;
      if (x13608 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":232:56))
        auto x13609 = arg2[172 * steps + ((cycle - 1) & mask)];
        assert(x13609 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":232:56)
        auto x13610 = x13609 - x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":232:5)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13610);
          reg = x13610;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":233:46))
        auto x13611 = arg2[173 * steps + ((cycle - 1) & mask)];
        assert(x13611 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":233:46)
        auto x13612 = x13611 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":233:5)
        {
          auto& reg = arg2[173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13612);
          reg = x13612;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13613 = arg2[172 * steps + ((cycle - 0) & mask)];
      assert(x13613 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x13614 = (x13613 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13614);
          reg = x13614;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x13615 = inv(x13613);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = arg2[180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13615);
          reg = x13615;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13616 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x13616 != Fp::invalid());
      if (x13616 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        assert(x13613 == 0 && "eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x13617 = x99 - x13616;
      if (x13617 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13618 = arg2[180 * steps + ((cycle - 0) & mask)];
        assert(x13618 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13619 = x13613 * x13618;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13620 = x13619 - x99;
        // loc("zirgen/components/iszero.cpp":18:26)
        assert(x13620 == 0 && "eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13591 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/2(ECallSoftware)/Twit/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13621 = arg2[76 * steps + ((cycle - 1) & mask)];
        assert(x13621 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":241:80)
        auto x13622 = x13621 + x99;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":241:80)
        auto x13623 = x13622 * x13617;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13624 = (x13623 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13624);
            reg = x13624;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13625 = x13623 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13626 = (x13625 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13626);
            reg = x13626;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13627 = x13623 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13628 = (x13627 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13628);
            reg = x13628;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13629 = x13623 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13630 = (x13629 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13630);
            reg = x13630;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13631 = x13623 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13632 = (x13631 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13632);
            reg = x13632;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13633 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13634 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x13634 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13635 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x13635 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13636 = arg2[178 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13637 = x13634 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13638 = x13635 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13639 = x13636 * x81;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13640 = x13633 + x13637;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13641 = x13640 + x13638;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13642 = x13641 + x13639;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13643 = x13642 - x13623;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x13643 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13644 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13644 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":244:10)
        auto x13645 = x13644 * x81;
        extern_args[0] = x13645;
        extern_args[1] = x13613;
        extern_args[2] = x13642;
        extern_log(ctx, cycle, "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", extern_args, extern_outs);
      }
      if (x13608 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":249:43)
        auto x13646 = x13617 * x81;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13647 = (x13646 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13647);
            reg = x13647;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13648 = x13646 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13649 = (x13648 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13649);
            reg = x13649;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13650 = x13646 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13651 = (x13650 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13651);
            reg = x13651;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13652 = x13646 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13653 = (x13652 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13653);
            reg = x13653;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13654 = x13646 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13655 = (x13654 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13655);
            reg = x13655;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13656 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x13656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13657 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x13657 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13658 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x13658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13659 = arg2[178 * steps + ((cycle - 0) & mask)];
        assert(x13659 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13660 = x13657 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13661 = x13658 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13662 = x13659 * x81;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13663 = x13656 + x13660;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13664 = x13663 + x13661;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13665 = x13664 + x13662;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13666 = x13665 - x13646;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x13666 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":251:24))
      auto x13667 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x13667 != Fp::invalid());
      if (x13667 != 0) {
        {
          extern_syscallFini(ctx, cycle, "", extern_args, extern_outs);
          auto x13668 = extern_outs[0];
          auto x13669 = extern_outs[1];
          auto x13670 = extern_outs[2];
          auto x13671 = extern_outs[3];
          auto x13672 = extern_outs[4];
          auto x13673 = extern_outs[5];
          auto x13674 = extern_outs[6];
          auto x13675 = extern_outs[7];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13668);
            reg = x13668;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13669);
            reg = x13669;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13670);
            reg = x13670;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13671);
            reg = x13671;
          }
          {
            extern_args[0] = x30;
            extern_args[1] = x13668;
            extern_args[2] = x13669;
            extern_args[3] = x13670;
            extern_args[4] = x13671;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13676 = arg2[120 * steps + ((cycle - 0) & mask)];
          assert(x13676 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13677 = arg2[121 * steps + ((cycle - 0) & mask)];
          assert(x13677 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13678 = arg2[122 * steps + ((cycle - 0) & mask)];
          assert(x13678 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13679 = arg2[123 * steps + ((cycle - 0) & mask)];
          assert(x13679 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x30);
            reg = x30;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13676);
            reg = x13676;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13677);
            reg = x13677;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13678);
            reg = x13678;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13679);
            reg = x13679;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13672);
            reg = x13672;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13673);
            reg = x13673;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13674);
            reg = x13674;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13675);
            reg = x13675;
          }
          {
            extern_args[0] = x31;
            extern_args[1] = x13672;
            extern_args[2] = x13673;
            extern_args[3] = x13674;
            extern_args[4] = x13675;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13680 = arg2[127 * steps + ((cycle - 0) & mask)];
          assert(x13680 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13681 = arg2[128 * steps + ((cycle - 0) & mask)];
          assert(x13681 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13682 = arg2[129 * steps + ((cycle - 0) & mask)];
          assert(x13682 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13683 = arg2[130 * steps + ((cycle - 0) & mask)];
          assert(x13683 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x31);
            reg = x31;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13680);
            reg = x13680;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13681);
            reg = x13681;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13682);
            reg = x13682;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13683);
            reg = x13683;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13684 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x13684 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":260:8)
        auto x13685 = x13684 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":260:8)
        assert(x13685 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:260");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13686 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x13686 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":261:8)
        auto x13687 = x13686 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":261:8)
        assert(x13687 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:261");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13688 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x13688 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":263:8)
        auto x13689 = x13688 - x30;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":263:8)
        assert(x13689 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:263");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13690 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x13690 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":264:8)
        auto x13691 = x13690 - x31;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":264:8)
        assert(x13691 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:264");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13692 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x13692 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13693 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x13693 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13694 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x13694 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13695 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x13695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13696 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x13696 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13697 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x13697 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13698 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x13698 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13699 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x13699 != Fp::invalid());
        extern_args[0] = x13692;
        extern_args[1] = x13693;
        extern_args[2] = x13694;
        extern_args[3] = x13695;
        extern_args[4] = x13696;
        extern_args[5] = x13697;
        extern_args[6] = x13698;
        extern_args[7] = x13699;
        extern_log(ctx, cycle, "  COPYIN FINI: a0=%w a1=%w", extern_args, extern_outs);
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":271:19)
        auto x13700 = x975 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x13701 = x13700 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13702 = Fp(x13701.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13702);
            reg = x13702;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13703 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x13703 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13704 = x13701 - x13703;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13705 = x13704 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13706 = Fp(x13705.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13706);
            reg = x13706;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13707 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x13707 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13708 = x13705 - x13707;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13709 = x13708 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13710 = Fp(x13709.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13710);
            reg = x13710;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13711 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x13711 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13712 = x13709 - x13711;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13713 = x13712 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x13714 = Fp(x13713.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13714);
            reg = x13714;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13715 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x13715 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x13716 = x13713 - x13715;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x13717 = x13716 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13717);
          reg = x13717;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13718 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x13718 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x13719 = x99 - x13718;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x13720 = x13718 * x13719;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13720);
          reg = x13720;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x13721 = x96 - x13718;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13722 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x13722 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x13723 = x13722 * x13721;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x13723 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":272:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":274:28)
      auto x13724 = x99 - x13667;
      if (x13724 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x13725 = x975 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13726 = Fp(x13725.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13726);
            reg = x13726;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13727 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x13727 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13728 = x13725 - x13727;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13729 = x13728 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13730 = Fp(x13729.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13730);
            reg = x13730;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13731 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x13731 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13732 = x13729 - x13731;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13733 = x13732 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13734 = Fp(x13733.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13734);
            reg = x13734;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13735 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x13735 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13736 = x13733 - x13735;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13737 = x13736 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x13738 = Fp(x13737.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13738);
            reg = x13738;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13739 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x13739 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x13740 = x13737 - x13739;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x13741 = x13740 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13741);
          reg = x13741;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13742 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x13742 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x13743 = x99 - x13742;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x13744 = x13742 * x13743;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13744);
          reg = x13744;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x13745 = x96 - x13742;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13746 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x13746 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x13747 = x13746 * x13745;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x13747 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":276:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13588);
        reg = x13588;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":287:35))
      auto x13748 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x13748 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":285:35))
      auto x13749 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x13749 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":287:35))
      auto x13750 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x13750 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/OneHot/hot[3](Reg)"("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":287:35))
      auto x13751 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x13751 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":287:22)
      auto x13752 = x13748 + x13750;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":287:22)
      auto x13753 = x13752 + x13751;
      if (x13749 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13754 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13754 != Fp::invalid());
        {
          extern_syscallBody(ctx, cycle, "", extern_args, extern_outs);
          auto x13755 = extern_outs[0];
          auto x13756 = extern_outs[1];
          auto x13757 = extern_outs[2];
          auto x13758 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13755);
            reg = x13755;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13756);
            reg = x13756;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13757);
            reg = x13757;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13758);
            reg = x13758;
          }
          {
            extern_args[0] = x13754;
            extern_args[1] = x13755;
            extern_args[2] = x13756;
            extern_args[3] = x13757;
            extern_args[4] = x13758;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13759 = arg2[120 * steps + ((cycle - 0) & mask)];
          assert(x13759 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13760 = arg2[121 * steps + ((cycle - 0) & mask)];
          assert(x13760 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13761 = arg2[122 * steps + ((cycle - 0) & mask)];
          assert(x13761 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13762 = arg2[123 * steps + ((cycle - 0) & mask)];
          assert(x13762 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13754);
            reg = x13754;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13759);
            reg = x13759;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13760);
            reg = x13760;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13761);
            reg = x13761;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13762);
            reg = x13762;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":296:41)
          auto x13763 = x13754 * x81;
          extern_args[0] = x13763;
          extern_args[1] = x13759;
          extern_args[2] = x13760;
          extern_args[3] = x13761;
          extern_args[4] = x13762;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13764 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x13764 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        auto x13765 = x13764 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        assert(x13765 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:299");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13766 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x13766 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        auto x13767 = x13766 - x13754;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        assert(x13767 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:300");
      }
      if (x13753 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":285:22)
      auto x13768 = x13751 + x13749;
      if (x13768 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13769 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13769 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":292:23)
        auto x13770 = x13769 + x99;
        {
          extern_syscallBody(ctx, cycle, "", extern_args, extern_outs);
          auto x13771 = extern_outs[0];
          auto x13772 = extern_outs[1];
          auto x13773 = extern_outs[2];
          auto x13774 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13771);
            reg = x13771;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13772);
            reg = x13772;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13773);
            reg = x13773;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13774);
            reg = x13774;
          }
          {
            extern_args[0] = x13770;
            extern_args[1] = x13771;
            extern_args[2] = x13772;
            extern_args[3] = x13773;
            extern_args[4] = x13774;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13775 = arg2[127 * steps + ((cycle - 0) & mask)];
          assert(x13775 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13776 = arg2[128 * steps + ((cycle - 0) & mask)];
          assert(x13776 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13777 = arg2[129 * steps + ((cycle - 0) & mask)];
          assert(x13777 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13778 = arg2[130 * steps + ((cycle - 0) & mask)];
          assert(x13778 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13770);
            reg = x13770;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13775);
            reg = x13775;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13776);
            reg = x13776;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13777);
            reg = x13777;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13778);
            reg = x13778;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":296:41)
          auto x13779 = x13770 * x81;
          extern_args[0] = x13779;
          extern_args[1] = x13775;
          extern_args[2] = x13776;
          extern_args[3] = x13777;
          extern_args[4] = x13778;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13780 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x13780 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        auto x13781 = x13780 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        assert(x13781 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:299");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13782 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x13782 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        auto x13783 = x13782 - x13770;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        assert(x13783 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:300");
      }
      if (x13752 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":285:22)
      auto x13784 = x13750 + x13751;
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":285:22)
      auto x13785 = x13784 + x13749;
      if (x13785 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13786 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13786 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":292:23)
        auto x13787 = x13786 + x96;
        {
          extern_syscallBody(ctx, cycle, "", extern_args, extern_outs);
          auto x13788 = extern_outs[0];
          auto x13789 = extern_outs[1];
          auto x13790 = extern_outs[2];
          auto x13791 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13788);
            reg = x13788;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13789);
            reg = x13789;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13790);
            reg = x13790;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13791);
            reg = x13791;
          }
          {
            extern_args[0] = x13787;
            extern_args[1] = x13788;
            extern_args[2] = x13789;
            extern_args[3] = x13790;
            extern_args[4] = x13791;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13792 = arg2[134 * steps + ((cycle - 0) & mask)];
          assert(x13792 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13793 = arg2[135 * steps + ((cycle - 0) & mask)];
          assert(x13793 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13794 = arg2[136 * steps + ((cycle - 0) & mask)];
          assert(x13794 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13795 = arg2[137 * steps + ((cycle - 0) & mask)];
          assert(x13795 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13787);
            reg = x13787;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13792);
            reg = x13792;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13793);
            reg = x13793;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13794);
            reg = x13794;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13795);
            reg = x13795;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":296:41)
          auto x13796 = x13787 * x81;
          extern_args[0] = x13796;
          extern_args[1] = x13792;
          extern_args[2] = x13793;
          extern_args[3] = x13794;
          extern_args[4] = x13795;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13797 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x13797 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        auto x13798 = x13797 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        assert(x13798 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:299");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13799 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x13799 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        auto x13800 = x13799 - x13787;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        assert(x13800 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:300");
      }
      if (x13748 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":285:22)
      auto x13801 = x13753 + x13749;
      if (x13801 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13802 = arg2[173 * steps + ((cycle - 0) & mask)];
        assert(x13802 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":292:23)
        auto x13803 = x13802 + x79;
        {
          extern_syscallBody(ctx, cycle, "", extern_args, extern_outs);
          auto x13804 = extern_outs[0];
          auto x13805 = extern_outs[1];
          auto x13806 = extern_outs[2];
          auto x13807 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13804);
            reg = x13804;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13805);
            reg = x13805;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13806);
            reg = x13806;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13807);
            reg = x13807;
          }
          {
            extern_args[0] = x13803;
            extern_args[1] = x13804;
            extern_args[2] = x13805;
            extern_args[3] = x13806;
            extern_args[4] = x13807;
            extern_args[5] = x96;
            extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13808 = arg2[141 * steps + ((cycle - 0) & mask)];
          assert(x13808 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13809 = arg2[142 * steps + ((cycle - 0) & mask)];
          assert(x13809 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13810 = arg2[143 * steps + ((cycle - 0) & mask)];
          assert(x13810 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13811 = arg2[144 * steps + ((cycle - 0) & mask)];
          assert(x13811 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13803);
            reg = x13803;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13808);
            reg = x13808;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13809);
            reg = x13809;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13810);
            reg = x13810;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13811);
            reg = x13811;
          }
          // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":296:41)
          auto x13812 = x13803 * x81;
          extern_args[0] = x13812;
          extern_args[1] = x13808;
          extern_args[2] = x13809;
          extern_args[3] = x13810;
          extern_args[4] = x13811;
          extern_log(ctx, cycle, "  COPYIN BODY: %x <- %w", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("zirgen/components/ram.cpp":179:10))
        auto x13813 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x13813 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        auto x13814 = x13813 - x961;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":299:10)
        assert(x13814 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:299");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("zirgen/components/ram.cpp":175:10))
        auto x13815 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x13815 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        auto x13816 = x13815 - x13803;
        // loc("zirgen/circuit/rv32im/v1/edsl/ecall.cpp":300:10)
        assert(x13816 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/ecall.cpp:300");
      }
      if (x98 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13817 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x13817 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13818 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x13818 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13819 = x13817 * x13818;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x13820 = x99 - x13818;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x13821 = x13819 * x13820;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x13821 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[14](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13822 = arg2[115 * steps + ((cycle - 0) & mask)];
    assert(x13822 != Fp::invalid());
    if (x13822 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13823 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x13823 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13823);
        reg = x13823;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":179:37))
      auto x13824 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x13824 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":179:37)
      auto x13825 = x13824 - x72;
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":179:37)
      assert(x13825 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:179");
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":180:70))
      auto x13826 = arg2[109 * steps + ((cycle - 1) & mask)];
      assert(x13826 != Fp::invalid());
      if (x13826 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        {
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13827 = arg2[174 * steps + ((cycle - 0) & mask)];
        assert(x13827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13828 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x13828 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13829 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x13829 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13830 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x13830 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13831 = x13828 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13832 = x13829 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13833 = x13830 * x81;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13834 = x13827 + x13831;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13835 = x13834 + x13832;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13836 = x13835 + x13833;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x13836 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13837 = arg2[134 * steps + ((cycle - 1) & mask)];
        assert(x13837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13838 = arg2[135 * steps + ((cycle - 1) & mask)];
        assert(x13838 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13839 = arg2[136 * steps + ((cycle - 1) & mask)];
        assert(x13839 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13840 = arg2[137 * steps + ((cycle - 1) & mask)];
        assert(x13840 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x13841 = x13838 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13842 = x13839 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13843 = x13840 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13844 = x13837 + x13841;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13845 = x13844 + x13842;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13846 = x13845 + x13843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":190:9)
        assert(x13846 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:190");
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":192:22)
      auto x13847 = x99 - x13826;
      if (x13847 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":193:47))
        auto x13848 = arg2[173 * steps + ((cycle - 1) & mask)];
        assert(x13848 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13849 = arg2[178 * steps + ((cycle - 1) & mask)];
        assert(x13849 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":193:23)
        auto x13850 = x99 - x13848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":193:22)
        auto x13851 = x13850 - x13849;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = arg2[178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13851);
          reg = x13851;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13852 = arg2[178 * steps + ((cycle - 0) & mask)];
        assert(x13852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13853 = arg2[174 * steps + ((cycle - 1) & mask)];
        assert(x13853 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13854 = arg2[175 * steps + ((cycle - 1) & mask)];
        assert(x13854 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13855 = arg2[176 * steps + ((cycle - 1) & mask)];
        assert(x13855 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13856 = arg2[177 * steps + ((cycle - 1) & mask)];
        assert(x13856 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13857 = x13854 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13858 = x13855 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13859 = x13856 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":194:41)
        auto x13860 = x99 - x13852;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13861 = x13853 + x13857;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13862 = x13861 + x13858;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13863 = x13862 + x13859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":194:36)
        auto x13864 = x13863 + x13860;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13865 = (x13864 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13865);
            reg = x13865;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13866 = x13864 - x99;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13867 = (x13866 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13867);
            reg = x13867;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13868 = x13864 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13869 = (x13868 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13869);
            reg = x13869;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13870 = x13864 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13871 = (x13870 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13871);
            reg = x13871;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13872 = x13864 - x81;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13873 = (x13872 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = arg2[177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13873);
            reg = x13873;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13874 = arg2[174 * steps + ((cycle - 0) & mask)];
        assert(x13874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13875 = arg2[175 * steps + ((cycle - 0) & mask)];
        assert(x13875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13876 = arg2[176 * steps + ((cycle - 0) & mask)];
        assert(x13876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13877 = arg2[177 * steps + ((cycle - 0) & mask)];
        assert(x13877 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13878 = x13875 * x96;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13879 = x13876 * x79;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13880 = x13877 * x81;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13881 = x13874 + x13878;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13882 = x13881 + x13879;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13883 = x13882 + x13880;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13884 = x13883 - x13864;
        // loc("./zirgen/components/onehot.h":40:8)
        assert(x13884 == 0 && "eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":196:19))
      auto x13885 = arg2[175 * steps + ((cycle - 0) & mask)];
      assert(x13885 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":196:34))
      auto x13886 = arg2[177 * steps + ((cycle - 0) & mask)];
      assert(x13886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13887 = arg2[178 * steps + ((cycle - 0) & mask)];
      assert(x13887 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":196:19)
      auto x13888 = x13885 + x13886;
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":196:18)
      auto x13889 = x13888 * x13887;
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[179 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13889);
        reg = x13889;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":197:17)
      auto x13890 = x13886 * x13887;
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[180 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13890);
        reg = x13890;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x13891 = arg2[174 * steps + ((cycle - 0) & mask)];
      assert(x13891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x13892 = arg2[176 * steps + ((cycle - 0) & mask)];
      assert(x13892 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13893 = arg2[179 * steps + ((cycle - 0) & mask)];
      assert(x13893 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13894 = arg2[180 * steps + ((cycle - 0) & mask)];
      assert(x13894 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13895 = x13885 * x96;
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13896 = x13892 * x79;
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13897 = x13886 * x81;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13898 = x13891 + x13895;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13899 = x13898 + x13896;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13900 = x13899 + x13897;
      extern_args[0] = x13900;
      extern_args[1] = x13887;
      extern_args[2] = x13893;
      extern_args[3] = x13894;
      extern_log(ctx, cycle, "BIGINT: stage = %u, stageOffset = %u, mulActive = %u, finalize = %u", extern_args, extern_outs);
      // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":205:18))
      auto x13901 = arg2[173 * steps + ((cycle - 0) & mask)];
      assert(x13901 != Fp::invalid());
      if (x13901 != 0) {
        {
          extern_args[0] = x30;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13902 = extern_outs[0];
          auto x13903 = extern_outs[1];
          auto x13904 = extern_outs[2];
          auto x13905 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13902);
            reg = x13902;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13903);
            reg = x13903;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13904);
            reg = x13904;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13905);
            reg = x13905;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13906 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x13906 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13907 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x13907 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13908 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x13908 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13909 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x13909 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13906);
          reg = x13906;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13907);
          reg = x13907;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13908);
          reg = x13908;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13909);
          reg = x13909;
        }
        {
          extern_args[0] = x25;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13910 = extern_outs[0];
          auto x13911 = extern_outs[1];
          auto x13912 = extern_outs[2];
          auto x13913 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13910);
            reg = x13910;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13911);
            reg = x13911;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13912);
            reg = x13912;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13913);
            reg = x13913;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13914 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x13914 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13915 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x13915 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13916 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x13916 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13917 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x13917 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13914);
          reg = x13914;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13915);
          reg = x13915;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13916);
          reg = x13916;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13917);
          reg = x13917;
        }
        {
          extern_args[0] = x24;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13918 = extern_outs[0];
          auto x13919 = extern_outs[1];
          auto x13920 = extern_outs[2];
          auto x13921 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13918);
            reg = x13918;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13919);
            reg = x13919;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13920);
            reg = x13920;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13921);
            reg = x13921;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13922 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x13922 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13923 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x13923 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13924 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x13924 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13925 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x13925 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13922);
          reg = x13922;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13923);
          reg = x13923;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13924);
          reg = x13924;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13925);
          reg = x13925;
        }
        {
          extern_args[0] = x29;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13926 = extern_outs[0];
          auto x13927 = extern_outs[1];
          auto x13928 = extern_outs[2];
          auto x13929 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13926);
            reg = x13926;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13927);
            reg = x13927;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13928);
            reg = x13928;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13929);
            reg = x13929;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13930 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x13930 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13931 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x13931 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13932 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x13932 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13933 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x13933 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13930);
          reg = x13930;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13931);
          reg = x13931;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13932);
          reg = x13932;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13933);
          reg = x13933;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":213:21)
      auto x13934 = x99 - x13887;
      if (x13934 != 0) {
        if (x13891 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13935 = arg2[141 * steps + ((cycle - 1) & mask)];
          assert(x13935 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13936 = arg2[142 * steps + ((cycle - 1) & mask)];
          assert(x13936 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13937 = arg2[143 * steps + ((cycle - 1) & mask)];
          assert(x13937 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13938 = arg2[144 * steps + ((cycle - 1) & mask)];
          assert(x13938 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13939 = x13936 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13940 = x13937 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13941 = x13938 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13942 = x13935 + x13939;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13943 = x13942 + x13940;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13944 = x13943 + x13941;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:83)
          auto x13945 = x13944 * x78;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:9)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13945);
            reg = x13945;
          }
        }
        if (x13885 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13946 = arg2[127 * steps + ((cycle - 3) & mask)];
          assert(x13946 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13947 = arg2[128 * steps + ((cycle - 3) & mask)];
          assert(x13947 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13948 = arg2[129 * steps + ((cycle - 3) & mask)];
          assert(x13948 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13949 = arg2[130 * steps + ((cycle - 3) & mask)];
          assert(x13949 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13950 = x13947 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13951 = x13948 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13952 = x13949 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13953 = x13946 + x13950;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13954 = x13953 + x13951;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13955 = x13954 + x13952;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:83)
          auto x13956 = x13955 * x78;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:9)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13956);
            reg = x13956;
          }
        }
        if (x13892 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13957 = arg2[134 * steps + ((cycle - 5) & mask)];
          assert(x13957 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13958 = arg2[135 * steps + ((cycle - 5) & mask)];
          assert(x13958 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13959 = arg2[136 * steps + ((cycle - 5) & mask)];
          assert(x13959 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13960 = arg2[137 * steps + ((cycle - 5) & mask)];
          assert(x13960 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13961 = x13958 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13962 = x13959 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13963 = x13960 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13964 = x13957 + x13961;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13965 = x13964 + x13962;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13966 = x13965 + x13963;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:83)
          auto x13967 = x13966 * x78;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:9)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13967);
            reg = x13967;
          }
        }
        if (x13886 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13968 = arg2[120 * steps + ((cycle - 7) & mask)];
          assert(x13968 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13969 = arg2[121 * steps + ((cycle - 7) & mask)];
          assert(x13969 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13970 = arg2[122 * steps + ((cycle - 7) & mask)];
          assert(x13970 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13971 = arg2[123 * steps + ((cycle - 7) & mask)];
          assert(x13971 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13972 = x13969 * x93;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13973 = x13970 * x80;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13974 = x13971 * x82;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13975 = x13968 + x13972;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13976 = x13975 + x13973;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13977 = x13976 + x13974;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:83)
          auto x13978 = x13977 * x78;
          // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":239:9)
          {
            auto& reg = arg2[172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13978);
            reg = x13978;
          }
        }
      }
      if (x13887 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":243:54))
        auto x13979 = arg2[172 * steps + ((cycle - 1) & mask)];
        assert(x13979 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":243:21)
        {
          auto& reg = arg2[172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13979);
          reg = x13979;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":247:48)
      auto x13980 = x13891 + x13885;
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":247:48)
      auto x13981 = x13980 + x13892;
      if (x13981 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x13982 = arg2[172 * steps + ((cycle - 0) & mask)];
        assert(x13982 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":249:40)
        auto x13983 = x13887 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":249:31)
        auto x13984 = x13982 + x13983;
        {
          extern_args[0] = x13984;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13985 = extern_outs[0];
          auto x13986 = extern_outs[1];
          auto x13987 = extern_outs[2];
          auto x13988 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13985);
            reg = x13985;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13986);
            reg = x13986;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13987);
            reg = x13987;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13988);
            reg = x13988;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13989 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x13989 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13990 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x13990 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13991 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x13991 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13992 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x13992 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13984);
          reg = x13984;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13989);
          reg = x13989;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13990);
          reg = x13990;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13991);
          reg = x13991;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13992);
          reg = x13992;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":249:31)
        auto x13993 = x13984 + x99;
        {
          extern_args[0] = x13993;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x13994 = extern_outs[0];
          auto x13995 = extern_outs[1];
          auto x13996 = extern_outs[2];
          auto x13997 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13994);
            reg = x13994;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13995);
            reg = x13995;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13996);
            reg = x13996;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13997);
            reg = x13997;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13998 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x13998 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13999 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x13999 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14000 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x14000 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14001 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x14001 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13993);
          reg = x13993;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13998);
          reg = x13998;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13999);
          reg = x13999;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14000);
          reg = x14000;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14001);
          reg = x14001;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":249:31)
        auto x14002 = x13984 + x96;
        {
          extern_args[0] = x14002;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x14003 = extern_outs[0];
          auto x14004 = extern_outs[1];
          auto x14005 = extern_outs[2];
          auto x14006 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14003);
            reg = x14003;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14004);
            reg = x14004;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14005);
            reg = x14005;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14006);
            reg = x14006;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14007 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x14007 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14008 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x14008 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14009 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x14009 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14010 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x14010 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14002);
          reg = x14002;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14007);
          reg = x14007;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14008);
          reg = x14008;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14009);
          reg = x14009;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14010);
          reg = x14010;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":249:31)
        auto x14011 = x13984 + x79;
        {
          extern_args[0] = x14011;
          extern_args[1] = x99;
          extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
          auto x14012 = extern_outs[0];
          auto x14013 = extern_outs[1];
          auto x14014 = extern_outs[2];
          auto x14015 = extern_outs[3];
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14012);
            reg = x14012;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14013);
            reg = x14013;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14014);
            reg = x14014;
          }
          // loc("zirgen/components/u32.cpp":88:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x14015);
            reg = x14015;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14016 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x14016 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14017 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x14017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14018 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x14018 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x14019 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x14019 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14011);
          reg = x14011;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14016);
          reg = x14016;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14017);
          reg = x14017;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14018);
          reg = x14018;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x14019);
          reg = x14019;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":252:10)
        auto x14020 = x13982 * x81;
        // loc("./zirgen/components/u32.h":25:12)
        auto x14021 = x13990 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14022 = x13991 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14023 = x13992 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x14024 = x13999 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14025 = x14000 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14026 = x14001 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x14027 = x14008 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14028 = x14009 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14029 = x14010 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x14030 = x14017 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14031 = x14018 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14032 = x14019 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14033 = x13989 + x14021;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14034 = x13998 + x14024;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14035 = x14007 + x14027;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14036 = x14016 + x14030;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14037 = x14033 + x14022;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14038 = x14034 + x14025;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14039 = x14035 + x14028;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14040 = x14036 + x14031;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14041 = x14037 + x14023;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14042 = x14038 + x14026;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14043 = x14039 + x14029;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14044 = x14040 + x14032;
        extern_args[0] = x14020;
        extern_args[1] = x14041;
        extern_args[2] = x14042;
        extern_args[3] = x14043;
        extern_args[4] = x14044;
        extern_log(ctx, cycle, "  Reading: ioAddr = 0x%x, data = { %u, %u, %u, %u }", extern_args, extern_outs);
      }
      {
        extern_args[0] = x25;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14045 = extern_outs[0];
        auto x14046 = extern_outs[1];
        auto x14047 = extern_outs[2];
        auto x14048 = extern_outs[3];
        // loc("./zirgen/components/u32.h":25:12)
        auto x14049 = x14046 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14050 = x14047 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14051 = x14048 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14052 = x14045 + x14049;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14053 = x14052 + x14050;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14054 = x14053 + x14051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:14)
        auto x14055 = x14054 * x78;
        extern_args[0] = x14055;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14056 = extern_outs[0];
        auto x14057 = extern_outs[1];
        auto x14058 = extern_outs[2];
        auto x14059 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14060 = x14055 + x99;
        extern_args[0] = x14060;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14061 = extern_outs[0];
        auto x14062 = extern_outs[1];
        auto x14063 = extern_outs[2];
        auto x14064 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14065 = x14055 + x96;
        extern_args[0] = x14065;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14066 = extern_outs[0];
        auto x14067 = extern_outs[1];
        auto x14068 = extern_outs[2];
        auto x14069 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14070 = x14055 + x79;
        extern_args[0] = x14070;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14071 = extern_outs[0];
        auto x14072 = extern_outs[1];
        auto x14073 = extern_outs[2];
        auto x14074 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14075 = x14055 + x81;
        extern_args[0] = x14075;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14076 = extern_outs[0];
        auto x14077 = extern_outs[1];
        auto x14078 = extern_outs[2];
        auto x14079 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14080 = x14055 + x70;
        extern_args[0] = x14080;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14081 = extern_outs[0];
        auto x14082 = extern_outs[1];
        auto x14083 = extern_outs[2];
        auto x14084 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14085 = x14055 + x69;
        extern_args[0] = x14085;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14086 = extern_outs[0];
        auto x14087 = extern_outs[1];
        auto x14088 = extern_outs[2];
        auto x14089 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14090 = x14055 + x68;
        extern_args[0] = x14090;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14091 = extern_outs[0];
        auto x14092 = extern_outs[1];
        auto x14093 = extern_outs[2];
        auto x14094 = extern_outs[3];
        extern_args[0] = x24;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14095 = extern_outs[0];
        auto x14096 = extern_outs[1];
        auto x14097 = extern_outs[2];
        auto x14098 = extern_outs[3];
        // loc("./zirgen/components/u32.h":25:12)
        auto x14099 = x14096 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14100 = x14097 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14101 = x14098 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14102 = x14095 + x14099;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14103 = x14102 + x14100;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14104 = x14103 + x14101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:14)
        auto x14105 = x14104 * x78;
        extern_args[0] = x14105;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14106 = extern_outs[0];
        auto x14107 = extern_outs[1];
        auto x14108 = extern_outs[2];
        auto x14109 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14110 = x14105 + x99;
        extern_args[0] = x14110;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14111 = extern_outs[0];
        auto x14112 = extern_outs[1];
        auto x14113 = extern_outs[2];
        auto x14114 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14115 = x14105 + x96;
        extern_args[0] = x14115;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14116 = extern_outs[0];
        auto x14117 = extern_outs[1];
        auto x14118 = extern_outs[2];
        auto x14119 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14120 = x14105 + x79;
        extern_args[0] = x14120;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14121 = extern_outs[0];
        auto x14122 = extern_outs[1];
        auto x14123 = extern_outs[2];
        auto x14124 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14125 = x14105 + x81;
        extern_args[0] = x14125;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14126 = extern_outs[0];
        auto x14127 = extern_outs[1];
        auto x14128 = extern_outs[2];
        auto x14129 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14130 = x14105 + x70;
        extern_args[0] = x14130;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14131 = extern_outs[0];
        auto x14132 = extern_outs[1];
        auto x14133 = extern_outs[2];
        auto x14134 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14135 = x14105 + x69;
        extern_args[0] = x14135;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14136 = extern_outs[0];
        auto x14137 = extern_outs[1];
        auto x14138 = extern_outs[2];
        auto x14139 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14140 = x14105 + x68;
        extern_args[0] = x14140;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14141 = extern_outs[0];
        auto x14142 = extern_outs[1];
        auto x14143 = extern_outs[2];
        auto x14144 = extern_outs[3];
        extern_args[0] = x29;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14145 = extern_outs[0];
        auto x14146 = extern_outs[1];
        auto x14147 = extern_outs[2];
        auto x14148 = extern_outs[3];
        // loc("./zirgen/components/u32.h":25:12)
        auto x14149 = x14146 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x14150 = x14147 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x14151 = x14148 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14152 = x14145 + x14149;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14153 = x14152 + x14150;
        // loc("./zirgen/components/u32.h":24:12)
        auto x14154 = x14153 + x14151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":13:14)
        auto x14155 = x14154 * x78;
        extern_args[0] = x14155;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14156 = extern_outs[0];
        auto x14157 = extern_outs[1];
        auto x14158 = extern_outs[2];
        auto x14159 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14160 = x14155 + x99;
        extern_args[0] = x14160;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14161 = extern_outs[0];
        auto x14162 = extern_outs[1];
        auto x14163 = extern_outs[2];
        auto x14164 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14165 = x14155 + x96;
        extern_args[0] = x14165;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14166 = extern_outs[0];
        auto x14167 = extern_outs[1];
        auto x14168 = extern_outs[2];
        auto x14169 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14170 = x14155 + x79;
        extern_args[0] = x14170;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14171 = extern_outs[0];
        auto x14172 = extern_outs[1];
        auto x14173 = extern_outs[2];
        auto x14174 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14175 = x14155 + x81;
        extern_args[0] = x14175;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14176 = extern_outs[0];
        auto x14177 = extern_outs[1];
        auto x14178 = extern_outs[2];
        auto x14179 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14180 = x14155 + x70;
        extern_args[0] = x14180;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14181 = extern_outs[0];
        auto x14182 = extern_outs[1];
        auto x14183 = extern_outs[2];
        auto x14184 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14185 = x14155 + x69;
        extern_args[0] = x14185;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14186 = extern_outs[0];
        auto x14187 = extern_outs[1];
        auto x14188 = extern_outs[2];
        auto x14189 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":18:27)
        auto x14190 = x14155 + x68;
        extern_args[0] = x14190;
        extern_args[1] = x99;
        extern_ramRead(ctx, cycle, "", extern_args, extern_outs);
        auto x14191 = extern_outs[0];
        auto x14192 = extern_outs[1];
        auto x14193 = extern_outs[2];
        auto x14194 = extern_outs[3];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14195 = x14061 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14196 = x14066 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14197 = x14071 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14198 = x14076 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14199 = x14081 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14200 = x14086 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14201 = x14091 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14202 = x14056 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14203 = x14056 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14204 = x14056 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14205 = x14056 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14206 = x14056 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14207 = x14056 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14208 = x14056 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14209 = x14056 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14210 = x14056 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14211 = x14056 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14212 = x14056 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14213 = x14056 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14214 = x14056 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14215 = x14056 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14216 = x14056 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14217 = x14056 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14218 = x14056 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14219 = x14056 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14220 = x14056 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14221 = x14056 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14222 = x14056 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14223 = x14056 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14224 = x14056 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14225 = x14056 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14226 = x14056 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14227 = x14056 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14228 = x14056 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14229 = x14056 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14230 = x14056 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14231 = x14056 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14232 = x14056 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14233 = x14056 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14234 = x14062 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14235 = x14067 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14236 = x14072 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14237 = x14077 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14238 = x14082 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14239 = x14087 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14240 = x14092 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14241 = x14057 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14242 = x14063 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14243 = x14068 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14244 = x14073 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14245 = x14078 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14246 = x14083 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14247 = x14088 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14248 = x14093 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14249 = x14058 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14250 = x14064 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14251 = x14069 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14252 = x14074 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14253 = x14079 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14254 = x14084 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14255 = x14089 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14256 = x14094 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14257 = x14059 * x14144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14258 = x14061 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14259 = x14061 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14260 = x14061 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14261 = x14061 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14262 = x14061 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14263 = x14061 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14264 = x14061 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14265 = x14061 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14266 = x14061 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14267 = x14061 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14268 = x14061 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14269 = x14061 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14270 = x14061 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14271 = x14061 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14272 = x14061 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14273 = x14061 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14274 = x14061 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14275 = x14061 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14276 = x14061 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14277 = x14061 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14278 = x14061 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14279 = x14061 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14280 = x14061 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14281 = x14061 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14282 = x14061 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14283 = x14061 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14284 = x14061 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14285 = x14061 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14286 = x14061 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14287 = x14061 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14288 = x14061 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14289 = x14066 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14290 = x14066 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14291 = x14066 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14292 = x14066 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14293 = x14066 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14294 = x14066 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14295 = x14066 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14296 = x14066 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14297 = x14066 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14298 = x14066 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14299 = x14066 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14300 = x14066 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14301 = x14066 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14302 = x14066 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14303 = x14066 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14304 = x14066 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14305 = x14066 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14306 = x14066 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14307 = x14066 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14308 = x14066 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14309 = x14066 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14310 = x14066 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14311 = x14066 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14312 = x14066 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14313 = x14066 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14314 = x14066 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14315 = x14066 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14316 = x14066 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14317 = x14066 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14318 = x14066 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14319 = x14066 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14320 = x14071 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14321 = x14071 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14322 = x14071 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14323 = x14071 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14324 = x14071 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14325 = x14071 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14326 = x14071 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14327 = x14071 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14328 = x14071 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14329 = x14071 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14330 = x14071 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14331 = x14071 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14332 = x14071 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14333 = x14071 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14334 = x14071 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14335 = x14071 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14336 = x14071 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14337 = x14071 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14338 = x14071 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14339 = x14071 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14340 = x14071 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14341 = x14071 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14342 = x14071 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14343 = x14071 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14344 = x14071 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14345 = x14071 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14346 = x14071 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14347 = x14071 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14348 = x14071 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14349 = x14071 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14350 = x14071 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14351 = x14076 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14352 = x14076 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14353 = x14076 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14354 = x14076 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14355 = x14076 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14356 = x14076 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14357 = x14076 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14358 = x14076 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14359 = x14076 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14360 = x14076 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14361 = x14076 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14362 = x14076 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14363 = x14076 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14364 = x14076 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14365 = x14076 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14366 = x14076 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14367 = x14076 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14368 = x14076 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14369 = x14076 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14370 = x14076 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14371 = x14076 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14372 = x14076 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14373 = x14076 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14374 = x14076 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14375 = x14076 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14376 = x14076 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14377 = x14076 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14378 = x14076 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14379 = x14076 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14380 = x14076 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14381 = x14076 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14382 = x14081 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14383 = x14081 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14384 = x14081 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14385 = x14081 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14386 = x14081 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14387 = x14081 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14388 = x14081 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14389 = x14081 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14390 = x14081 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14391 = x14081 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14392 = x14081 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14393 = x14081 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14394 = x14081 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14395 = x14081 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14396 = x14081 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14397 = x14081 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14398 = x14081 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14399 = x14081 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14400 = x14081 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14401 = x14081 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14402 = x14081 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14403 = x14081 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14404 = x14081 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14405 = x14081 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14406 = x14081 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14407 = x14081 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14408 = x14081 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14409 = x14081 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14410 = x14081 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14411 = x14081 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14412 = x14081 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14413 = x14086 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14414 = x14086 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14415 = x14086 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14416 = x14086 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14417 = x14086 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14418 = x14086 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14419 = x14086 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14420 = x14086 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14421 = x14086 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14422 = x14086 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14423 = x14086 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14424 = x14086 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14425 = x14086 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14426 = x14086 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14427 = x14086 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14428 = x14086 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14429 = x14086 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14430 = x14086 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14431 = x14086 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14432 = x14086 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14433 = x14086 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14434 = x14086 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14435 = x14086 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14436 = x14086 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14437 = x14086 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14438 = x14086 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14439 = x14086 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14440 = x14086 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14441 = x14086 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14442 = x14086 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14443 = x14086 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14444 = x14091 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14445 = x14091 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14446 = x14091 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14447 = x14091 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14448 = x14091 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14449 = x14091 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14450 = x14091 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14451 = x14091 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14452 = x14091 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14453 = x14091 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14454 = x14091 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14455 = x14091 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14456 = x14091 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14457 = x14091 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14458 = x14091 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14459 = x14091 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14460 = x14091 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14461 = x14091 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14462 = x14091 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14463 = x14091 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14464 = x14091 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14465 = x14091 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14466 = x14091 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14467 = x14091 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14468 = x14091 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14469 = x14091 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14470 = x14091 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14471 = x14091 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14472 = x14091 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14473 = x14091 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14474 = x14091 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14475 = x14062 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14476 = x14062 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14477 = x14062 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14478 = x14062 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14479 = x14062 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14480 = x14062 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14481 = x14062 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14482 = x14062 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14483 = x14062 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14484 = x14062 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14485 = x14062 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14486 = x14062 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14487 = x14062 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14488 = x14062 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14489 = x14062 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14490 = x14062 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14491 = x14062 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14492 = x14062 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14493 = x14062 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14494 = x14062 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14495 = x14062 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14496 = x14062 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14497 = x14062 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14498 = x14062 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14499 = x14062 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14500 = x14062 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14501 = x14062 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14502 = x14062 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14503 = x14062 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14504 = x14062 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14505 = x14062 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14506 = x14067 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14507 = x14067 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14508 = x14067 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14509 = x14067 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14510 = x14067 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14511 = x14067 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14512 = x14067 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14513 = x14067 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14514 = x14067 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14515 = x14067 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14516 = x14067 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14517 = x14067 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14518 = x14067 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14519 = x14067 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14520 = x14067 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14521 = x14067 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14522 = x14067 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14523 = x14067 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14524 = x14067 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14525 = x14067 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14526 = x14067 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14527 = x14067 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14528 = x14067 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14529 = x14067 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14530 = x14067 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14531 = x14067 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14532 = x14067 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14533 = x14067 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14534 = x14067 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14535 = x14067 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14536 = x14067 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14537 = x14072 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14538 = x14072 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14539 = x14072 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14540 = x14072 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14541 = x14072 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14542 = x14072 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14543 = x14072 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14544 = x14072 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14545 = x14072 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14546 = x14072 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14547 = x14072 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14548 = x14072 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14549 = x14072 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14550 = x14072 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14551 = x14072 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14552 = x14072 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14553 = x14072 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14554 = x14072 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14555 = x14072 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14556 = x14072 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14557 = x14072 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14558 = x14072 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14559 = x14072 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14560 = x14072 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14561 = x14072 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14562 = x14072 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14563 = x14072 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14564 = x14072 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14565 = x14072 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14566 = x14072 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14567 = x14072 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14568 = x14077 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14569 = x14077 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14570 = x14077 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14571 = x14077 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14572 = x14077 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14573 = x14077 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14574 = x14077 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14575 = x14077 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14576 = x14077 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14577 = x14077 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14578 = x14077 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14579 = x14077 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14580 = x14077 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14581 = x14077 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14582 = x14077 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14583 = x14077 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14584 = x14077 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14585 = x14077 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14586 = x14077 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14587 = x14077 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14588 = x14077 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14589 = x14077 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14590 = x14077 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14591 = x14077 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14592 = x14077 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14593 = x14077 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14594 = x14077 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14595 = x14077 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14596 = x14077 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14597 = x14077 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14598 = x14077 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14599 = x14082 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14600 = x14082 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14601 = x14082 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14602 = x14082 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14603 = x14082 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14604 = x14082 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14605 = x14082 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14606 = x14082 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14607 = x14082 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14608 = x14082 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14609 = x14082 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14610 = x14082 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14611 = x14082 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14612 = x14082 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14613 = x14082 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14614 = x14082 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14615 = x14082 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14616 = x14082 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14617 = x14082 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14618 = x14082 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14619 = x14082 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14620 = x14082 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14621 = x14082 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14622 = x14082 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14623 = x14082 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14624 = x14082 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14625 = x14082 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14626 = x14082 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14627 = x14082 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14628 = x14082 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14629 = x14082 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14630 = x14087 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14631 = x14087 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14632 = x14087 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14633 = x14087 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14634 = x14087 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14635 = x14087 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14636 = x14087 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14637 = x14087 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14638 = x14087 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14639 = x14087 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14640 = x14087 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14641 = x14087 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14642 = x14087 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14643 = x14087 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14644 = x14087 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14645 = x14087 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14646 = x14087 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14647 = x14087 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14648 = x14087 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14649 = x14087 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14650 = x14087 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14651 = x14087 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14652 = x14087 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14653 = x14087 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14654 = x14087 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14655 = x14087 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14656 = x14087 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14657 = x14087 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14658 = x14087 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14659 = x14087 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14660 = x14087 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14661 = x14092 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14662 = x14092 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14663 = x14092 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14664 = x14092 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14665 = x14092 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14666 = x14092 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14667 = x14092 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14668 = x14092 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14669 = x14092 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14670 = x14092 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14671 = x14092 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14672 = x14092 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14673 = x14092 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14674 = x14092 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14675 = x14092 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14676 = x14092 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14677 = x14092 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14678 = x14092 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14679 = x14092 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14680 = x14092 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14681 = x14092 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14682 = x14092 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14683 = x14092 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14684 = x14092 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14685 = x14092 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14686 = x14092 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14687 = x14092 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14688 = x14092 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14689 = x14092 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14690 = x14092 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14691 = x14092 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14692 = x14057 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14693 = x14057 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14694 = x14057 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14695 = x14057 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14696 = x14057 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14697 = x14057 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14698 = x14057 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14699 = x14057 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14700 = x14057 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14701 = x14057 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14702 = x14057 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14703 = x14057 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14704 = x14057 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14705 = x14057 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14706 = x14057 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14707 = x14057 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14708 = x14057 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14709 = x14057 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14710 = x14057 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14711 = x14057 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14712 = x14057 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14713 = x14057 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14714 = x14057 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14715 = x14057 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14716 = x14057 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14717 = x14057 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14718 = x14057 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14719 = x14057 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14720 = x14057 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14721 = x14057 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14722 = x14057 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14723 = x14063 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14724 = x14063 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14725 = x14063 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14726 = x14063 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14727 = x14063 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14728 = x14063 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14729 = x14063 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14730 = x14063 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14731 = x14063 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14732 = x14063 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14733 = x14063 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14734 = x14063 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14735 = x14063 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14736 = x14063 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14737 = x14063 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14738 = x14063 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14739 = x14063 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14740 = x14063 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14741 = x14063 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14742 = x14063 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14743 = x14063 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14744 = x14063 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14745 = x14063 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14746 = x14063 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14747 = x14063 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14748 = x14063 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14749 = x14063 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14750 = x14063 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14751 = x14063 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14752 = x14063 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14753 = x14063 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14754 = x14068 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14755 = x14068 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14756 = x14068 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14757 = x14068 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14758 = x14068 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14759 = x14068 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14760 = x14068 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14761 = x14068 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14762 = x14068 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14763 = x14068 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14764 = x14068 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14765 = x14068 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14766 = x14068 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14767 = x14068 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14768 = x14068 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14769 = x14068 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14770 = x14068 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14771 = x14068 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14772 = x14068 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14773 = x14068 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14774 = x14068 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14775 = x14068 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14776 = x14068 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14777 = x14068 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14778 = x14068 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14779 = x14068 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14780 = x14068 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14781 = x14068 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14782 = x14068 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14783 = x14068 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14784 = x14068 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14785 = x14073 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14786 = x14073 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14787 = x14073 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14788 = x14073 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14789 = x14073 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14790 = x14073 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14791 = x14073 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14792 = x14073 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14793 = x14073 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14794 = x14073 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14795 = x14073 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14796 = x14073 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14797 = x14073 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14798 = x14073 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14799 = x14073 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14800 = x14073 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14801 = x14073 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14802 = x14073 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14803 = x14073 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14804 = x14073 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14805 = x14073 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14806 = x14073 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14807 = x14073 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14808 = x14073 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14809 = x14073 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14810 = x14073 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14811 = x14073 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14812 = x14073 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14813 = x14073 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14814 = x14073 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14815 = x14073 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14816 = x14078 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14817 = x14078 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14818 = x14078 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14819 = x14078 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14820 = x14078 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14821 = x14078 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14822 = x14078 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14823 = x14078 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14824 = x14078 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14825 = x14078 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14826 = x14078 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14827 = x14078 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14828 = x14078 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14829 = x14078 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14830 = x14078 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14831 = x14078 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14832 = x14078 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14833 = x14078 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14834 = x14078 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14835 = x14078 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14836 = x14078 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14837 = x14078 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14838 = x14078 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14839 = x14078 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14840 = x14078 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14841 = x14078 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14842 = x14078 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14843 = x14078 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14844 = x14078 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14845 = x14078 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14846 = x14078 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14847 = x14083 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14848 = x14083 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14849 = x14083 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14850 = x14083 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14851 = x14083 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14852 = x14083 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14853 = x14083 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14854 = x14083 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14855 = x14083 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14856 = x14083 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14857 = x14083 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14858 = x14083 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14859 = x14083 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14860 = x14083 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14861 = x14083 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14862 = x14083 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14863 = x14083 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14864 = x14083 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14865 = x14083 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14866 = x14083 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14867 = x14083 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14868 = x14083 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14869 = x14083 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14870 = x14083 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14871 = x14083 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14872 = x14083 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14873 = x14083 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14874 = x14083 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14875 = x14083 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14876 = x14083 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14877 = x14083 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14878 = x14088 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14879 = x14088 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14880 = x14088 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14881 = x14088 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14882 = x14088 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14883 = x14088 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14884 = x14088 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14885 = x14088 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14886 = x14088 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14887 = x14088 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14888 = x14088 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14889 = x14088 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14890 = x14088 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14891 = x14088 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14892 = x14088 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14893 = x14088 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14894 = x14088 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14895 = x14088 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14896 = x14088 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14897 = x14088 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14898 = x14088 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14899 = x14088 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14900 = x14088 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14901 = x14088 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14902 = x14088 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14903 = x14088 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14904 = x14088 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14905 = x14088 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14906 = x14088 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14907 = x14088 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14908 = x14088 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14909 = x14093 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14910 = x14093 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14911 = x14093 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14912 = x14093 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14913 = x14093 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14914 = x14093 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14915 = x14093 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14916 = x14093 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14917 = x14093 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14918 = x14093 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14919 = x14093 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14920 = x14093 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14921 = x14093 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14922 = x14093 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14923 = x14093 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14924 = x14093 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14925 = x14093 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14926 = x14093 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14927 = x14093 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14928 = x14093 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14929 = x14093 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14930 = x14093 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14931 = x14093 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14932 = x14093 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14933 = x14093 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14934 = x14093 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14935 = x14093 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14936 = x14093 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14937 = x14093 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14938 = x14093 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14939 = x14093 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14940 = x14058 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14941 = x14058 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14942 = x14058 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14943 = x14058 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14944 = x14058 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14945 = x14058 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14946 = x14058 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14947 = x14058 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14948 = x14058 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14949 = x14058 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14950 = x14058 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14951 = x14058 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14952 = x14058 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14953 = x14058 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14954 = x14058 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14955 = x14058 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14956 = x14058 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14957 = x14058 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14958 = x14058 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14959 = x14058 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14960 = x14058 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14961 = x14058 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14962 = x14058 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14963 = x14058 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14964 = x14058 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14965 = x14058 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14966 = x14058 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14967 = x14058 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14968 = x14058 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14969 = x14058 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14970 = x14058 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14971 = x14064 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14972 = x14064 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14973 = x14064 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14974 = x14064 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14975 = x14064 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14976 = x14064 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14977 = x14064 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14978 = x14064 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14979 = x14064 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14980 = x14064 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14981 = x14064 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14982 = x14064 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14983 = x14064 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14984 = x14064 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14985 = x14064 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14986 = x14064 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14987 = x14064 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14988 = x14064 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14989 = x14064 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14990 = x14064 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14991 = x14064 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14992 = x14064 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14993 = x14064 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14994 = x14064 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14995 = x14064 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14996 = x14064 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14997 = x14064 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14998 = x14064 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x14999 = x14064 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15000 = x14064 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15001 = x14064 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15002 = x14069 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15003 = x14069 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15004 = x14069 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15005 = x14069 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15006 = x14069 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15007 = x14069 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15008 = x14069 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15009 = x14069 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15010 = x14069 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15011 = x14069 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15012 = x14069 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15013 = x14069 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15014 = x14069 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15015 = x14069 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15016 = x14069 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15017 = x14069 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15018 = x14069 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15019 = x14069 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15020 = x14069 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15021 = x14069 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15022 = x14069 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15023 = x14069 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15024 = x14069 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15025 = x14069 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15026 = x14069 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15027 = x14069 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15028 = x14069 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15029 = x14069 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15030 = x14069 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15031 = x14069 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15032 = x14069 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15033 = x14074 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15034 = x14074 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15035 = x14074 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15036 = x14074 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15037 = x14074 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15038 = x14074 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15039 = x14074 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15040 = x14074 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15041 = x14074 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15042 = x14074 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15043 = x14074 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15044 = x14074 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15045 = x14074 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15046 = x14074 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15047 = x14074 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15048 = x14074 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15049 = x14074 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15050 = x14074 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15051 = x14074 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15052 = x14074 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15053 = x14074 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15054 = x14074 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15055 = x14074 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15056 = x14074 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15057 = x14074 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15058 = x14074 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15059 = x14074 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15060 = x14074 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15061 = x14074 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15062 = x14074 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15063 = x14074 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15064 = x14079 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15065 = x14079 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15066 = x14079 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15067 = x14079 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15068 = x14079 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15069 = x14079 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15070 = x14079 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15071 = x14079 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15072 = x14079 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15073 = x14079 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15074 = x14079 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15075 = x14079 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15076 = x14079 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15077 = x14079 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15078 = x14079 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15079 = x14079 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15080 = x14079 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15081 = x14079 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15082 = x14079 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15083 = x14079 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15084 = x14079 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15085 = x14079 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15086 = x14079 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15087 = x14079 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15088 = x14079 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15089 = x14079 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15090 = x14079 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15091 = x14079 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15092 = x14079 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15093 = x14079 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15094 = x14079 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15095 = x14084 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15096 = x14084 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15097 = x14084 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15098 = x14084 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15099 = x14084 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15100 = x14084 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15101 = x14084 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15102 = x14084 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15103 = x14084 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15104 = x14084 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15105 = x14084 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15106 = x14084 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15107 = x14084 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15108 = x14084 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15109 = x14084 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15110 = x14084 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15111 = x14084 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15112 = x14084 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15113 = x14084 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15114 = x14084 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15115 = x14084 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15116 = x14084 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15117 = x14084 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15118 = x14084 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15119 = x14084 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15120 = x14084 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15121 = x14084 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15122 = x14084 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15123 = x14084 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15124 = x14084 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15125 = x14084 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15126 = x14089 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15127 = x14089 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15128 = x14089 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15129 = x14089 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15130 = x14089 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15131 = x14089 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15132 = x14089 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15133 = x14089 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15134 = x14089 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15135 = x14089 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15136 = x14089 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15137 = x14089 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15138 = x14089 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15139 = x14089 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15140 = x14089 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15141 = x14089 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15142 = x14089 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15143 = x14089 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15144 = x14089 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15145 = x14089 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15146 = x14089 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15147 = x14089 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15148 = x14089 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15149 = x14089 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15150 = x14089 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15151 = x14089 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15152 = x14089 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15153 = x14089 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15154 = x14089 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15155 = x14089 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15156 = x14089 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15157 = x14094 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15158 = x14094 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15159 = x14094 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15160 = x14094 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15161 = x14094 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15162 = x14094 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15163 = x14094 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15164 = x14094 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15165 = x14094 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15166 = x14094 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15167 = x14094 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15168 = x14094 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15169 = x14094 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15170 = x14094 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15171 = x14094 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15172 = x14094 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15173 = x14094 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15174 = x14094 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15175 = x14094 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15176 = x14094 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15177 = x14094 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15178 = x14094 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15179 = x14094 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15180 = x14094 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15181 = x14094 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15182 = x14094 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15183 = x14094 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15184 = x14094 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15185 = x14094 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15186 = x14094 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15187 = x14094 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15188 = x14059 * x14111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15189 = x14059 * x14116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15190 = x14059 * x14121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15191 = x14059 * x14126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15192 = x14059 * x14131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15193 = x14059 * x14136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15194 = x14059 * x14141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15195 = x14059 * x14106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15196 = x14059 * x14112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15197 = x14059 * x14117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15198 = x14059 * x14122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15199 = x14059 * x14127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15200 = x14059 * x14132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15201 = x14059 * x14137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15202 = x14059 * x14142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15203 = x14059 * x14107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15204 = x14059 * x14113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15205 = x14059 * x14118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15206 = x14059 * x14123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15207 = x14059 * x14128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15208 = x14059 * x14133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15209 = x14059 * x14138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15210 = x14059 * x14143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15211 = x14059 * x14108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15212 = x14059 * x14114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15213 = x14059 * x14119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15214 = x14059 * x14124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15215 = x14059 * x14129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15216 = x14059 * x14134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15217 = x14059 * x14139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x15218 = x14059 * x14109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15219 = x14195 + x14497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15220 = x14196 + x14528;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15221 = x14197 + x14559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15222 = x14198 + x14590;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15223 = x14199 + x14621;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15224 = x14200 + x14652;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15225 = x14201 + x14683;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15226 = x14202 + x14722;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15227 = x14203 + x14716;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15228 = x14204 + x14717;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15229 = x14205 + x14718;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15230 = x14206 + x14719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15231 = x14207 + x14720;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15232 = x14208 + x14721;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15233 = x14209 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15234 = x14210 + x14692;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15235 = x14211 + x14693;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15236 = x14212 + x14694;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15237 = x14213 + x14695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15238 = x14214 + x14696;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15239 = x14215 + x14697;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15240 = x14216 + x14698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15241 = x14217 + x14699;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15242 = x14218 + x14700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15243 = x14219 + x14701;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15244 = x14220 + x14702;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15245 = x14221 + x14703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15246 = x14222 + x14704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15247 = x14223 + x14705;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15248 = x14224 + x14706;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15249 = x14225 + x14707;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15250 = x14226 + x14708;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15251 = x14227 + x14709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15252 = x14228 + x14710;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15253 = x14229 + x14711;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15254 = x14230 + x14712;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15255 = x14231 + x14713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15256 = x14232 + x14714;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15257 = x14233 + x14715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15258 = x14234 + x14745;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15259 = x14235 + x14776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15260 = x14236 + x14807;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15261 = x14237 + x14838;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15262 = x14238 + x14869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15263 = x14239 + x14900;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15264 = x14240 + x14931;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15265 = x14241 + x14962;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15266 = x14242 + x14993;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15267 = x14243 + x15024;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15268 = x14244 + x15055;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15269 = x14245 + x15086;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15270 = x14246 + x15117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15271 = x14247 + x15148;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15272 = x14248 + x15179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15273 = x14249 + x15210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15274 = x14250 + x14311;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15275 = x14251 + x14342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15276 = x14252 + x14373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15277 = x14253 + x14404;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15278 = x14254 + x14435;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15279 = x14255 + x14466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15280 = x14257 + x14280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15281 = Fp(x15233.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15282 = x15233 - x15281;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15283 = x15219 + x14737;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15284 = x15220 + x14768;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15285 = x15221 + x14799;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15286 = x15222 + x14830;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15287 = x15223 + x14861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15288 = x15224 + x14892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15289 = x15225 + x14923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15290 = x15226 + x14963;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15291 = x15227 + x14956;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15292 = x15228 + x14957;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15293 = x15229 + x14958;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15294 = x15230 + x14959;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15295 = x15231 + x14960;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15296 = x15232 + x14961;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15297 = x15234 + x14970;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15298 = x15235 + x14964;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15299 = x15236 + x14965;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15300 = x15237 + x14966;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15301 = x15238 + x14967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15302 = x15239 + x14968;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15303 = x15240 + x14969;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15304 = x15242 + x14940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15305 = x15243 + x14941;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15306 = x15244 + x14942;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15307 = x15245 + x14943;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15308 = x15246 + x14944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15309 = x15247 + x14945;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15310 = x15248 + x14946;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15311 = x15249 + x14947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15312 = x15250 + x14948;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15313 = x15251 + x14949;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15314 = x15252 + x14950;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15315 = x15253 + x14951;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15316 = x15254 + x14952;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15317 = x15255 + x14953;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15318 = x15256 + x14954;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15319 = x15257 + x14955;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15320 = x15258 + x14985;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15321 = x15259 + x15016;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15322 = x15260 + x15047;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15323 = x15261 + x15078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15324 = x15262 + x15109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15325 = x15263 + x15140;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15326 = x15264 + x15171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15327 = x15265 + x15202;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15328 = x15266 + x14303;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15329 = x15267 + x14334;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15330 = x15268 + x14365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15331 = x15269 + x14396;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15332 = x15270 + x14427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15333 = x15271 + x14458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15334 = x15273 + x14272;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15335 = x15274 + x14520;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15336 = x15275 + x14551;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15337 = x15276 + x14582;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15338 = x15277 + x14613;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15339 = x15278 + x14644;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15340 = x15279 + x14675;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15341 = x15280 + x14489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x15342 = x15282 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x15343 = x15342 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15344 = x15283 + x14977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15345 = x15284 + x15008;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15346 = x15285 + x15039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15347 = x15286 + x15070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15348 = x15287 + x15101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15349 = x15288 + x15132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15350 = x15289 + x15163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15351 = x15290 + x15203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15352 = x15291 + x15196;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15353 = x15292 + x15197;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15354 = x15293 + x15198;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15355 = x15294 + x15199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15356 = x15295 + x15200;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15357 = x15296 + x15201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15358 = x15297 + x15211;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15359 = x15298 + x15204;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15360 = x15299 + x15205;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15361 = x15300 + x15206;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15362 = x15301 + x15207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15363 = x15302 + x15208;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15364 = x15303 + x15209;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15365 = x15304 + x15218;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15366 = x15305 + x15212;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15367 = x15306 + x15213;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15368 = x15307 + x15214;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15369 = x15308 + x15215;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15370 = x15309 + x15216;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15371 = x15310 + x15217;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15372 = x15312 + x15188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15373 = x15313 + x15189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15374 = x15314 + x15190;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15375 = x15315 + x15191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15376 = x15316 + x15192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15377 = x15317 + x15193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15378 = x15318 + x15194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15379 = x15319 + x15195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15380 = x15320 + x14295;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15381 = x15321 + x14326;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15382 = x15322 + x14357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15383 = x15323 + x14388;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15384 = x15324 + x14419;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15385 = x15325 + x14450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15386 = x15327 + x14264;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15387 = x15328 + x14512;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15388 = x15329 + x14543;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15389 = x15330 + x14574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15390 = x15331 + x14605;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15391 = x15332 + x14636;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15392 = x15333 + x14667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15393 = x15334 + x14481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15394 = x15335 + x14760;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15395 = x15336 + x14791;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15396 = x15337 + x14822;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15397 = x15338 + x14853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15398 = x15339 + x14884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15399 = x15340 + x14915;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15400 = x15341 + x14729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15401 = x15241 + x15343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15402 = x15344 + x14318;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15403 = x15345 + x14349;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15404 = x15346 + x14380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15405 = x15347 + x14411;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15406 = x15348 + x14442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15407 = x15349 + x14473;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15408 = x15351 + x14265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15409 = x15352 + x14258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15410 = x15353 + x14259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15411 = x15354 + x14260;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15412 = x15355 + x14261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15413 = x15356 + x14262;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15414 = x15357 + x14263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15415 = x15358 + x14273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15416 = x15359 + x14266;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15417 = x15360 + x14267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15418 = x15361 + x14268;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15419 = x15362 + x14269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15420 = x15363 + x14270;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15421 = x15364 + x14271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15422 = x15365 + x14281;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15423 = x15366 + x14274;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15424 = x15367 + x14275;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15425 = x15368 + x14276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15426 = x15369 + x14277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15427 = x15370 + x14278;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15428 = x15371 + x14279;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15429 = x15372 + x14288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15430 = x15373 + x14282;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15431 = x15374 + x14283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15432 = x15375 + x14284;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15433 = x15376 + x14285;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15434 = x15377 + x14286;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15435 = x15378 + x14287;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15436 = x15380 + x14535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15437 = x15381 + x14566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15438 = x15382 + x14597;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15439 = x15383 + x14628;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15440 = x15384 + x14659;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15441 = x15385 + x14690;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15442 = x15386 + x14504;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15443 = x15387 + x14783;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15444 = x15388 + x14814;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15445 = x15389 + x14845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15446 = x15390 + x14876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15447 = x15391 + x14907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15448 = x15392 + x14938;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15449 = x15393 + x14752;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15450 = x15394 + x15031;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15451 = x15395 + x15062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15452 = x15396 + x15093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15453 = x15397 + x15124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15454 = x15398 + x15155;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15455 = x15399 + x15186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15456 = x15400 + x15000;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15457 = x15401 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15458 = Fp(x15457.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15459 = x15457 - x15458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15460 = x15402 + x14527;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15461 = x15403 + x14558;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15462 = x15404 + x14589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15463 = x15405 + x14620;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15464 = x15406 + x14651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15465 = x15407 + x14682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15466 = x15409 + x14505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15467 = x15410 + x14499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15468 = x15411 + x14500;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15469 = x15412 + x14501;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15470 = x15413 + x14502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15471 = x15414 + x14503;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15472 = x15415 + x14482;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15473 = x15416 + x14475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15474 = x15417 + x14476;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15475 = x15418 + x14477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15476 = x15419 + x14478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15477 = x15420 + x14479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15478 = x15421 + x14480;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15479 = x15422 + x14490;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15480 = x15423 + x14483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15481 = x15424 + x14484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15482 = x15425 + x14485;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15483 = x15426 + x14486;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15484 = x15427 + x14487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15485 = x15428 + x14488;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15486 = x15429 + x14498;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15487 = x15430 + x14491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15488 = x15431 + x14492;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15489 = x15432 + x14493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15490 = x15433 + x14494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15491 = x15434 + x14495;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15492 = x15435 + x14496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15493 = x15436 + x14775;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15494 = x15437 + x14806;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15495 = x15438 + x14837;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15496 = x15439 + x14868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15497 = x15440 + x14899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15498 = x15441 + x14930;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15499 = x15442 + x14744;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15500 = x15443 + x15023;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15501 = x15444 + x15054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15502 = x15445 + x15085;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15503 = x15446 + x15116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15504 = x15447 + x15147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15505 = x15448 + x15178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15506 = x15449 + x14992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15507 = x15450 + x14341;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15508 = x15451 + x14372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15509 = x15452 + x14403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15510 = x15453 + x14434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15511 = x15454 + x14465;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15512 = x15456 + x14310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x15513 = x15459 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x15514 = x15513 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15515 = x15460 + x14767;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15516 = x15461 + x14798;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15517 = x15462 + x14829;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15518 = x15463 + x14860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15519 = x15464 + x14891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15520 = x15465 + x14922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15521 = x15466 + x14746;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15522 = x15467 + x14739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15523 = x15468 + x14740;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15524 = x15469 + x14741;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15525 = x15470 + x14742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15526 = x15471 + x14743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15527 = x15473 + x14753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15528 = x15474 + x14747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15529 = x15475 + x14748;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15530 = x15476 + x14749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15531 = x15477 + x14750;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15532 = x15478 + x14751;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15533 = x15479 + x14730;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15534 = x15480 + x14723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15535 = x15481 + x14724;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15536 = x15482 + x14725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15537 = x15483 + x14726;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15538 = x15484 + x14727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15539 = x15485 + x14728;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15540 = x15486 + x14738;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15541 = x15487 + x14731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15542 = x15488 + x14732;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15543 = x15489 + x14733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15544 = x15490 + x14734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15545 = x15491 + x14735;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15546 = x15492 + x14736;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15547 = x15493 + x15015;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15548 = x15494 + x15046;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15549 = x15495 + x15077;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15550 = x15496 + x15108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15551 = x15497 + x15139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15552 = x15498 + x15170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15553 = x15499 + x14984;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15554 = x15500 + x14333;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15555 = x15501 + x14364;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15556 = x15502 + x14395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15557 = x15503 + x14426;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15558 = x15504 + x14457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15559 = x15506 + x14302;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15560 = x15507 + x14550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15561 = x15508 + x14581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15562 = x15509 + x14612;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15563 = x15510 + x14643;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15564 = x15511 + x14674;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15565 = x15512 + x14519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15566 = x15311 + x15514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15567 = x15515 + x15007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15568 = x15516 + x15038;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15569 = x15517 + x15069;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15570 = x15518 + x15100;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15571 = x15519 + x15131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15572 = x15520 + x15162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15573 = x15521 + x14986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15574 = x15522 + x14979;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15575 = x15523 + x14980;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15576 = x15524 + x14981;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15577 = x15525 + x14982;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15578 = x15526 + x14983;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15579 = x15527 + x14994;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15580 = x15528 + x14987;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15581 = x15529 + x14988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15582 = x15530 + x14989;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15583 = x15531 + x14990;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15584 = x15532 + x14991;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15585 = x15534 + x15001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15586 = x15535 + x14995;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15587 = x15536 + x14996;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15588 = x15537 + x14997;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15589 = x15538 + x14998;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15590 = x15539 + x14999;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15591 = x15540 + x14978;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15592 = x15541 + x14971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15593 = x15542 + x14972;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15594 = x15543 + x14973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15595 = x15544 + x14974;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15596 = x15545 + x14975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15597 = x15546 + x14976;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15598 = x15547 + x14325;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15599 = x15548 + x14356;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15600 = x15549 + x14387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15601 = x15550 + x14418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15602 = x15551 + x14449;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15603 = x15553 + x14294;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15604 = x15554 + x14542;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15605 = x15555 + x14573;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15606 = x15556 + x14604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15607 = x15557 + x14635;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15608 = x15558 + x14666;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15609 = x15559 + x14511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15610 = x15560 + x14790;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15611 = x15561 + x14821;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15612 = x15562 + x14852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15613 = x15563 + x14883;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15614 = x15564 + x14914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15615 = x15565 + x14759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15616 = x15566 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15617 = Fp(x15616.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15618 = x15616 - x15617;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15619 = x15567 + x14348;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15620 = x15568 + x14379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15621 = x15569 + x14410;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15622 = x15570 + x14441;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15623 = x15571 + x14472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15624 = x15573 + x14296;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15625 = x15574 + x14289;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15626 = x15575 + x14290;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15627 = x15576 + x14291;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15628 = x15577 + x14292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15629 = x15578 + x14293;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15630 = x15579 + x14304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15631 = x15580 + x14297;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15632 = x15581 + x14298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15633 = x15582 + x14299;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15634 = x15583 + x14300;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15635 = x15584 + x14301;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15636 = x15585 + x14312;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15637 = x15586 + x14305;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15638 = x15587 + x14306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15639 = x15588 + x14307;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15640 = x15589 + x14308;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15641 = x15590 + x14309;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15642 = x15592 + x14319;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15643 = x15593 + x14313;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15644 = x15594 + x14314;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15645 = x15595 + x14315;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15646 = x15596 + x14316;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15647 = x15597 + x14317;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15648 = x15598 + x14565;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15649 = x15599 + x14596;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15650 = x15600 + x14627;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15651 = x15601 + x14658;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15652 = x15602 + x14689;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15653 = x15603 + x14534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15654 = x15604 + x14813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15655 = x15605 + x14844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15656 = x15606 + x14875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15657 = x15607 + x14906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15658 = x15608 + x14937;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15659 = x15609 + x14782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15660 = x15610 + x15061;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15661 = x15611 + x15092;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15662 = x15612 + x15123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15663 = x15613 + x15154;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15664 = x15614 + x15185;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15665 = x15615 + x15030;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x15666 = x15618 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x15667 = x15666 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15668 = x15619 + x14557;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15669 = x15620 + x14588;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15670 = x15621 + x14619;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15671 = x15622 + x14650;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15672 = x15623 + x14681;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15673 = x15625 + x14536;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15674 = x15626 + x14530;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15675 = x15627 + x14531;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15676 = x15628 + x14532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15677 = x15629 + x14533;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15678 = x15630 + x14513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15679 = x15631 + x14506;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15680 = x15632 + x14507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15681 = x15633 + x14508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15682 = x15634 + x14509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15683 = x15635 + x14510;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15684 = x15636 + x14521;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15685 = x15637 + x14514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15686 = x15638 + x14515;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15687 = x15639 + x14516;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15688 = x15640 + x14517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15689 = x15641 + x14518;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15690 = x15642 + x14529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15691 = x15643 + x14522;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15692 = x15644 + x14523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15693 = x15645 + x14524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15694 = x15646 + x14525;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15695 = x15647 + x14526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15696 = x15648 + x14805;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15697 = x15649 + x14836;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15698 = x15650 + x14867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15699 = x15651 + x14898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15700 = x15652 + x14929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15701 = x15653 + x14774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15702 = x15654 + x15053;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15703 = x15655 + x15084;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15704 = x15656 + x15115;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15705 = x15657 + x15146;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15706 = x15658 + x15177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15707 = x15659 + x15022;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15708 = x15660 + x14371;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15709 = x15661 + x14402;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15710 = x15662 + x14433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15711 = x15663 + x14464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15712 = x15665 + x14340;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15713 = x15379 + x15667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15714 = x15668 + x14797;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15715 = x15669 + x14828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15716 = x15670 + x14859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15717 = x15671 + x14890;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15718 = x15672 + x14921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15719 = x15673 + x14777;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15720 = x15674 + x14770;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15721 = x15675 + x14771;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15722 = x15676 + x14772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15723 = x15677 + x14773;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15724 = x15679 + x14784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15725 = x15680 + x14778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15726 = x15681 + x14779;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15727 = x15682 + x14780;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15728 = x15683 + x14781;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15729 = x15684 + x14761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15730 = x15685 + x14754;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15731 = x15686 + x14755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15732 = x15687 + x14756;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15733 = x15688 + x14757;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15734 = x15689 + x14758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15735 = x15690 + x14769;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15736 = x15691 + x14762;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15737 = x15692 + x14763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15738 = x15693 + x14764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15739 = x15694 + x14765;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15740 = x15695 + x14766;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15741 = x15696 + x15045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15742 = x15697 + x15076;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15743 = x15698 + x15107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15744 = x15699 + x15138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15745 = x15700 + x15169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15746 = x15701 + x15014;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15747 = x15702 + x14363;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15748 = x15703 + x14394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15749 = x15704 + x14425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15750 = x15705 + x14456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15751 = x15707 + x14332;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15752 = x15708 + x14580;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15753 = x15709 + x14611;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15754 = x15710 + x14642;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15755 = x15711 + x14673;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15756 = x15712 + x14549;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15757 = x15713 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15758 = Fp(x15757.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15759 = x15757 - x15758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15760 = x15714 + x15037;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15761 = x15715 + x15068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15762 = x15716 + x15099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15763 = x15717 + x15130;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15764 = x15718 + x15161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15765 = x15719 + x15017;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15766 = x15720 + x15010;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15767 = x15721 + x15011;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15768 = x15722 + x15012;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15769 = x15723 + x15013;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15770 = x15724 + x15025;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15771 = x15725 + x15018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15772 = x15726 + x15019;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15773 = x15727 + x15020;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15774 = x15728 + x15021;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15775 = x15730 + x15032;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15776 = x15731 + x15026;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15777 = x15732 + x15027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15778 = x15733 + x15028;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15779 = x15734 + x15029;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15780 = x15735 + x15009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15781 = x15736 + x15002;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15782 = x15737 + x15003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15783 = x15738 + x15004;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15784 = x15739 + x15005;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15785 = x15740 + x15006;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15786 = x15741 + x14355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15787 = x15742 + x14386;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15788 = x15743 + x14417;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15789 = x15744 + x14448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15790 = x15746 + x14324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15791 = x15747 + x14572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15792 = x15748 + x14603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15793 = x15749 + x14634;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15794 = x15750 + x14665;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15795 = x15751 + x14541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15796 = x15752 + x14820;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15797 = x15753 + x14851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15798 = x15754 + x14882;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15799 = x15755 + x14913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15800 = x15756 + x14789;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x15801 = x15759 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x15802 = x15801 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15803 = x15760 + x14378;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15804 = x15761 + x14409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15805 = x15762 + x14440;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15806 = x15763 + x14471;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15807 = x15765 + x14327;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15808 = x15766 + x14320;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15809 = x15767 + x14321;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15810 = x15768 + x14322;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15811 = x15769 + x14323;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15812 = x15770 + x14335;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15813 = x15771 + x14328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15814 = x15772 + x14329;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15815 = x15773 + x14330;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15816 = x15774 + x14331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15817 = x15775 + x14343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15818 = x15776 + x14336;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15819 = x15777 + x14337;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15820 = x15778 + x14338;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15821 = x15779 + x14339;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15822 = x15781 + x14350;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15823 = x15782 + x14344;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15824 = x15783 + x14345;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15825 = x15784 + x14346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15826 = x15785 + x14347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15827 = x15786 + x14595;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15828 = x15787 + x14626;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15829 = x15788 + x14657;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15830 = x15789 + x14688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15831 = x15790 + x14564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15832 = x15791 + x14843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15833 = x15792 + x14874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15834 = x15793 + x14905;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15835 = x15794 + x14936;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15836 = x15795 + x14812;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15837 = x15796 + x15091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15838 = x15797 + x15122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15839 = x15798 + x15153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15840 = x15799 + x15184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15841 = x15800 + x15060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15842 = x15408 + x15802;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15843 = x15803 + x14587;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15844 = x15804 + x14618;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15845 = x15805 + x14649;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15846 = x15806 + x14680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15847 = x15808 + x14567;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15848 = x15809 + x14561;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15849 = x15810 + x14562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15850 = x15811 + x14563;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15851 = x15812 + x14544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15852 = x15813 + x14537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15853 = x15814 + x14538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15854 = x15815 + x14539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15855 = x15816 + x14540;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15856 = x15817 + x14552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15857 = x15818 + x14545;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15858 = x15819 + x14546;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15859 = x15820 + x14547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15860 = x15821 + x14548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15861 = x15822 + x14560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15862 = x15823 + x14553;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15863 = x15824 + x14554;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15864 = x15825 + x14555;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15865 = x15826 + x14556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15866 = x15827 + x14835;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15867 = x15828 + x14866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15868 = x15829 + x14897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15869 = x15830 + x14928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15870 = x15831 + x14804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15871 = x15832 + x15083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15872 = x15833 + x15114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15873 = x15834 + x15145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15874 = x15835 + x15176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15875 = x15836 + x15052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15876 = x15837 + x14401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15877 = x15838 + x14432;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15878 = x15839 + x14463;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15879 = x15841 + x14370;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15880 = x15842 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15881 = Fp(x15880.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15882 = x15880 - x15881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15883 = x15843 + x14827;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15884 = x15844 + x14858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15885 = x15845 + x14889;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15886 = x15846 + x14920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15887 = x15847 + x14808;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15888 = x15848 + x14801;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15889 = x15849 + x14802;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15890 = x15850 + x14803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15891 = x15852 + x14815;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15892 = x15853 + x14809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15893 = x15854 + x14810;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15894 = x15855 + x14811;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15895 = x15856 + x14792;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15896 = x15857 + x14785;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15897 = x15858 + x14786;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15898 = x15859 + x14787;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15899 = x15860 + x14788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15900 = x15861 + x14800;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15901 = x15862 + x14793;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15902 = x15863 + x14794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15903 = x15864 + x14795;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15904 = x15865 + x14796;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15905 = x15866 + x15075;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15906 = x15867 + x15106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15907 = x15868 + x15137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15908 = x15869 + x15168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15909 = x15870 + x15044;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15910 = x15871 + x14393;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15911 = x15872 + x14424;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15912 = x15873 + x14455;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15913 = x15875 + x14362;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15914 = x15876 + x14610;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15915 = x15877 + x14641;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15916 = x15878 + x14672;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15917 = x15879 + x14579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x15918 = x15882 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x15919 = x15918 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15920 = x15883 + x15067;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15921 = x15884 + x15098;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15922 = x15885 + x15129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15923 = x15886 + x15160;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15924 = x15887 + x15048;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15925 = x15888 + x15041;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15926 = x15889 + x15042;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15927 = x15890 + x15043;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15928 = x15891 + x15056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15929 = x15892 + x15049;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15930 = x15893 + x15050;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15931 = x15894 + x15051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15932 = x15896 + x15063;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15933 = x15897 + x15057;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15934 = x15898 + x15058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15935 = x15899 + x15059;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15936 = x15900 + x15040;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15937 = x15901 + x15033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15938 = x15902 + x15034;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15939 = x15903 + x15035;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15940 = x15904 + x15036;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15941 = x15905 + x14385;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15942 = x15906 + x14416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15943 = x15907 + x14447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15944 = x15909 + x14354;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15945 = x15910 + x14602;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15946 = x15911 + x14633;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15947 = x15912 + x14664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15948 = x15913 + x14571;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15949 = x15914 + x14850;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15950 = x15915 + x14881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15951 = x15916 + x14912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15952 = x15917 + x14819;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15953 = x15472 + x15919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15954 = x15920 + x14408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15955 = x15921 + x14439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15956 = x15922 + x14470;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15957 = x15924 + x14358;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15958 = x15925 + x14351;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15959 = x15926 + x14352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15960 = x15927 + x14353;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15961 = x15928 + x14366;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15962 = x15929 + x14359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15963 = x15930 + x14360;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15964 = x15931 + x14361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15965 = x15932 + x14374;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15966 = x15933 + x14367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15967 = x15934 + x14368;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15968 = x15935 + x14369;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15969 = x15937 + x14381;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15970 = x15938 + x14375;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15971 = x15939 + x14376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15972 = x15940 + x14377;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15973 = x15941 + x14625;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15974 = x15942 + x14656;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15975 = x15943 + x14687;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15976 = x15944 + x14594;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15977 = x15945 + x14873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15978 = x15946 + x14904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15979 = x15947 + x14935;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15980 = x15948 + x14842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15981 = x15949 + x15121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15982 = x15950 + x15152;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15983 = x15951 + x15183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15984 = x15952 + x15090;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x15985 = x15953 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x15986 = Fp(x15985.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x15987 = x15985 - x15986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15988 = x15954 + x14617;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15989 = x15955 + x14648;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15990 = x15956 + x14679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15991 = x15958 + x14598;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15992 = x15959 + x14592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15993 = x15960 + x14593;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15994 = x15961 + x14575;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15995 = x15962 + x14568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15996 = x15963 + x14569;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15997 = x15964 + x14570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15998 = x15965 + x14583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x15999 = x15966 + x14576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16000 = x15967 + x14577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16001 = x15968 + x14578;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16002 = x15969 + x14591;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16003 = x15970 + x14584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16004 = x15971 + x14585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16005 = x15972 + x14586;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16006 = x15973 + x14865;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16007 = x15974 + x14896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16008 = x15975 + x14927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16009 = x15976 + x14834;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16010 = x15977 + x15113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16011 = x15978 + x15144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16012 = x15979 + x15175;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16013 = x15980 + x15082;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16014 = x15981 + x14431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16015 = x15982 + x14462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16016 = x15984 + x14400;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16017 = x15987 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16018 = x16017 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16019 = x15988 + x14857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16020 = x15989 + x14888;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16021 = x15990 + x14919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16022 = x15991 + x14839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16023 = x15992 + x14832;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16024 = x15993 + x14833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16025 = x15995 + x14846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16026 = x15996 + x14840;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16027 = x15997 + x14841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16028 = x15998 + x14823;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16029 = x15999 + x14816;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16030 = x16000 + x14817;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16031 = x16001 + x14818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16032 = x16002 + x14831;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16033 = x16003 + x14824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16034 = x16004 + x14825;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16035 = x16005 + x14826;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16036 = x16006 + x15105;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16037 = x16007 + x15136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16038 = x16008 + x15167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16039 = x16009 + x15074;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16040 = x16010 + x14423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16041 = x16011 + x14454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16042 = x16013 + x14392;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16043 = x16014 + x14640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16044 = x16015 + x14671;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16045 = x16016 + x14609;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16046 = x15533 + x16018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16047 = x16019 + x15097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16048 = x16020 + x15128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16049 = x16021 + x15159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16050 = x16022 + x15079;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16051 = x16023 + x15072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16052 = x16024 + x15073;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16053 = x16025 + x15087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16054 = x16026 + x15080;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16055 = x16027 + x15081;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16056 = x16029 + x15094;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16057 = x16030 + x15088;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16058 = x16031 + x15089;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16059 = x16032 + x15071;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16060 = x16033 + x15064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16061 = x16034 + x15065;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16062 = x16035 + x15066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16063 = x16036 + x14415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16064 = x16037 + x14446;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16065 = x16039 + x14384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16066 = x16040 + x14632;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16067 = x16041 + x14663;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16068 = x16042 + x14601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16069 = x16043 + x14880;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16070 = x16044 + x14911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16071 = x16045 + x14849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16072 = x16046 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16073 = Fp(x16072.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16074 = x16072 - x16073;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16075 = x16047 + x14438;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16076 = x16048 + x14469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16077 = x16050 + x14389;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16078 = x16051 + x14382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16079 = x16052 + x14383;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16080 = x16053 + x14397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16081 = x16054 + x14390;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16082 = x16055 + x14391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16083 = x16056 + x14405;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16084 = x16057 + x14398;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16085 = x16058 + x14399;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16086 = x16060 + x14412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16087 = x16061 + x14406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16088 = x16062 + x14407;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16089 = x16063 + x14655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16090 = x16064 + x14686;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16091 = x16065 + x14624;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16092 = x16066 + x14903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16093 = x16067 + x14934;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16094 = x16068 + x14872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16095 = x16069 + x15151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16096 = x16070 + x15182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16097 = x16071 + x15120;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16098 = x16074 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16099 = x16098 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16100 = x16075 + x14647;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16101 = x16076 + x14678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16102 = x16078 + x14629;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16103 = x16079 + x14623;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16104 = x16080 + x14606;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16105 = x16081 + x14599;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16106 = x16082 + x14600;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16107 = x16083 + x14614;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16108 = x16084 + x14607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16109 = x16085 + x14608;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16110 = x16086 + x14622;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16111 = x16087 + x14615;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16112 = x16088 + x14616;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16113 = x16089 + x14895;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16114 = x16090 + x14926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16115 = x16091 + x14864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16116 = x16092 + x15143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16117 = x16093 + x15174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16118 = x16094 + x15112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16119 = x16095 + x14461;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16120 = x16097 + x14430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16121 = x15591 + x16099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16122 = x16100 + x14887;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16123 = x16101 + x14918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16124 = x16102 + x14870;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16125 = x16103 + x14863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16126 = x16105 + x14877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16127 = x16106 + x14871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16128 = x16107 + x14854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16129 = x16108 + x14847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16130 = x16109 + x14848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16131 = x16110 + x14862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16132 = x16111 + x14855;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16133 = x16112 + x14856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16134 = x16113 + x15135;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16135 = x16114 + x15166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16136 = x16115 + x15104;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16137 = x16116 + x14453;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16138 = x16118 + x14422;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16139 = x16119 + x14670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16140 = x16120 + x14639;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16141 = x16121 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16142 = Fp(x16141.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16143 = x16141 - x16142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16144 = x16122 + x15127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16145 = x16123 + x15158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16146 = x16124 + x15110;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16147 = x16125 + x15103;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16148 = x16126 + x15118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16149 = x16127 + x15111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16150 = x16129 + x15125;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16151 = x16130 + x15119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16152 = x16131 + x15102;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16153 = x16132 + x15095;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16154 = x16133 + x15096;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16155 = x16134 + x14445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16156 = x16136 + x14414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16157 = x16137 + x14662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16158 = x16138 + x14631;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16159 = x16139 + x14910;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16160 = x16140 + x14879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16161 = x16143 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16162 = x16161 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16163 = x16144 + x14468;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16164 = x16146 + x14420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16165 = x16147 + x14413;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16166 = x16148 + x14428;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16167 = x16149 + x14421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16168 = x16150 + x14436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16169 = x16151 + x14429;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16170 = x16153 + x14443;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16171 = x16154 + x14437;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16172 = x16155 + x14685;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16173 = x16156 + x14654;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16174 = x16157 + x14933;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16175 = x16158 + x14902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16176 = x16159 + x15181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16177 = x16160 + x15150;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16178 = x15624 + x16162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16179 = x16163 + x14677;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16180 = x16165 + x14660;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16181 = x16166 + x14637;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16182 = x16167 + x14630;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16183 = x16168 + x14645;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16184 = x16169 + x14638;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16185 = x16170 + x14653;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16186 = x16171 + x14646;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16187 = x16172 + x14925;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16188 = x16173 + x14894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16189 = x16174 + x15173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16190 = x16175 + x15142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16191 = x16177 + x14460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16192 = x16178 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16193 = Fp(x16192.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16194 = x16192 - x16193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16195 = x16179 + x14917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16196 = x16180 + x14901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16197 = x16182 + x14908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16198 = x16183 + x14885;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16199 = x16184 + x14878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16200 = x16185 + x14893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16201 = x16186 + x14886;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16202 = x16187 + x15165;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16203 = x16188 + x15134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16204 = x16190 + x14452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16205 = x16191 + x14669;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16206 = x16194 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16207 = x16206 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16208 = x16195 + x15157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16209 = x16196 + x15141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16210 = x16197 + x15149;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16211 = x16199 + x15156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16212 = x16200 + x15133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16213 = x16201 + x15126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16214 = x16203 + x14444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16215 = x16204 + x14661;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16216 = x16205 + x14909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16217 = x15678 + x16207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16218 = x16209 + x14451;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16219 = x16210 + x14459;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16220 = x16211 + x14467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16221 = x16213 + x14474;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16222 = x16214 + x14691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16223 = x16215 + x14939;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16224 = x16216 + x15187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16225 = x16217 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16226 = Fp(x16225.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16227 = x16225 - x16226;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16228 = x16219 + x14668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16229 = x16220 + x14676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16230 = x16221 + x14684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16231 = x16222 + x14932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16232 = x16223 + x15180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16233 = x16227 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16234 = x16233 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16235 = x16229 + x14916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16236 = x16230 + x14924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16237 = x16231 + x15172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16238 = x15729 + x16234;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x16239 = x16236 + x15164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16240 = x16238 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16241 = Fp(x16240.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16242 = x16240 - x16241;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16243 = x16242 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16244 = x16243 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16245 = x15780 + x16244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16246 = x16245 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16247 = Fp(x16246.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16248 = x16246 - x16247;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16249 = x16248 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16250 = x16249 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16251 = x15807 + x16250;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16252 = x16251 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16253 = Fp(x16252.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16254 = x16252 - x16253;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16255 = x16254 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16256 = x16255 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16257 = x15851 + x16256;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16258 = x16257 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16259 = Fp(x16258.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16260 = x16258 - x16259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16261 = x16260 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16262 = x16261 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16263 = x15895 + x16262;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16264 = x16263 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16265 = Fp(x16264.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16266 = x16264 - x16265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16267 = x16266 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16268 = x16267 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16269 = x15936 + x16268;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16270 = x16269 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16271 = Fp(x16270.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16272 = x16270 - x16271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16273 = x16272 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16274 = x16273 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16275 = x15957 + x16274;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16276 = x16275 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16277 = Fp(x16276.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16278 = x16276 - x16277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16279 = x16278 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16280 = x16279 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16281 = x15994 + x16280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16282 = x16281 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16283 = Fp(x16282.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16284 = x16282 - x16283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16285 = x16284 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16286 = x16285 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16287 = x16028 + x16286;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16288 = x16287 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16289 = Fp(x16288.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16290 = x16288 - x16289;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16291 = x16290 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16292 = x16291 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16293 = x16059 + x16292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16294 = x16293 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16295 = Fp(x16294.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16296 = x16294 - x16295;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16297 = x16296 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16298 = x16297 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16299 = x16077 + x16298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16300 = x16299 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16301 = Fp(x16300.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16302 = x16300 - x16301;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16303 = x16302 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16304 = x16303 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16305 = x16104 + x16304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16306 = x16305 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16307 = Fp(x16306.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16308 = x16306 - x16307;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16309 = x16308 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16310 = x16309 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16311 = x16128 + x16310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16312 = x16311 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16313 = Fp(x16312.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16314 = x16312 - x16313;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16315 = x16314 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16316 = x16315 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16317 = x16152 + x16316;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16318 = x16317 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16319 = Fp(x16318.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16320 = x16318 - x16319;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16321 = x16320 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16322 = x16321 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16323 = x16164 + x16322;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16324 = x16323 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16325 = Fp(x16324.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16326 = x16324 - x16325;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16327 = x16326 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16328 = x16327 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16329 = x16181 + x16328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16330 = x16329 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16331 = Fp(x16330.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16332 = x16330 - x16331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16333 = x16332 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16334 = x16333 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16335 = x16198 + x16334;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16336 = x16335 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16337 = Fp(x16336.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16338 = x16336 - x16337;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16339 = x16338 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16340 = x16339 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16341 = x16212 + x16340;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16342 = x16341 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16343 = Fp(x16342.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16344 = x16342 - x16343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16345 = x16344 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16346 = x16345 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16347 = x16218 + x16346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16348 = x16347 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16349 = Fp(x16348.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16350 = x16348 - x16349;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16351 = x16350 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16352 = x16351 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16353 = x16228 + x16352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16354 = x16353 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16355 = Fp(x16354.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16356 = x16354 - x16355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16357 = x16356 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16358 = x16357 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16359 = x16235 + x16358;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16360 = x16359 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16361 = Fp(x16360.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16362 = x16360 - x16361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16363 = x16362 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16364 = x16363 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16365 = x16239 + x16364;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16366 = x16365 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16367 = Fp(x16366.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16368 = x16366 - x16367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16369 = x16368 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16370 = x16369 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16371 = x16237 + x16370;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16372 = x16371 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16373 = Fp(x16372.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16374 = x16372 - x16373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16375 = x16374 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16376 = x16375 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16377 = x16232 + x16376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16378 = x16377 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16379 = Fp(x16378.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16380 = x16378 - x16379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16381 = x16380 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16382 = x16381 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16383 = x16224 + x16382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16384 = x16383 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16385 = Fp(x16384.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16386 = x16384 - x16385;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16387 = x16386 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16388 = x16387 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16389 = x16208 + x16388;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16390 = x16389 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16391 = Fp(x16390.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16392 = x16390 - x16391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16393 = x16392 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16394 = x16393 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16395 = x16202 + x16394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16396 = x16395 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16397 = Fp(x16396.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16398 = x16396 - x16397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16399 = x16398 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16400 = x16399 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16401 = x16189 + x16400;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16402 = x16401 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16403 = Fp(x16402.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16404 = x16402 - x16403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16405 = x16404 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16406 = x16405 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16407 = x16176 + x16406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16408 = x16407 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16409 = Fp(x16408.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16410 = x16408 - x16409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16411 = x16410 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16412 = x16411 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16413 = x16145 + x16412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16414 = x16413 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16415 = Fp(x16414.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16416 = x16414 - x16415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16417 = x16416 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16418 = x16417 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16419 = x16135 + x16418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16420 = x16419 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16421 = Fp(x16420.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16422 = x16420 - x16421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16423 = x16422 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16424 = x16423 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16425 = x16117 + x16424;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16426 = x16425 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16427 = Fp(x16426.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16428 = x16426 - x16427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16429 = x16428 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16430 = x16429 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16431 = x16096 + x16430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16432 = x16431 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16433 = Fp(x16432.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16434 = x16432 - x16433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16435 = x16434 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16436 = x16435 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16437 = x16049 + x16436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16438 = x16437 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16439 = Fp(x16438.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16440 = x16438 - x16439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16441 = x16440 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16442 = x16441 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16443 = x16038 + x16442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16444 = x16443 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16445 = Fp(x16444.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16446 = x16444 - x16445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16447 = x16446 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16448 = x16447 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16449 = x16012 + x16448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16450 = x16449 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16451 = Fp(x16450.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16452 = x16450 - x16451;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16453 = x16452 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16454 = x16453 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16455 = x15983 + x16454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16456 = x16455 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16457 = Fp(x16456.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16458 = x16456 - x16457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16459 = x16458 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16460 = x16459 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16461 = x15923 + x16460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16462 = x16461 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16463 = Fp(x16462.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16464 = x16462 - x16463;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16465 = x16464 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16466 = x16465 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16467 = x15908 + x16466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16468 = x16467 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16469 = Fp(x16468.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16470 = x16468 - x16469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16471 = x16470 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16472 = x16471 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16473 = x15874 + x16472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16474 = x16473 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16475 = Fp(x16474.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16476 = x16474 - x16475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16477 = x16476 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16478 = x16477 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16479 = x15840 + x16478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16480 = x16479 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16481 = Fp(x16480.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16482 = x16480 - x16481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16483 = x16482 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16484 = x16483 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16485 = x15764 + x16484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16486 = x16485 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16487 = Fp(x16486.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16488 = x16486 - x16487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16489 = x16488 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16490 = x16489 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16491 = x15745 + x16490;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16492 = x16491 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16493 = Fp(x16492.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16494 = x16492 - x16493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16495 = x16494 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16496 = x16495 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16497 = x15706 + x16496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16498 = x16497 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16499 = Fp(x16498.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16500 = x16498 - x16499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16501 = x16500 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16502 = x16501 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16503 = x15664 + x16502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16504 = x16503 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16505 = Fp(x16504.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16506 = x16504 - x16505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16507 = x16506 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16508 = x16507 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16509 = x15572 + x16508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16510 = x16509 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16511 = Fp(x16510.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16512 = x16510 - x16511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16513 = x16512 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16514 = x16513 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16515 = x15552 + x16514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16516 = x16515 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16517 = Fp(x16516.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16518 = x16516 - x16517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16519 = x16518 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16520 = x16519 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16521 = x15505 + x16520;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16522 = x16521 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16523 = Fp(x16522.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16524 = x16522 - x16523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16525 = x16524 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16526 = x16525 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16527 = x15455 + x16526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16528 = x16527 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16529 = Fp(x16528.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16530 = x16528 - x16529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16531 = x16530 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16532 = x16531 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16533 = x15350 + x16532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16534 = x16533 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16535 = Fp(x16534.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16536 = x16534 - x16535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16537 = x16536 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16538 = x16537 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16539 = x15326 + x16538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16540 = x16539 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16541 = Fp(x16540.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16542 = x16540 - x16541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16543 = x16542 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16544 = x16543 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16545 = x15272 + x16544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16546 = x16545 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16547 = Fp(x16546.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16548 = x16546 - x16547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16549 = x16548 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16550 = x16549 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16551 = x14256 + x16550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x16552 = x16551 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x16553 = Fp(x16552.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x16554 = x16552 - x16553;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x16555 = x16554 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x16556 = x16555 - x11;
        extern_args[0] = x15281;
        extern_args[1] = x15458;
        extern_args[2] = x15617;
        extern_args[3] = x15758;
        extern_args[4] = x15881;
        extern_args[5] = x15986;
        extern_args[6] = x16073;
        extern_args[7] = x16142;
        extern_args[8] = x16193;
        extern_args[9] = x16226;
        extern_args[10] = x16241;
        extern_args[11] = x16247;
        extern_args[12] = x16253;
        extern_args[13] = x16259;
        extern_args[14] = x16265;
        extern_args[15] = x16271;
        extern_args[16] = x16277;
        extern_args[17] = x16283;
        extern_args[18] = x16289;
        extern_args[19] = x16295;
        extern_args[20] = x16301;
        extern_args[21] = x16307;
        extern_args[22] = x16313;
        extern_args[23] = x16319;
        extern_args[24] = x16325;
        extern_args[25] = x16331;
        extern_args[26] = x16337;
        extern_args[27] = x16343;
        extern_args[28] = x16349;
        extern_args[29] = x16355;
        extern_args[30] = x16361;
        extern_args[31] = x16367;
        extern_args[32] = x16373;
        extern_args[33] = x16379;
        extern_args[34] = x16385;
        extern_args[35] = x16391;
        extern_args[36] = x16397;
        extern_args[37] = x16403;
        extern_args[38] = x16409;
        extern_args[39] = x16415;
        extern_args[40] = x16421;
        extern_args[41] = x16427;
        extern_args[42] = x16433;
        extern_args[43] = x16439;
        extern_args[44] = x16445;
        extern_args[45] = x16451;
        extern_args[46] = x16457;
        extern_args[47] = x16463;
        extern_args[48] = x16469;
        extern_args[49] = x16475;
        extern_args[50] = x16481;
        extern_args[51] = x16487;
        extern_args[52] = x16493;
        extern_args[53] = x16499;
        extern_args[54] = x16505;
        extern_args[55] = x16511;
        extern_args[56] = x16517;
        extern_args[57] = x16523;
        extern_args[58] = x16529;
        extern_args[59] = x16535;
        extern_args[60] = x16541;
        extern_args[61] = x16547;
        extern_args[62] = x16553;
        extern_args[63] = x16556;
        extern_args[64] = x14156;
        extern_args[65] = x14157;
        extern_args[66] = x14158;
        extern_args[67] = x14159;
        extern_args[68] = x14161;
        extern_args[69] = x14162;
        extern_args[70] = x14163;
        extern_args[71] = x14164;
        extern_args[72] = x14166;
        extern_args[73] = x14167;
        extern_args[74] = x14168;
        extern_args[75] = x14169;
        extern_args[76] = x14171;
        extern_args[77] = x14172;
        extern_args[78] = x14173;
        extern_args[79] = x14174;
        extern_args[80] = x14176;
        extern_args[81] = x14177;
        extern_args[82] = x14178;
        extern_args[83] = x14179;
        extern_args[84] = x14181;
        extern_args[85] = x14182;
        extern_args[86] = x14183;
        extern_args[87] = x14184;
        extern_args[88] = x14186;
        extern_args[89] = x14187;
        extern_args[90] = x14188;
        extern_args[91] = x14189;
        extern_args[92] = x14191;
        extern_args[93] = x14192;
        extern_args[94] = x14193;
        extern_args[95] = x14194;
        extern_bigintQuotient(ctx, cycle, "", extern_args, extern_outs);
        auto x16557 = extern_outs[0];
        auto x16558 = extern_outs[1];
        auto x16559 = extern_outs[2];
        auto x16560 = extern_outs[3];
        auto x16561 = extern_outs[4];
        auto x16562 = extern_outs[5];
        auto x16563 = extern_outs[6];
        auto x16564 = extern_outs[7];
        auto x16565 = extern_outs[8];
        auto x16566 = extern_outs[9];
        auto x16567 = extern_outs[10];
        auto x16568 = extern_outs[11];
        auto x16569 = extern_outs[12];
        auto x16570 = extern_outs[13];
        auto x16571 = extern_outs[14];
        auto x16572 = extern_outs[15];
        auto x16573 = extern_outs[16];
        auto x16574 = extern_outs[17];
        auto x16575 = extern_outs[18];
        auto x16576 = extern_outs[19];
        auto x16577 = extern_outs[20];
        auto x16578 = extern_outs[21];
        auto x16579 = extern_outs[22];
        auto x16580 = extern_outs[23];
        auto x16581 = extern_outs[24];
        auto x16582 = extern_outs[25];
        auto x16583 = extern_outs[26];
        auto x16584 = extern_outs[27];
        auto x16585 = extern_outs[28];
        auto x16586 = extern_outs[29];
        auto x16587 = extern_outs[30];
        auto x16588 = extern_outs[31];
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16589 = x16557 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16590 = x16557 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16591 = x16557 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16592 = x16557 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16593 = x16557 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16594 = x16557 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16595 = x16557 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16596 = x16557 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16597 = x16557 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16598 = x16557 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16599 = x16557 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16600 = x16557 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16601 = x16557 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16602 = x16557 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16603 = x16557 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16604 = x16557 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16605 = x16557 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16606 = x16557 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16607 = x16557 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16608 = x16557 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16609 = x16557 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16610 = x16557 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16611 = x16557 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16612 = x16557 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16613 = x16557 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16614 = x16557 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16615 = x16557 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16616 = x16557 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16617 = x16557 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16618 = x16557 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16619 = x16557 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16620 = x16557 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16621 = x16558 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16622 = x16559 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16623 = x16560 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16624 = x16561 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16625 = x16562 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16626 = x16563 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16627 = x16564 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16628 = x16565 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16629 = x16566 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16630 = x16567 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16631 = x16568 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16632 = x16569 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16633 = x16570 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16634 = x16571 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16635 = x16572 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16636 = x16573 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16637 = x16574 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16638 = x16575 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16639 = x16576 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16640 = x16577 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16641 = x16578 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16642 = x16579 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16643 = x16580 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16644 = x16581 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16645 = x16582 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16646 = x16583 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16647 = x16584 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16648 = x16585 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16649 = x16586 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16650 = x16587 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16651 = x16588 * x14194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16652 = x16558 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16653 = x16558 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16654 = x16558 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16655 = x16558 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16656 = x16558 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16657 = x16558 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16658 = x16558 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16659 = x16558 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16660 = x16558 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16661 = x16558 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16662 = x16558 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16663 = x16558 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16664 = x16558 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16665 = x16558 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16666 = x16558 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16667 = x16558 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16668 = x16558 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16669 = x16558 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16670 = x16558 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16671 = x16558 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16672 = x16558 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16673 = x16558 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16674 = x16558 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16675 = x16558 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16676 = x16558 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16677 = x16558 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16678 = x16558 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16679 = x16558 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16680 = x16558 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16681 = x16558 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16682 = x16558 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16683 = x16559 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16684 = x16559 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16685 = x16559 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16686 = x16559 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16687 = x16559 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16688 = x16559 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16689 = x16559 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16690 = x16559 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16691 = x16559 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16692 = x16559 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16693 = x16559 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16694 = x16559 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16695 = x16559 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16696 = x16559 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16697 = x16559 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16698 = x16559 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16699 = x16559 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16700 = x16559 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16701 = x16559 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16702 = x16559 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16703 = x16559 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16704 = x16559 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16705 = x16559 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16706 = x16559 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16707 = x16559 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16708 = x16559 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16709 = x16559 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16710 = x16559 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16711 = x16559 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16712 = x16559 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16713 = x16559 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16714 = x16560 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16715 = x16560 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16716 = x16560 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16717 = x16560 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16718 = x16560 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16719 = x16560 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16720 = x16560 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16721 = x16560 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16722 = x16560 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16723 = x16560 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16724 = x16560 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16725 = x16560 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16726 = x16560 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16727 = x16560 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16728 = x16560 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16729 = x16560 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16730 = x16560 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16731 = x16560 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16732 = x16560 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16733 = x16560 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16734 = x16560 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16735 = x16560 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16736 = x16560 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16737 = x16560 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16738 = x16560 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16739 = x16560 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16740 = x16560 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16741 = x16560 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16742 = x16560 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16743 = x16560 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16744 = x16560 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16745 = x16561 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16746 = x16561 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16747 = x16561 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16748 = x16561 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16749 = x16561 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16750 = x16561 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16751 = x16561 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16752 = x16561 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16753 = x16561 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16754 = x16561 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16755 = x16561 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16756 = x16561 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16757 = x16561 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16758 = x16561 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16759 = x16561 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16760 = x16561 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16761 = x16561 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16762 = x16561 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16763 = x16561 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16764 = x16561 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16765 = x16561 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16766 = x16561 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16767 = x16561 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16768 = x16561 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16769 = x16561 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16770 = x16561 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16771 = x16561 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16772 = x16561 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16773 = x16561 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16774 = x16561 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16775 = x16561 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16776 = x16562 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16777 = x16562 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16778 = x16562 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16779 = x16562 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16780 = x16562 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16781 = x16562 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16782 = x16562 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16783 = x16562 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16784 = x16562 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16785 = x16562 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16786 = x16562 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16787 = x16562 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16788 = x16562 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16789 = x16562 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16790 = x16562 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16791 = x16562 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16792 = x16562 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16793 = x16562 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16794 = x16562 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16795 = x16562 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16796 = x16562 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16797 = x16562 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16798 = x16562 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16799 = x16562 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16800 = x16562 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16801 = x16562 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16802 = x16562 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16803 = x16562 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16804 = x16562 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16805 = x16562 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16806 = x16562 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16807 = x16563 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16808 = x16563 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16809 = x16563 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16810 = x16563 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16811 = x16563 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16812 = x16563 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16813 = x16563 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16814 = x16563 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16815 = x16563 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16816 = x16563 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16817 = x16563 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16818 = x16563 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16819 = x16563 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16820 = x16563 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16821 = x16563 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16822 = x16563 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16823 = x16563 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16824 = x16563 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16825 = x16563 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16826 = x16563 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16827 = x16563 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16828 = x16563 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16829 = x16563 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16830 = x16563 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16831 = x16563 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16832 = x16563 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16833 = x16563 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16834 = x16563 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16835 = x16563 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16836 = x16563 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16837 = x16563 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16838 = x16564 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16839 = x16564 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16840 = x16564 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16841 = x16564 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16842 = x16564 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16843 = x16564 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16844 = x16564 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16845 = x16564 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16846 = x16564 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16847 = x16564 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16848 = x16564 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16849 = x16564 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16850 = x16564 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16851 = x16564 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16852 = x16564 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16853 = x16564 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16854 = x16564 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16855 = x16564 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16856 = x16564 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16857 = x16564 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16858 = x16564 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16859 = x16564 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16860 = x16564 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16861 = x16564 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16862 = x16564 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16863 = x16564 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16864 = x16564 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16865 = x16564 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16866 = x16564 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16867 = x16564 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16868 = x16564 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16869 = x16565 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16870 = x16565 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16871 = x16565 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16872 = x16565 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16873 = x16565 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16874 = x16565 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16875 = x16565 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16876 = x16565 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16877 = x16565 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16878 = x16565 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16879 = x16565 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16880 = x16565 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16881 = x16565 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16882 = x16565 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16883 = x16565 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16884 = x16565 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16885 = x16565 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16886 = x16565 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16887 = x16565 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16888 = x16565 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16889 = x16565 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16890 = x16565 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16891 = x16565 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16892 = x16565 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16893 = x16565 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16894 = x16565 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16895 = x16565 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16896 = x16565 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16897 = x16565 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16898 = x16565 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16899 = x16565 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16900 = x16566 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16901 = x16566 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16902 = x16566 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16903 = x16566 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16904 = x16566 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16905 = x16566 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16906 = x16566 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16907 = x16566 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16908 = x16566 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16909 = x16566 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16910 = x16566 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16911 = x16566 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16912 = x16566 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16913 = x16566 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16914 = x16566 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16915 = x16566 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16916 = x16566 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16917 = x16566 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16918 = x16566 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16919 = x16566 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16920 = x16566 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16921 = x16566 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16922 = x16566 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16923 = x16566 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16924 = x16566 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16925 = x16566 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16926 = x16566 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16927 = x16566 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16928 = x16566 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16929 = x16566 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16930 = x16566 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16931 = x16567 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16932 = x16567 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16933 = x16567 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16934 = x16567 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16935 = x16567 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16936 = x16567 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16937 = x16567 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16938 = x16567 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16939 = x16567 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16940 = x16567 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16941 = x16567 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16942 = x16567 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16943 = x16567 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16944 = x16567 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16945 = x16567 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16946 = x16567 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16947 = x16567 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16948 = x16567 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16949 = x16567 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16950 = x16567 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16951 = x16567 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16952 = x16567 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16953 = x16567 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16954 = x16567 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16955 = x16567 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16956 = x16567 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16957 = x16567 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16958 = x16567 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16959 = x16567 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16960 = x16567 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16961 = x16567 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16962 = x16568 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16963 = x16568 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16964 = x16568 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16965 = x16568 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16966 = x16568 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16967 = x16568 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16968 = x16568 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16969 = x16568 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16970 = x16568 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16971 = x16568 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16972 = x16568 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16973 = x16568 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16974 = x16568 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16975 = x16568 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16976 = x16568 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16977 = x16568 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16978 = x16568 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16979 = x16568 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16980 = x16568 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16981 = x16568 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16982 = x16568 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16983 = x16568 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16984 = x16568 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16985 = x16568 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16986 = x16568 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16987 = x16568 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16988 = x16568 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16989 = x16568 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16990 = x16568 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16991 = x16568 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16992 = x16568 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16993 = x16569 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16994 = x16569 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16995 = x16569 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16996 = x16569 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16997 = x16569 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16998 = x16569 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x16999 = x16569 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17000 = x16569 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17001 = x16569 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17002 = x16569 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17003 = x16569 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17004 = x16569 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17005 = x16569 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17006 = x16569 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17007 = x16569 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17008 = x16569 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17009 = x16569 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17010 = x16569 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17011 = x16569 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17012 = x16569 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17013 = x16569 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17014 = x16569 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17015 = x16569 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17016 = x16569 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17017 = x16569 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17018 = x16569 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17019 = x16569 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17020 = x16569 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17021 = x16569 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17022 = x16569 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17023 = x16569 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17024 = x16570 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17025 = x16570 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17026 = x16570 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17027 = x16570 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17028 = x16570 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17029 = x16570 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17030 = x16570 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17031 = x16570 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17032 = x16570 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17033 = x16570 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17034 = x16570 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17035 = x16570 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17036 = x16570 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17037 = x16570 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17038 = x16570 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17039 = x16570 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17040 = x16570 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17041 = x16570 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17042 = x16570 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17043 = x16570 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17044 = x16570 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17045 = x16570 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17046 = x16570 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17047 = x16570 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17048 = x16570 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17049 = x16570 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17050 = x16570 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17051 = x16570 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17052 = x16570 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17053 = x16570 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17054 = x16570 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17055 = x16571 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17056 = x16571 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17057 = x16571 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17058 = x16571 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17059 = x16571 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17060 = x16571 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17061 = x16571 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17062 = x16571 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17063 = x16571 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17064 = x16571 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17065 = x16571 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17066 = x16571 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17067 = x16571 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17068 = x16571 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17069 = x16571 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17070 = x16571 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17071 = x16571 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17072 = x16571 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17073 = x16571 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17074 = x16571 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17075 = x16571 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17076 = x16571 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17077 = x16571 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17078 = x16571 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17079 = x16571 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17080 = x16571 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17081 = x16571 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17082 = x16571 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17083 = x16571 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17084 = x16571 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17085 = x16571 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17086 = x16572 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17087 = x16572 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17088 = x16572 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17089 = x16572 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17090 = x16572 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17091 = x16572 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17092 = x16572 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17093 = x16572 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17094 = x16572 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17095 = x16572 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17096 = x16572 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17097 = x16572 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17098 = x16572 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17099 = x16572 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17100 = x16572 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17101 = x16572 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17102 = x16572 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17103 = x16572 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17104 = x16572 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17105 = x16572 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17106 = x16572 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17107 = x16572 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17108 = x16572 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17109 = x16572 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17110 = x16572 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17111 = x16572 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17112 = x16572 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17113 = x16572 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17114 = x16572 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17115 = x16572 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17116 = x16572 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17117 = x16573 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17118 = x16573 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17119 = x16573 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17120 = x16573 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17121 = x16573 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17122 = x16573 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17123 = x16573 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17124 = x16573 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17125 = x16573 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17126 = x16573 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17127 = x16573 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17128 = x16573 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17129 = x16573 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17130 = x16573 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17131 = x16573 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17132 = x16573 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17133 = x16573 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17134 = x16573 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17135 = x16573 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17136 = x16573 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17137 = x16573 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17138 = x16573 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17139 = x16573 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17140 = x16573 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17141 = x16573 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17142 = x16573 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17143 = x16573 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17144 = x16573 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17145 = x16573 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17146 = x16573 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17147 = x16573 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17148 = x16574 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17149 = x16574 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17150 = x16574 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17151 = x16574 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17152 = x16574 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17153 = x16574 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17154 = x16574 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17155 = x16574 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17156 = x16574 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17157 = x16574 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17158 = x16574 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17159 = x16574 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17160 = x16574 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17161 = x16574 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17162 = x16574 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17163 = x16574 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17164 = x16574 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17165 = x16574 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17166 = x16574 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17167 = x16574 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17168 = x16574 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17169 = x16574 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17170 = x16574 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17171 = x16574 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17172 = x16574 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17173 = x16574 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17174 = x16574 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17175 = x16574 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17176 = x16574 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17177 = x16574 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17178 = x16574 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17179 = x16575 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17180 = x16575 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17181 = x16575 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17182 = x16575 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17183 = x16575 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17184 = x16575 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17185 = x16575 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17186 = x16575 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17187 = x16575 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17188 = x16575 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17189 = x16575 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17190 = x16575 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17191 = x16575 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17192 = x16575 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17193 = x16575 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17194 = x16575 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17195 = x16575 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17196 = x16575 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17197 = x16575 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17198 = x16575 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17199 = x16575 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17200 = x16575 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17201 = x16575 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17202 = x16575 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17203 = x16575 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17204 = x16575 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17205 = x16575 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17206 = x16575 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17207 = x16575 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17208 = x16575 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17209 = x16575 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17210 = x16576 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17211 = x16576 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17212 = x16576 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17213 = x16576 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17214 = x16576 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17215 = x16576 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17216 = x16576 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17217 = x16576 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17218 = x16576 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17219 = x16576 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17220 = x16576 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17221 = x16576 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17222 = x16576 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17223 = x16576 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17224 = x16576 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17225 = x16576 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17226 = x16576 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17227 = x16576 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17228 = x16576 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17229 = x16576 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17230 = x16576 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17231 = x16576 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17232 = x16576 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17233 = x16576 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17234 = x16576 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17235 = x16576 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17236 = x16576 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17237 = x16576 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17238 = x16576 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17239 = x16576 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17240 = x16576 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17241 = x16577 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17242 = x16577 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17243 = x16577 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17244 = x16577 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17245 = x16577 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17246 = x16577 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17247 = x16577 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17248 = x16577 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17249 = x16577 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17250 = x16577 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17251 = x16577 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17252 = x16577 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17253 = x16577 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17254 = x16577 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17255 = x16577 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17256 = x16577 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17257 = x16577 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17258 = x16577 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17259 = x16577 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17260 = x16577 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17261 = x16577 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17262 = x16577 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17263 = x16577 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17264 = x16577 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17265 = x16577 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17266 = x16577 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17267 = x16577 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17268 = x16577 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17269 = x16577 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17270 = x16577 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17271 = x16577 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17272 = x16578 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17273 = x16578 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17274 = x16578 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17275 = x16578 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17276 = x16578 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17277 = x16578 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17278 = x16578 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17279 = x16578 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17280 = x16578 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17281 = x16578 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17282 = x16578 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17283 = x16578 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17284 = x16578 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17285 = x16578 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17286 = x16578 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17287 = x16578 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17288 = x16578 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17289 = x16578 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17290 = x16578 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17291 = x16578 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17292 = x16578 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17293 = x16578 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17294 = x16578 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17295 = x16578 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17296 = x16578 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17297 = x16578 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17298 = x16578 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17299 = x16578 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17300 = x16578 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17301 = x16578 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17302 = x16578 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17303 = x16579 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17304 = x16579 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17305 = x16579 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17306 = x16579 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17307 = x16579 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17308 = x16579 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17309 = x16579 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17310 = x16579 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17311 = x16579 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17312 = x16579 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17313 = x16579 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17314 = x16579 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17315 = x16579 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17316 = x16579 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17317 = x16579 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17318 = x16579 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17319 = x16579 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17320 = x16579 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17321 = x16579 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17322 = x16579 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17323 = x16579 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17324 = x16579 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17325 = x16579 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17326 = x16579 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17327 = x16579 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17328 = x16579 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17329 = x16579 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17330 = x16579 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17331 = x16579 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17332 = x16579 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17333 = x16579 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17334 = x16580 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17335 = x16580 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17336 = x16580 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17337 = x16580 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17338 = x16580 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17339 = x16580 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17340 = x16580 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17341 = x16580 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17342 = x16580 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17343 = x16580 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17344 = x16580 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17345 = x16580 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17346 = x16580 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17347 = x16580 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17348 = x16580 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17349 = x16580 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17350 = x16580 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17351 = x16580 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17352 = x16580 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17353 = x16580 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17354 = x16580 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17355 = x16580 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17356 = x16580 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17357 = x16580 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17358 = x16580 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17359 = x16580 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17360 = x16580 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17361 = x16580 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17362 = x16580 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17363 = x16580 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17364 = x16580 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17365 = x16581 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17366 = x16581 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17367 = x16581 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17368 = x16581 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17369 = x16581 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17370 = x16581 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17371 = x16581 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17372 = x16581 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17373 = x16581 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17374 = x16581 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17375 = x16581 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17376 = x16581 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17377 = x16581 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17378 = x16581 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17379 = x16581 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17380 = x16581 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17381 = x16581 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17382 = x16581 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17383 = x16581 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17384 = x16581 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17385 = x16581 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17386 = x16581 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17387 = x16581 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17388 = x16581 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17389 = x16581 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17390 = x16581 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17391 = x16581 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17392 = x16581 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17393 = x16581 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17394 = x16581 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17395 = x16581 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17396 = x16582 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17397 = x16582 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17398 = x16582 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17399 = x16582 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17400 = x16582 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17401 = x16582 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17402 = x16582 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17403 = x16582 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17404 = x16582 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17405 = x16582 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17406 = x16582 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17407 = x16582 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17408 = x16582 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17409 = x16582 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17410 = x16582 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17411 = x16582 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17412 = x16582 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17413 = x16582 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17414 = x16582 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17415 = x16582 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17416 = x16582 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17417 = x16582 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17418 = x16582 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17419 = x16582 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17420 = x16582 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17421 = x16582 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17422 = x16582 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17423 = x16582 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17424 = x16582 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17425 = x16582 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17426 = x16582 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17427 = x16583 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17428 = x16583 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17429 = x16583 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17430 = x16583 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17431 = x16583 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17432 = x16583 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17433 = x16583 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17434 = x16583 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17435 = x16583 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17436 = x16583 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17437 = x16583 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17438 = x16583 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17439 = x16583 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17440 = x16583 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17441 = x16583 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17442 = x16583 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17443 = x16583 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17444 = x16583 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17445 = x16583 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17446 = x16583 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17447 = x16583 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17448 = x16583 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17449 = x16583 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17450 = x16583 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17451 = x16583 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17452 = x16583 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17453 = x16583 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17454 = x16583 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17455 = x16583 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17456 = x16583 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17457 = x16583 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17458 = x16584 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17459 = x16584 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17460 = x16584 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17461 = x16584 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17462 = x16584 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17463 = x16584 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17464 = x16584 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17465 = x16584 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17466 = x16584 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17467 = x16584 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17468 = x16584 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17469 = x16584 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17470 = x16584 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17471 = x16584 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17472 = x16584 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17473 = x16584 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17474 = x16584 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17475 = x16584 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17476 = x16584 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17477 = x16584 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17478 = x16584 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17479 = x16584 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17480 = x16584 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17481 = x16584 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17482 = x16584 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17483 = x16584 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17484 = x16584 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17485 = x16584 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17486 = x16584 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17487 = x16584 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17488 = x16584 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17489 = x16585 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17490 = x16585 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17491 = x16585 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17492 = x16585 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17493 = x16585 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17494 = x16585 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17495 = x16585 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17496 = x16585 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17497 = x16585 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17498 = x16585 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17499 = x16585 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17500 = x16585 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17501 = x16585 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17502 = x16585 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17503 = x16585 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17504 = x16585 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17505 = x16585 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17506 = x16585 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17507 = x16585 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17508 = x16585 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17509 = x16585 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17510 = x16585 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17511 = x16585 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17512 = x16585 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17513 = x16585 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17514 = x16585 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17515 = x16585 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17516 = x16585 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17517 = x16585 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17518 = x16585 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17519 = x16585 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17520 = x16586 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17521 = x16586 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17522 = x16586 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17523 = x16586 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17524 = x16586 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17525 = x16586 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17526 = x16586 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17527 = x16586 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17528 = x16586 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17529 = x16586 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17530 = x16586 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17531 = x16586 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17532 = x16586 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17533 = x16586 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17534 = x16586 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17535 = x16586 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17536 = x16586 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17537 = x16586 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17538 = x16586 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17539 = x16586 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17540 = x16586 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17541 = x16586 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17542 = x16586 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17543 = x16586 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17544 = x16586 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17545 = x16586 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17546 = x16586 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17547 = x16586 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17548 = x16586 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17549 = x16586 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17550 = x16586 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17551 = x16587 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17552 = x16587 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17553 = x16587 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17554 = x16587 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17555 = x16587 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17556 = x16587 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17557 = x16587 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17558 = x16587 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17559 = x16587 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17560 = x16587 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17561 = x16587 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17562 = x16587 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17563 = x16587 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17564 = x16587 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17565 = x16587 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17566 = x16587 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17567 = x16587 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17568 = x16587 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17569 = x16587 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17570 = x16587 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17571 = x16587 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17572 = x16587 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17573 = x16587 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17574 = x16587 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17575 = x16587 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17576 = x16587 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17577 = x16587 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17578 = x16587 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17579 = x16587 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17580 = x16587 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17581 = x16587 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17582 = x16588 * x14156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17583 = x16588 * x14161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17584 = x16588 * x14166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17585 = x16588 * x14171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17586 = x16588 * x14176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17587 = x16588 * x14181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17588 = x16588 * x14186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17589 = x16588 * x14191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17590 = x16588 * x14157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17591 = x16588 * x14162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17592 = x16588 * x14167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17593 = x16588 * x14172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17594 = x16588 * x14177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17595 = x16588 * x14182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17596 = x16588 * x14187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17597 = x16588 * x14192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17598 = x16588 * x14158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17599 = x16588 * x14163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17600 = x16588 * x14168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17601 = x16588 * x14173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17602 = x16588 * x14178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17603 = x16588 * x14183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17604 = x16588 * x14188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17605 = x16588 * x14193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17606 = x16588 * x14159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17607 = x16588 * x14164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17608 = x16588 * x14169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17609 = x16588 * x14174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17610 = x16588 * x14179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17611 = x16588 * x14184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:21)
        auto x17612 = x16588 * x14189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17613 = x16597 + x16652;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17614 = x16650 + x17605;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17615 = x15241 - x17613;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17616 = x15272 - x17614;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17617 = x14209 - x16589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17618 = x14256 - x16651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17619 = x16590 + x16676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17620 = x16591 + x16677;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17621 = x16592 + x16678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17622 = x16593 + x16679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17623 = x16594 + x16680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17624 = x16595 + x16681;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17625 = x16596 + x16682;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17626 = x16598 + x16653;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17627 = x16599 + x16654;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17628 = x16600 + x16655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17629 = x16601 + x16656;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17630 = x16602 + x16657;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17631 = x16603 + x16658;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17632 = x16604 + x16659;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17633 = x16605 + x16660;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17634 = x16606 + x16661;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17635 = x16607 + x16662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17636 = x16608 + x16663;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17637 = x16609 + x16664;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17638 = x16610 + x16665;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17639 = x16611 + x16666;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17640 = x16612 + x16667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17641 = x16613 + x16668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17642 = x16614 + x16669;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17643 = x16615 + x16670;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17644 = x16616 + x16671;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17645 = x16617 + x16672;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17646 = x16618 + x16673;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17647 = x16619 + x16674;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17648 = x16620 + x16675;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17649 = x16621 + x16706;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17650 = x16622 + x16737;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17651 = x16623 + x16768;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17652 = x16624 + x16799;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17653 = x16625 + x16830;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17654 = x16626 + x16861;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17655 = x16627 + x16892;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17656 = x16628 + x16923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17657 = x16629 + x16954;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17658 = x16630 + x16985;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17659 = x16631 + x17016;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17660 = x16632 + x17047;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17661 = x16633 + x17078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17662 = x16634 + x17109;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17663 = x16635 + x17140;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17664 = x16636 + x17171;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17665 = x16637 + x17202;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17666 = x16638 + x17233;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17667 = x16639 + x17264;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17668 = x16640 + x17295;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17669 = x16641 + x17326;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17670 = x16642 + x17357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17671 = x16643 + x17388;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17672 = x16644 + x17419;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17673 = x16645 + x17450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17674 = x16646 + x17481;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17675 = x16647 + x17512;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17676 = x16648 + x17543;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17677 = x16649 + x17574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x17678 = x17617 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17679 = x17633 + x16683;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17680 = x17677 + x17597;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x17681 = Fp(x17678.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x17682 = x17678 - x17681;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17683 = x15311 - x17679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17684 = x15326 - x17680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17685 = x17619 + x16699;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17686 = x17620 + x16700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17687 = x17621 + x16701;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17688 = x17622 + x16702;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17689 = x17623 + x16703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17690 = x17624 + x16704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17691 = x17625 + x16705;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17692 = x17626 + x16707;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17693 = x17627 + x16708;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17694 = x17628 + x16709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17695 = x17629 + x16710;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17696 = x17630 + x16711;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17697 = x17631 + x16712;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17698 = x17632 + x16713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17699 = x17634 + x16684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17700 = x17635 + x16685;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17701 = x17636 + x16686;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17702 = x17637 + x16687;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17703 = x17638 + x16688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17704 = x17639 + x16689;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17705 = x17640 + x16690;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17706 = x17641 + x16691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17707 = x17642 + x16692;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17708 = x17643 + x16693;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17709 = x17644 + x16694;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17710 = x17645 + x16695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17711 = x17646 + x16696;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17712 = x17647 + x16697;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17713 = x17648 + x16698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17714 = x17649 + x16729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17715 = x17650 + x16760;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17716 = x17651 + x16791;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17717 = x17652 + x16822;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17718 = x17653 + x16853;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17719 = x17654 + x16884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17720 = x17655 + x16915;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17721 = x17656 + x16946;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17722 = x17657 + x16977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17723 = x17658 + x17008;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17724 = x17659 + x17039;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17725 = x17660 + x17070;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17726 = x17661 + x17101;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17727 = x17662 + x17132;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17728 = x17663 + x17163;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17729 = x17664 + x17194;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17730 = x17665 + x17225;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17731 = x17666 + x17256;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17732 = x17667 + x17287;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17733 = x17668 + x17318;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17734 = x17669 + x17349;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17735 = x17670 + x17380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17736 = x17671 + x17411;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17737 = x17672 + x17442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17738 = x17673 + x17473;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17739 = x17674 + x17504;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17740 = x17675 + x17535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17741 = x17676 + x17566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17742 = x17706 + x16714;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17743 = x17741 + x17589;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x17744 = x17682 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17745 = x15350 - x17743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17746 = x15379 - x17742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x17747 = x17744 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17748 = x17685 + x16722;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17749 = x17686 + x16723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17750 = x17687 + x16724;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17751 = x17688 + x16725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17752 = x17689 + x16726;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17753 = x17690 + x16727;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17754 = x17691 + x16728;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17755 = x17692 + x16730;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17756 = x17693 + x16731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17757 = x17694 + x16732;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17758 = x17695 + x16733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17759 = x17696 + x16734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17760 = x17697 + x16735;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17761 = x17698 + x16736;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17762 = x17699 + x16738;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17763 = x17700 + x16739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17764 = x17701 + x16740;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17765 = x17702 + x16741;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17766 = x17703 + x16742;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17767 = x17704 + x16743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17768 = x17705 + x16744;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17769 = x17707 + x16715;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17770 = x17708 + x16716;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17771 = x17709 + x16717;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17772 = x17710 + x16718;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17773 = x17711 + x16719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17774 = x17712 + x16720;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17775 = x17713 + x16721;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17776 = x17714 + x16752;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17777 = x17715 + x16783;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17778 = x17716 + x16814;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17779 = x17717 + x16845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17780 = x17718 + x16876;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17781 = x17719 + x16907;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17782 = x17720 + x16938;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17783 = x17721 + x16969;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17784 = x17722 + x17000;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17785 = x17723 + x17031;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17786 = x17724 + x17062;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17787 = x17725 + x17093;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17788 = x17726 + x17124;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17789 = x17727 + x17155;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17790 = x17728 + x17186;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17791 = x17729 + x17217;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17792 = x17730 + x17248;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17793 = x17731 + x17279;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17794 = x17732 + x17310;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17795 = x17733 + x17341;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17796 = x17734 + x17372;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17797 = x17735 + x17403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17798 = x17736 + x17434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17799 = x17737 + x17465;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17800 = x17738 + x17496;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17801 = x17739 + x17527;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17802 = x17740 + x17558;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x17803 = x17615 + x17747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17804 = x17748 + x16745;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17805 = x17802 + x17612;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17806 = x15408 - x17804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17807 = x15455 - x17805;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17808 = x17749 + x16746;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17809 = x17750 + x16747;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17810 = x17751 + x16748;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17811 = x17752 + x16749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17812 = x17753 + x16750;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17813 = x17754 + x16751;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17814 = x17755 + x16753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17815 = x17756 + x16754;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17816 = x17757 + x16755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17817 = x17758 + x16756;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17818 = x17759 + x16757;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17819 = x17760 + x16758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17820 = x17761 + x16759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17821 = x17762 + x16761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17822 = x17763 + x16762;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17823 = x17764 + x16763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17824 = x17765 + x16764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17825 = x17766 + x16765;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17826 = x17767 + x16766;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17827 = x17768 + x16767;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17828 = x17769 + x16769;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17829 = x17770 + x16770;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17830 = x17771 + x16771;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17831 = x17772 + x16772;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17832 = x17773 + x16773;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17833 = x17774 + x16774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17834 = x17775 + x16775;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17835 = x17776 + x16806;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17836 = x17777 + x16837;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17837 = x17778 + x16868;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17838 = x17779 + x16899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17839 = x17780 + x16930;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17840 = x17781 + x16961;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17841 = x17782 + x16992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17842 = x17783 + x17023;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17843 = x17784 + x17054;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17844 = x17785 + x17085;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17845 = x17786 + x17116;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17846 = x17787 + x17147;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17847 = x17788 + x17178;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17848 = x17789 + x17209;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17849 = x17790 + x17240;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17850 = x17791 + x17271;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17851 = x17792 + x17302;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17852 = x17793 + x17333;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17853 = x17794 + x17364;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17854 = x17795 + x17395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17855 = x17796 + x17426;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17856 = x17797 + x17457;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17857 = x17798 + x17488;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17858 = x17799 + x17519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17859 = x17800 + x17550;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17860 = x17801 + x17581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x17861 = x17803 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17862 = x17814 + x16776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17863 = x17860 + x17604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x17864 = Fp(x17861.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x17865 = x17861 - x17864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17866 = x15472 - x17862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17867 = x15505 - x17863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17868 = x17808 + x16800;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17869 = x17809 + x16801;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17870 = x17810 + x16802;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17871 = x17811 + x16803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17872 = x17812 + x16804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17873 = x17813 + x16805;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17874 = x17815 + x16777;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17875 = x17816 + x16778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17876 = x17817 + x16779;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17877 = x17818 + x16780;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17878 = x17819 + x16781;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17879 = x17820 + x16782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17880 = x17821 + x16784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17881 = x17822 + x16785;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17882 = x17823 + x16786;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17883 = x17824 + x16787;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17884 = x17825 + x16788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17885 = x17826 + x16789;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17886 = x17827 + x16790;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17887 = x17828 + x16792;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17888 = x17829 + x16793;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17889 = x17830 + x16794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17890 = x17831 + x16795;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17891 = x17832 + x16796;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17892 = x17833 + x16797;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17893 = x17834 + x16798;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17894 = x17835 + x16829;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17895 = x17836 + x16860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17896 = x17837 + x16891;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17897 = x17838 + x16922;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17898 = x17839 + x16953;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17899 = x17840 + x16984;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17900 = x17841 + x17015;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17901 = x17842 + x17046;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17902 = x17843 + x17077;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17903 = x17844 + x17108;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17904 = x17845 + x17139;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17905 = x17846 + x17170;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17906 = x17847 + x17201;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17907 = x17848 + x17232;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17908 = x17849 + x17263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17909 = x17850 + x17294;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17910 = x17851 + x17325;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17911 = x17852 + x17356;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17912 = x17853 + x17387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17913 = x17854 + x17418;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17914 = x17855 + x17449;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17915 = x17856 + x17480;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17916 = x17857 + x17511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17917 = x17858 + x17542;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17918 = x17859 + x17573;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17919 = x17880 + x16807;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17920 = x17918 + x17596;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x17921 = x17865 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17922 = x15533 - x17919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17923 = x15552 - x17920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x17924 = x17921 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17925 = x17868 + x16823;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17926 = x17869 + x16824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17927 = x17870 + x16825;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17928 = x17871 + x16826;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17929 = x17872 + x16827;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17930 = x17873 + x16828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17931 = x17874 + x16831;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17932 = x17875 + x16832;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17933 = x17876 + x16833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17934 = x17877 + x16834;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17935 = x17878 + x16835;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17936 = x17879 + x16836;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17937 = x17881 + x16808;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17938 = x17882 + x16809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17939 = x17883 + x16810;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17940 = x17884 + x16811;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17941 = x17885 + x16812;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17942 = x17886 + x16813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17943 = x17887 + x16815;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17944 = x17888 + x16816;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17945 = x17889 + x16817;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17946 = x17890 + x16818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17947 = x17891 + x16819;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17948 = x17892 + x16820;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17949 = x17893 + x16821;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17950 = x17894 + x16852;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17951 = x17895 + x16883;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17952 = x17896 + x16914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17953 = x17897 + x16945;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17954 = x17898 + x16976;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17955 = x17899 + x17007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17956 = x17900 + x17038;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17957 = x17901 + x17069;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17958 = x17902 + x17100;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17959 = x17903 + x17131;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17960 = x17904 + x17162;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17961 = x17905 + x17193;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17962 = x17906 + x17224;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17963 = x17907 + x17255;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17964 = x17908 + x17286;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17965 = x17909 + x17317;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17966 = x17910 + x17348;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17967 = x17911 + x17379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17968 = x17912 + x17410;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17969 = x17913 + x17441;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17970 = x17914 + x17472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17971 = x17915 + x17503;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17972 = x17916 + x17534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17973 = x17917 + x17565;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x17974 = x17683 + x17924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17975 = x17943 + x16838;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17976 = x17973 + x17588;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17977 = x15572 - x17976;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x17978 = x15591 - x17975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17979 = x17925 + x16846;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17980 = x17926 + x16847;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17981 = x17927 + x16848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17982 = x17928 + x16849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17983 = x17929 + x16850;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17984 = x17930 + x16851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17985 = x17931 + x16854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17986 = x17932 + x16855;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17987 = x17933 + x16856;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17988 = x17934 + x16857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17989 = x17935 + x16858;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17990 = x17936 + x16859;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17991 = x17937 + x16862;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17992 = x17938 + x16863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17993 = x17939 + x16864;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17994 = x17940 + x16865;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17995 = x17941 + x16866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17996 = x17942 + x16867;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17997 = x17944 + x16839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17998 = x17945 + x16840;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x17999 = x17946 + x16841;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18000 = x17947 + x16842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18001 = x17948 + x16843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18002 = x17949 + x16844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18003 = x17950 + x16875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18004 = x17951 + x16906;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18005 = x17952 + x16937;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18006 = x17953 + x16968;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18007 = x17954 + x16999;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18008 = x17955 + x17030;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18009 = x17956 + x17061;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18010 = x17957 + x17092;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18011 = x17958 + x17123;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18012 = x17959 + x17154;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18013 = x17960 + x17185;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18014 = x17961 + x17216;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18015 = x17962 + x17247;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18016 = x17963 + x17278;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18017 = x17964 + x17309;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18018 = x17965 + x17340;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18019 = x17966 + x17371;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18020 = x17967 + x17402;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18021 = x17968 + x17433;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18022 = x17969 + x17464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18023 = x17970 + x17495;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18024 = x17971 + x17526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18025 = x17972 + x17557;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18026 = x17974 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18027 = x17979 + x16869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18028 = x18025 + x17611;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18029 = Fp(x18026.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18030 = x18026 - x18029;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18031 = x15624 - x18027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18032 = x15664 - x18028;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18033 = x17980 + x16870;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18034 = x17981 + x16871;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18035 = x17982 + x16872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18036 = x17983 + x16873;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18037 = x17984 + x16874;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18038 = x17985 + x16877;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18039 = x17986 + x16878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18040 = x17987 + x16879;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18041 = x17988 + x16880;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18042 = x17989 + x16881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18043 = x17990 + x16882;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18044 = x17991 + x16885;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18045 = x17992 + x16886;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18046 = x17993 + x16887;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18047 = x17994 + x16888;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18048 = x17995 + x16889;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18049 = x17996 + x16890;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18050 = x17997 + x16893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18051 = x17998 + x16894;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18052 = x17999 + x16895;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18053 = x18000 + x16896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18054 = x18001 + x16897;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18055 = x18002 + x16898;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18056 = x18003 + x16929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18057 = x18004 + x16960;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18058 = x18005 + x16991;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18059 = x18006 + x17022;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18060 = x18007 + x17053;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18061 = x18008 + x17084;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18062 = x18009 + x17115;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18063 = x18010 + x17146;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18064 = x18011 + x17177;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18065 = x18012 + x17208;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18066 = x18013 + x17239;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18067 = x18014 + x17270;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18068 = x18015 + x17301;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18069 = x18016 + x17332;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18070 = x18017 + x17363;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18071 = x18018 + x17394;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18072 = x18019 + x17425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18073 = x18020 + x17456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18074 = x18021 + x17487;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18075 = x18022 + x17518;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18076 = x18023 + x17549;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18077 = x18024 + x17580;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18078 = x18038 + x16900;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18079 = x18077 + x17603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18080 = x18030 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18081 = x15678 - x18078;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18082 = x15706 - x18079;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18083 = x18080 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18084 = x18033 + x16924;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18085 = x18034 + x16925;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18086 = x18035 + x16926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18087 = x18036 + x16927;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18088 = x18037 + x16928;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18089 = x18039 + x16901;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18090 = x18040 + x16902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18091 = x18041 + x16903;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18092 = x18042 + x16904;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18093 = x18043 + x16905;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18094 = x18044 + x16908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18095 = x18045 + x16909;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18096 = x18046 + x16910;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18097 = x18047 + x16911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18098 = x18048 + x16912;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18099 = x18049 + x16913;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18100 = x18050 + x16916;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18101 = x18051 + x16917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18102 = x18052 + x16918;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18103 = x18053 + x16919;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18104 = x18054 + x16920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18105 = x18055 + x16921;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18106 = x18056 + x16952;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18107 = x18057 + x16983;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18108 = x18058 + x17014;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18109 = x18059 + x17045;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18110 = x18060 + x17076;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18111 = x18061 + x17107;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18112 = x18062 + x17138;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18113 = x18063 + x17169;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18114 = x18064 + x17200;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18115 = x18065 + x17231;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18116 = x18066 + x17262;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18117 = x18067 + x17293;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18118 = x18068 + x17324;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18119 = x18069 + x17355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18120 = x18070 + x17386;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18121 = x18071 + x17417;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18122 = x18072 + x17448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18123 = x18073 + x17479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18124 = x18074 + x17510;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18125 = x18075 + x17541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18126 = x18076 + x17572;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18127 = x17746 + x18083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18128 = x18094 + x16931;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18129 = x18126 + x17595;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18130 = x15729 - x18128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18131 = x15745 - x18129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18132 = x18084 + x16947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18133 = x18085 + x16948;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18134 = x18086 + x16949;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18135 = x18087 + x16950;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18136 = x18088 + x16951;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18137 = x18089 + x16955;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18138 = x18090 + x16956;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18139 = x18091 + x16957;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18140 = x18092 + x16958;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18141 = x18093 + x16959;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18142 = x18095 + x16932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18143 = x18096 + x16933;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18144 = x18097 + x16934;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18145 = x18098 + x16935;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18146 = x18099 + x16936;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18147 = x18100 + x16939;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18148 = x18101 + x16940;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18149 = x18102 + x16941;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18150 = x18103 + x16942;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18151 = x18104 + x16943;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18152 = x18105 + x16944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18153 = x18106 + x16975;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18154 = x18107 + x17006;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18155 = x18108 + x17037;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18156 = x18109 + x17068;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18157 = x18110 + x17099;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18158 = x18111 + x17130;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18159 = x18112 + x17161;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18160 = x18113 + x17192;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18161 = x18114 + x17223;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18162 = x18115 + x17254;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18163 = x18116 + x17285;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18164 = x18117 + x17316;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18165 = x18118 + x17347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18166 = x18119 + x17378;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18167 = x18120 + x17409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18168 = x18121 + x17440;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18169 = x18122 + x17471;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18170 = x18123 + x17502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18171 = x18124 + x17533;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18172 = x18125 + x17564;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18173 = x18127 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18174 = x18147 + x16962;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18175 = x18172 + x17587;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18176 = Fp(x18173.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18177 = x18173 - x18176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18178 = x15764 - x18175;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18179 = x15780 - x18174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18180 = x18132 + x16970;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18181 = x18133 + x16971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18182 = x18134 + x16972;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18183 = x18135 + x16973;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18184 = x18136 + x16974;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18185 = x18137 + x16978;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18186 = x18138 + x16979;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18187 = x18139 + x16980;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18188 = x18140 + x16981;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18189 = x18141 + x16982;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18190 = x18142 + x16986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18191 = x18143 + x16987;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18192 = x18144 + x16988;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18193 = x18145 + x16989;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18194 = x18146 + x16990;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18195 = x18148 + x16963;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18196 = x18149 + x16964;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18197 = x18150 + x16965;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18198 = x18151 + x16966;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18199 = x18152 + x16967;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18200 = x18153 + x16998;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18201 = x18154 + x17029;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18202 = x18155 + x17060;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18203 = x18156 + x17091;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18204 = x18157 + x17122;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18205 = x18158 + x17153;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18206 = x18159 + x17184;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18207 = x18160 + x17215;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18208 = x18161 + x17246;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18209 = x18162 + x17277;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18210 = x18163 + x17308;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18211 = x18164 + x17339;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18212 = x18165 + x17370;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18213 = x18166 + x17401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18214 = x18167 + x17432;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18215 = x18168 + x17463;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18216 = x18169 + x17494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18217 = x18170 + x17525;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18218 = x18171 + x17556;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18219 = x18180 + x16993;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18220 = x18218 + x17610;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18221 = x18177 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18222 = x15807 - x18219;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18223 = x15840 - x18220;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18224 = x18221 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18225 = x18181 + x16994;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18226 = x18182 + x16995;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18227 = x18183 + x16996;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18228 = x18184 + x16997;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18229 = x18185 + x17001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18230 = x18186 + x17002;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18231 = x18187 + x17003;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18232 = x18188 + x17004;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18233 = x18189 + x17005;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18234 = x18190 + x17009;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18235 = x18191 + x17010;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18236 = x18192 + x17011;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18237 = x18193 + x17012;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18238 = x18194 + x17013;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18239 = x18195 + x17017;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18240 = x18196 + x17018;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18241 = x18197 + x17019;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18242 = x18198 + x17020;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18243 = x18199 + x17021;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18244 = x18200 + x17052;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18245 = x18201 + x17083;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18246 = x18202 + x17114;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18247 = x18203 + x17145;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18248 = x18204 + x17176;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18249 = x18205 + x17207;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18250 = x18206 + x17238;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18251 = x18207 + x17269;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18252 = x18208 + x17300;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18253 = x18209 + x17331;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18254 = x18210 + x17362;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18255 = x18211 + x17393;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18256 = x18212 + x17424;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18257 = x18213 + x17455;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18258 = x18214 + x17486;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18259 = x18215 + x17517;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18260 = x18216 + x17548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18261 = x18217 + x17579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18262 = x17806 + x18224;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18263 = x18229 + x17024;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18264 = x18261 + x17602;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18265 = x15851 - x18263;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18266 = x15874 - x18264;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18267 = x18225 + x17048;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18268 = x18226 + x17049;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18269 = x18227 + x17050;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18270 = x18228 + x17051;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18271 = x18230 + x17025;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18272 = x18231 + x17026;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18273 = x18232 + x17027;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18274 = x18233 + x17028;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18275 = x18234 + x17032;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18276 = x18235 + x17033;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18277 = x18236 + x17034;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18278 = x18237 + x17035;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18279 = x18238 + x17036;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18280 = x18239 + x17040;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18281 = x18240 + x17041;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18282 = x18241 + x17042;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18283 = x18242 + x17043;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18284 = x18243 + x17044;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18285 = x18244 + x17075;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18286 = x18245 + x17106;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18287 = x18246 + x17137;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18288 = x18247 + x17168;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18289 = x18248 + x17199;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18290 = x18249 + x17230;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18291 = x18250 + x17261;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18292 = x18251 + x17292;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18293 = x18252 + x17323;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18294 = x18253 + x17354;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18295 = x18254 + x17385;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18296 = x18255 + x17416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18297 = x18256 + x17447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18298 = x18257 + x17478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18299 = x18258 + x17509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18300 = x18259 + x17540;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18301 = x18260 + x17571;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18302 = x18262 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18303 = x18275 + x17055;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18304 = x18301 + x17594;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18305 = Fp(x18302.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18306 = x18302 - x18305;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18307 = x15895 - x18303;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18308 = x15908 - x18304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18309 = x18267 + x17071;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18310 = x18268 + x17072;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18311 = x18269 + x17073;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18312 = x18270 + x17074;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18313 = x18271 + x17079;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18314 = x18272 + x17080;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18315 = x18273 + x17081;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18316 = x18274 + x17082;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18317 = x18276 + x17056;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18318 = x18277 + x17057;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18319 = x18278 + x17058;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18320 = x18279 + x17059;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18321 = x18280 + x17063;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18322 = x18281 + x17064;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18323 = x18282 + x17065;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18324 = x18283 + x17066;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18325 = x18284 + x17067;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18326 = x18285 + x17098;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18327 = x18286 + x17129;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18328 = x18287 + x17160;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18329 = x18288 + x17191;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18330 = x18289 + x17222;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18331 = x18290 + x17253;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18332 = x18291 + x17284;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18333 = x18292 + x17315;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18334 = x18293 + x17346;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18335 = x18294 + x17377;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18336 = x18295 + x17408;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18337 = x18296 + x17439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18338 = x18297 + x17470;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18339 = x18298 + x17501;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18340 = x18299 + x17532;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18341 = x18300 + x17563;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18342 = x18321 + x17086;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18343 = x18341 + x17586;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18344 = x18306 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18345 = x15923 - x18343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18346 = x15936 - x18342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18347 = x18344 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18348 = x18309 + x17094;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18349 = x18310 + x17095;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18350 = x18311 + x17096;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18351 = x18312 + x17097;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18352 = x18313 + x17102;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18353 = x18314 + x17103;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18354 = x18315 + x17104;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18355 = x18316 + x17105;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18356 = x18317 + x17110;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18357 = x18318 + x17111;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18358 = x18319 + x17112;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18359 = x18320 + x17113;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18360 = x18322 + x17087;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18361 = x18323 + x17088;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18362 = x18324 + x17089;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18363 = x18325 + x17090;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18364 = x18326 + x17121;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18365 = x18327 + x17152;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18366 = x18328 + x17183;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18367 = x18329 + x17214;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18368 = x18330 + x17245;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18369 = x18331 + x17276;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18370 = x18332 + x17307;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18371 = x18333 + x17338;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18372 = x18334 + x17369;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18373 = x18335 + x17400;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18374 = x18336 + x17431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18375 = x18337 + x17462;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18376 = x18338 + x17493;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18377 = x18339 + x17524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18378 = x18340 + x17555;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18379 = x17866 + x18347;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18380 = x18348 + x17117;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18381 = x18378 + x17609;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18382 = x15957 - x18380;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18383 = x15983 - x18381;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18384 = x18349 + x17118;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18385 = x18350 + x17119;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18386 = x18351 + x17120;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18387 = x18352 + x17125;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18388 = x18353 + x17126;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18389 = x18354 + x17127;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18390 = x18355 + x17128;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18391 = x18356 + x17133;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18392 = x18357 + x17134;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18393 = x18358 + x17135;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18394 = x18359 + x17136;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18395 = x18360 + x17141;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18396 = x18361 + x17142;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18397 = x18362 + x17143;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18398 = x18363 + x17144;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18399 = x18364 + x17175;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18400 = x18365 + x17206;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18401 = x18366 + x17237;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18402 = x18367 + x17268;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18403 = x18368 + x17299;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18404 = x18369 + x17330;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18405 = x18370 + x17361;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18406 = x18371 + x17392;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18407 = x18372 + x17423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18408 = x18373 + x17454;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18409 = x18374 + x17485;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18410 = x18375 + x17516;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18411 = x18376 + x17547;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18412 = x18377 + x17578;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18413 = x18379 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18414 = x18387 + x17148;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18415 = x18412 + x17601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18416 = Fp(x18413.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18417 = x18413 - x18416;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18418 = x15994 - x18414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18419 = x16012 - x18415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18420 = x18384 + x17172;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18421 = x18385 + x17173;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18422 = x18386 + x17174;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18423 = x18388 + x17149;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18424 = x18389 + x17150;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18425 = x18390 + x17151;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18426 = x18391 + x17156;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18427 = x18392 + x17157;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18428 = x18393 + x17158;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18429 = x18394 + x17159;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18430 = x18395 + x17164;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18431 = x18396 + x17165;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18432 = x18397 + x17166;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18433 = x18398 + x17167;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18434 = x18399 + x17198;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18435 = x18400 + x17229;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18436 = x18401 + x17260;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18437 = x18402 + x17291;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18438 = x18403 + x17322;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18439 = x18404 + x17353;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18440 = x18405 + x17384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18441 = x18406 + x17415;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18442 = x18407 + x17446;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18443 = x18408 + x17477;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18444 = x18409 + x17508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18445 = x18410 + x17539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18446 = x18411 + x17570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18447 = x18426 + x17179;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18448 = x18446 + x17593;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18449 = x18417 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18450 = x16028 - x18447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18451 = x16038 - x18448;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18452 = x18449 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18453 = x18420 + x17195;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18454 = x18421 + x17196;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18455 = x18422 + x17197;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18456 = x18423 + x17203;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18457 = x18424 + x17204;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18458 = x18425 + x17205;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18459 = x18427 + x17180;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18460 = x18428 + x17181;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18461 = x18429 + x17182;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18462 = x18430 + x17187;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18463 = x18431 + x17188;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18464 = x18432 + x17189;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18465 = x18433 + x17190;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18466 = x18434 + x17221;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18467 = x18435 + x17252;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18468 = x18436 + x17283;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18469 = x18437 + x17314;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18470 = x18438 + x17345;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18471 = x18439 + x17376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18472 = x18440 + x17407;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18473 = x18441 + x17438;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18474 = x18442 + x17469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18475 = x18443 + x17500;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18476 = x18444 + x17531;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18477 = x18445 + x17562;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18478 = x17922 + x18452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18479 = x18462 + x17210;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18480 = x18477 + x17585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18481 = x16049 - x18480;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18482 = x16059 - x18479;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18483 = x18453 + x17218;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18484 = x18454 + x17219;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18485 = x18455 + x17220;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18486 = x18456 + x17226;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18487 = x18457 + x17227;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18488 = x18458 + x17228;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18489 = x18459 + x17234;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18490 = x18460 + x17235;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18491 = x18461 + x17236;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18492 = x18463 + x17211;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18493 = x18464 + x17212;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18494 = x18465 + x17213;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18495 = x18466 + x17244;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18496 = x18467 + x17275;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18497 = x18468 + x17306;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18498 = x18469 + x17337;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18499 = x18470 + x17368;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18500 = x18471 + x17399;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18501 = x18472 + x17430;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18502 = x18473 + x17461;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18503 = x18474 + x17492;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18504 = x18475 + x17523;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18505 = x18476 + x17554;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18506 = x18478 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18507 = x18483 + x17241;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18508 = x18505 + x17608;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18509 = Fp(x18506.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18510 = x18506 - x18509;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18511 = x16077 - x18507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18512 = x16096 - x18508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18513 = x18484 + x17242;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18514 = x18485 + x17243;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18515 = x18486 + x17249;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18516 = x18487 + x17250;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18517 = x18488 + x17251;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18518 = x18489 + x17257;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18519 = x18490 + x17258;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18520 = x18491 + x17259;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18521 = x18492 + x17265;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18522 = x18493 + x17266;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18523 = x18494 + x17267;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18524 = x18495 + x17298;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18525 = x18496 + x17329;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18526 = x18497 + x17360;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18527 = x18498 + x17391;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18528 = x18499 + x17422;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18529 = x18500 + x17453;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18530 = x18501 + x17484;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18531 = x18502 + x17515;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18532 = x18503 + x17546;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18533 = x18504 + x17577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18534 = x18515 + x17272;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18535 = x18533 + x17600;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18536 = x18510 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18537 = x16104 - x18534;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18538 = x16117 - x18535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18539 = x18536 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18540 = x18513 + x17296;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18541 = x18514 + x17297;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18542 = x18516 + x17273;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18543 = x18517 + x17274;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18544 = x18518 + x17280;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18545 = x18519 + x17281;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18546 = x18520 + x17282;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18547 = x18521 + x17288;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18548 = x18522 + x17289;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18549 = x18523 + x17290;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18550 = x18524 + x17321;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18551 = x18525 + x17352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18552 = x18526 + x17383;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18553 = x18527 + x17414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18554 = x18528 + x17445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18555 = x18529 + x17476;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18556 = x18530 + x17507;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18557 = x18531 + x17538;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18558 = x18532 + x17569;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18559 = x17978 + x18539;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18560 = x18544 + x17303;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18561 = x18558 + x17592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18562 = x16128 - x18560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18563 = x16135 - x18561;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18564 = x18540 + x17319;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18565 = x18541 + x17320;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18566 = x18542 + x17327;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18567 = x18543 + x17328;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18568 = x18545 + x17304;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18569 = x18546 + x17305;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18570 = x18547 + x17311;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18571 = x18548 + x17312;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18572 = x18549 + x17313;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18573 = x18550 + x17344;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18574 = x18551 + x17375;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18575 = x18552 + x17406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18576 = x18553 + x17437;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18577 = x18554 + x17468;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18578 = x18555 + x17499;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18579 = x18556 + x17530;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18580 = x18557 + x17561;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18581 = x18559 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18582 = x18570 + x17334;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18583 = x18580 + x17584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18584 = Fp(x18581.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18585 = x18581 - x18584;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18586 = x16145 - x18583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18587 = x16152 - x18582;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18588 = x18564 + x17342;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18589 = x18565 + x17343;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18590 = x18566 + x17350;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18591 = x18567 + x17351;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18592 = x18568 + x17358;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18593 = x18569 + x17359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18594 = x18571 + x17335;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18595 = x18572 + x17336;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18596 = x18573 + x17367;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18597 = x18574 + x17398;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18598 = x18575 + x17429;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18599 = x18576 + x17460;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18600 = x18577 + x17491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18601 = x18578 + x17522;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18602 = x18579 + x17553;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18603 = x18588 + x17365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18604 = x18602 + x17607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18605 = x18585 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18606 = x16164 - x18603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18607 = x16176 - x18604;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18608 = x18605 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18609 = x18589 + x17366;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18610 = x18590 + x17373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18611 = x18591 + x17374;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18612 = x18592 + x17381;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18613 = x18593 + x17382;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18614 = x18594 + x17389;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18615 = x18595 + x17390;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18616 = x18596 + x17421;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18617 = x18597 + x17452;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18618 = x18598 + x17483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18619 = x18599 + x17514;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18620 = x18600 + x17545;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18621 = x18601 + x17576;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18622 = x18031 + x18608;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18623 = x18610 + x17396;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18624 = x18621 + x17599;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18625 = x16181 - x18623;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18626 = x16189 - x18624;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18627 = x18609 + x17420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18628 = x18611 + x17397;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18629 = x18612 + x17404;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18630 = x18613 + x17405;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18631 = x18614 + x17412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18632 = x18615 + x17413;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18633 = x18616 + x17444;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18634 = x18617 + x17475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18635 = x18618 + x17506;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18636 = x18619 + x17537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18637 = x18620 + x17568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18638 = x18622 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18639 = x18629 + x17427;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18640 = x18637 + x17591;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18641 = Fp(x18638.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18642 = x18638 - x18641;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18643 = x16198 - x18639;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18644 = x16202 - x18640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18645 = x18627 + x17443;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18646 = x18628 + x17451;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18647 = x18630 + x17428;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18648 = x18631 + x17435;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18649 = x18632 + x17436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18650 = x18633 + x17467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18651 = x18634 + x17498;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18652 = x18635 + x17529;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18653 = x18636 + x17560;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18654 = x18648 + x17458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18655 = x18653 + x17583;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18656 = x18642 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18657 = x16208 - x18655;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18658 = x16212 - x18654;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18659 = x18656 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18660 = x18645 + x17466;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18661 = x18646 + x17474;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18662 = x18647 + x17482;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18663 = x18649 + x17459;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18664 = x18650 + x17490;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18665 = x18651 + x17521;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18666 = x18652 + x17552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18667 = x18081 + x18659;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18668 = x18660 + x17489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18669 = x18666 + x17606;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18670 = x16218 - x18668;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18671 = x16224 - x18669;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18672 = x18661 + x17497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18673 = x18662 + x17505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18674 = x18663 + x17513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18675 = x18664 + x17544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18676 = x18665 + x17575;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18677 = x18667 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18678 = x18672 + x17520;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18679 = x18676 + x17598;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18680 = Fp(x18677.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18681 = x18677 - x18680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18682 = x16228 - x18678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18683 = x16232 - x18679;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18684 = x18673 + x17528;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18685 = x18674 + x17536;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18686 = x18675 + x17567;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18687 = x18684 + x17551;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18688 = x18686 + x17590;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18689 = x18681 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18690 = x16235 - x18687;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18691 = x16237 - x18688;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18692 = x18689 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18693 = x18685 + x17559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18694 = x18130 + x18692;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":73:14)
        auto x18695 = x18693 + x17582;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":105:17)
        auto x18696 = x16239 - x18695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18697 = x18694 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18698 = Fp(x18697.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18699 = x18697 - x18698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18700 = x18699 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18701 = x18700 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18702 = x18179 + x18701;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18703 = x18702 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18704 = Fp(x18703.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18705 = x18703 - x18704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18706 = x18705 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18707 = x18706 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18708 = x18222 + x18707;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18709 = x18708 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18710 = Fp(x18709.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18711 = x18709 - x18710;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18712 = x18711 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18713 = x18712 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18714 = x18265 + x18713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18715 = x18714 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18716 = Fp(x18715.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18717 = x18715 - x18716;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18718 = x18717 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18719 = x18718 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18720 = x18307 + x18719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18721 = x18720 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18722 = Fp(x18721.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18723 = x18721 - x18722;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18724 = x18723 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18725 = x18724 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18726 = x18346 + x18725;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18727 = x18726 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18728 = Fp(x18727.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18729 = x18727 - x18728;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18730 = x18729 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18731 = x18730 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18732 = x18382 + x18731;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18733 = x18732 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18734 = Fp(x18733.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18735 = x18733 - x18734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18736 = x18735 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18737 = x18736 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18738 = x18418 + x18737;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18739 = x18738 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18740 = Fp(x18739.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18741 = x18739 - x18740;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18742 = x18741 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18743 = x18742 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18744 = x18450 + x18743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18745 = x18744 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18746 = Fp(x18745.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18747 = x18745 - x18746;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18748 = x18747 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18749 = x18748 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18750 = x18482 + x18749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18751 = x18750 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18752 = Fp(x18751.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18753 = x18751 - x18752;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18754 = x18753 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18755 = x18754 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18756 = x18511 + x18755;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18757 = x18756 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18758 = Fp(x18757.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18759 = x18757 - x18758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18760 = x18759 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18761 = x18760 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18762 = x18537 + x18761;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18763 = x18762 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18764 = Fp(x18763.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18765 = x18763 - x18764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18766 = x18765 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18767 = x18766 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18768 = x18562 + x18767;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18769 = x18768 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18770 = Fp(x18769.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18771 = x18769 - x18770;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18772 = x18771 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18773 = x18772 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18774 = x18587 + x18773;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18775 = x18774 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18776 = Fp(x18775.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18777 = x18775 - x18776;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18778 = x18777 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18779 = x18778 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18780 = x18606 + x18779;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18781 = x18780 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18782 = Fp(x18781.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18783 = x18781 - x18782;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18784 = x18783 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18785 = x18784 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18786 = x18625 + x18785;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18787 = x18786 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18788 = Fp(x18787.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18789 = x18787 - x18788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18790 = x18789 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18791 = x18790 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18792 = x18643 + x18791;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18793 = x18792 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18794 = Fp(x18793.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18795 = x18793 - x18794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18796 = x18795 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18797 = x18796 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18798 = x18658 + x18797;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18799 = x18798 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18800 = Fp(x18799.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18801 = x18799 - x18800;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18802 = x18801 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18803 = x18802 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18804 = x18670 + x18803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18805 = x18804 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18806 = Fp(x18805.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18807 = x18805 - x18806;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18808 = x18807 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18809 = x18808 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18810 = x18682 + x18809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18811 = x18810 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18812 = Fp(x18811.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18813 = x18811 - x18812;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18814 = x18813 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18815 = x18814 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18816 = x18690 + x18815;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18817 = x18816 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18818 = Fp(x18817.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18819 = x18817 - x18818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18820 = x18819 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18821 = x18820 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18822 = x18696 + x18821;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18823 = x18822 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18824 = Fp(x18823.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18825 = x18823 - x18824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18826 = x18825 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18827 = x18826 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18828 = x18691 + x18827;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18829 = x18828 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18830 = Fp(x18829.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18831 = x18829 - x18830;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18832 = x18831 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18833 = x18832 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18834 = x18683 + x18833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18835 = x18834 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18836 = Fp(x18835.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18837 = x18835 - x18836;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18838 = x18837 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18839 = x18838 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18840 = x18671 + x18839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18841 = x18840 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18842 = Fp(x18841.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18843 = x18841 - x18842;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18844 = x18843 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18845 = x18844 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18846 = x18657 + x18845;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18847 = x18846 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18848 = Fp(x18847.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18849 = x18847 - x18848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18850 = x18849 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18851 = x18850 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18852 = x18644 + x18851;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18853 = x18852 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18854 = Fp(x18853.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18855 = x18853 - x18854;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18856 = x18855 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18857 = x18856 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18858 = x18626 + x18857;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18859 = x18858 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18860 = Fp(x18859.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18861 = x18859 - x18860;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18862 = x18861 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18863 = x18862 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18864 = x18607 + x18863;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18865 = x18864 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18866 = Fp(x18865.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18867 = x18865 - x18866;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18868 = x18867 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18869 = x18868 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18870 = x18586 + x18869;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18871 = x18870 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18872 = Fp(x18871.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18873 = x18871 - x18872;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18874 = x18873 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18875 = x18874 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18876 = x18563 + x18875;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18877 = x18876 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18878 = Fp(x18877.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18879 = x18877 - x18878;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18880 = x18879 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18881 = x18880 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18882 = x18538 + x18881;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18883 = x18882 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18884 = Fp(x18883.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18885 = x18883 - x18884;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18886 = x18885 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18887 = x18886 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18888 = x18512 + x18887;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18889 = x18888 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18890 = Fp(x18889.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18891 = x18889 - x18890;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18892 = x18891 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18893 = x18892 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18894 = x18481 + x18893;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18895 = x18894 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18896 = Fp(x18895.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18897 = x18895 - x18896;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18898 = x18897 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18899 = x18898 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18900 = x18451 + x18899;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18901 = x18900 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18902 = Fp(x18901.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18903 = x18901 - x18902;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18904 = x18903 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18905 = x18904 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18906 = x18419 + x18905;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18907 = x18906 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18908 = Fp(x18907.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18909 = x18907 - x18908;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18910 = x18909 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18911 = x18910 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18912 = x18383 + x18911;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18913 = x18912 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18914 = Fp(x18913.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18915 = x18913 - x18914;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18916 = x18915 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18917 = x18916 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18918 = x18345 + x18917;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18919 = x18918 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18920 = Fp(x18919.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18921 = x18919 - x18920;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18922 = x18921 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18923 = x18922 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18924 = x18308 + x18923;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18925 = x18924 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18926 = Fp(x18925.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18927 = x18925 - x18926;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18928 = x18927 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18929 = x18928 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18930 = x18266 + x18929;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18931 = x18930 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18932 = Fp(x18931.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18933 = x18931 - x18932;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18934 = x18933 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18935 = x18934 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18936 = x18223 + x18935;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18937 = x18936 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18938 = Fp(x18937.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18939 = x18937 - x18938;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18940 = x18939 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18941 = x18940 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18942 = x18178 + x18941;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18943 = x18942 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18944 = Fp(x18943.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18945 = x18943 - x18944;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18946 = x18945 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18947 = x18946 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18948 = x18131 + x18947;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18949 = x18948 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18950 = Fp(x18949.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18951 = x18949 - x18950;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18952 = x18951 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18953 = x18952 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18954 = x18082 + x18953;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18955 = x18954 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18956 = Fp(x18955.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18957 = x18955 - x18956;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18958 = x18957 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18959 = x18958 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18960 = x18032 + x18959;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18961 = x18960 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18962 = Fp(x18961.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18963 = x18961 - x18962;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18964 = x18963 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18965 = x18964 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18966 = x17977 + x18965;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18967 = x18966 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18968 = Fp(x18967.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18969 = x18967 - x18968;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18970 = x18969 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18971 = x18970 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18972 = x17923 + x18971;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18973 = x18972 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18974 = Fp(x18973.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18975 = x18973 - x18974;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18976 = x18975 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18977 = x18976 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18978 = x17867 + x18977;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18979 = x18978 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18980 = Fp(x18979.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18981 = x18979 - x18980;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18982 = x18981 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18983 = x18982 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18984 = x17807 + x18983;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18985 = x18984 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18986 = Fp(x18985.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18987 = x18985 - x18986;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18988 = x18987 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18989 = x18988 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18990 = x17745 + x18989;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18991 = x18990 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18992 = Fp(x18991.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18993 = x18991 - x18992;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x18994 = x18993 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x18995 = x18994 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18996 = x17684 + x18995;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x18997 = x18996 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x18998 = Fp(x18997.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x18999 = x18997 - x18998;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x19000 = x18999 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x19001 = x19000 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x19002 = x17616 + x19001;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x19003 = x19002 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x19004 = Fp(x19003.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x19005 = x19003 - x19004;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x19006 = x19005 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x19007 = x19006 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x19008 = x17618 + x19007;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":128:15)
        auto x19009 = x19008 + x2;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":129:16)
        auto x19010 = Fp(x19009.asUInt32() & x95.asUInt32());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:15)
        auto x19011 = x19009 - x19010;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:14)
        auto x19012 = x19011 * x94;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":130:13)
        auto x19013 = x19012 - x11;
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[18 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19014 = Fp(x16557.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19014);
                reg = x19014;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19015 = Fp(x16573.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19015);
                reg = x19015;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19016 = x17747 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19017 = Fp(x19016.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19018 = Fp(x19017.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19018);
                reg = x19018;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19019 = x18659 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19020 = Fp(x19019.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19021 = Fp(x19020.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19021);
                reg = x19021;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19022 = x18737 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19023 = Fp(x19022.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19024 = Fp(x19023.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19024);
                reg = x19024;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19025 = x18785 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19026 = Fp(x19025.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19027 = Fp(x19026.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19027);
                reg = x19027;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19028 = Fp(x17681.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19028);
                reg = x19028;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19029 = Fp(x18734.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19029);
                reg = x19029;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[19 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19030 = Fp(x16558.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19030);
                reg = x19030;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19031 = Fp(x16574.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19031);
                reg = x19031;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19032 = x17747 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19033 = Fp(x19032.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19034 = x19033 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19035 = Fp(x19034.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19035);
                reg = x19035;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19036 = x18659 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19037 = Fp(x19036.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19038 = x19037 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19039 = Fp(x19038.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19039);
                reg = x19039;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19040 = x18737 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19041 = Fp(x19040.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19042 = x19041 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19043 = Fp(x19042.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19043);
                reg = x19043;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19044 = x18785 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19045 = Fp(x19044.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19046 = x19045 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19047 = Fp(x19046.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19047);
                reg = x19047;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19048 = Fp(x17864.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19048);
                reg = x19048;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19049 = Fp(x18740.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19049);
                reg = x19049;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[20 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19050 = Fp(x16559.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19050);
                reg = x19050;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19051 = Fp(x16575.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19051);
                reg = x19051;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19052 = x17924 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19053 = Fp(x19052.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19054 = Fp(x19053.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19054);
                reg = x19054;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19055 = x18692 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19056 = Fp(x19055.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19057 = Fp(x19056.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19057);
                reg = x19057;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19058 = x18743 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19059 = Fp(x19058.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19060 = Fp(x19059.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19060);
                reg = x19060;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19061 = x18791 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19062 = Fp(x19061.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19063 = Fp(x19062.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19063);
                reg = x19063;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19064 = Fp(x18029.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19064);
                reg = x19064;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19065 = Fp(x18746.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19065);
                reg = x19065;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[21 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19066 = Fp(x16560.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19066);
                reg = x19066;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19067 = Fp(x16576.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19067);
                reg = x19067;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19068 = x17924 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19069 = Fp(x19068.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19070 = x19069 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19071 = Fp(x19070.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19071);
                reg = x19071;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19072 = x18692 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19073 = Fp(x19072.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19074 = x19073 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19075 = Fp(x19074.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19075);
                reg = x19075;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19076 = x18743 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19077 = Fp(x19076.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19078 = x19077 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19079 = Fp(x19078.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19079);
                reg = x19079;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19080 = x18791 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19081 = Fp(x19080.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19082 = x19081 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19083 = Fp(x19082.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19083);
                reg = x19083;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19084 = Fp(x18176.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19084);
                reg = x19084;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19085 = Fp(x18752.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19085);
                reg = x19085;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[22 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19086 = Fp(x16561.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19086);
                reg = x19086;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19087 = Fp(x16577.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19087);
                reg = x19087;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19088 = x18083 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19089 = Fp(x19088.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19090 = Fp(x19089.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19090);
                reg = x19090;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19091 = x18701 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19092 = Fp(x19091.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19093 = Fp(x19092.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19093);
                reg = x19093;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19094 = x18749 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19095 = Fp(x19094.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19096 = Fp(x19095.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19096);
                reg = x19096;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19097 = x18797 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19098 = Fp(x19097.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19099 = Fp(x19098.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19099);
                reg = x19099;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19100 = Fp(x18305.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19100);
                reg = x19100;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19101 = Fp(x18758.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19101);
                reg = x19101;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[23 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19102 = Fp(x16562.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19102);
                reg = x19102;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19103 = Fp(x16578.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19103);
                reg = x19103;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19104 = x18083 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19105 = Fp(x19104.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19106 = x19105 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19107 = Fp(x19106.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19107);
                reg = x19107;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19108 = x18701 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19109 = Fp(x19108.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19110 = x19109 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19111 = Fp(x19110.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19111);
                reg = x19111;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19112 = x18749 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19113 = Fp(x19112.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19114 = x19113 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19115 = Fp(x19114.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19115);
                reg = x19115;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19116 = x18797 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19117 = Fp(x19116.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19118 = x19117 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19119 = Fp(x19118.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19119);
                reg = x19119;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19120 = Fp(x18416.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19120);
                reg = x19120;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19121 = Fp(x18764.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19121);
                reg = x19121;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[24 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19122 = Fp(x16563.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19122);
                reg = x19122;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19123 = Fp(x16579.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19123);
                reg = x19123;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19124 = x18224 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19125 = Fp(x19124.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19126 = Fp(x19125.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19126);
                reg = x19126;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19127 = x18707 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19128 = Fp(x19127.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19129 = Fp(x19128.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19129);
                reg = x19129;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19130 = x18755 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19131 = Fp(x19130.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19132 = Fp(x19131.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19132);
                reg = x19132;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19133 = x18803 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19134 = Fp(x19133.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19135 = Fp(x19134.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19135);
                reg = x19135;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19136 = Fp(x18509.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19136);
                reg = x19136;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19137 = Fp(x18770.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19137);
                reg = x19137;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[25 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19138 = Fp(x16564.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19138);
                reg = x19138;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19139 = Fp(x16580.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19139);
                reg = x19139;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19140 = x18224 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19141 = Fp(x19140.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19142 = x19141 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19143 = Fp(x19142.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19143);
                reg = x19143;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19144 = x18707 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19145 = Fp(x19144.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19146 = x19145 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19147 = Fp(x19146.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19147);
                reg = x19147;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19148 = x18755 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19149 = Fp(x19148.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19150 = x19149 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19151 = Fp(x19150.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19151);
                reg = x19151;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19152 = x18803 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19153 = Fp(x19152.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19154 = x19153 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19155 = Fp(x19154.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19155);
                reg = x19155;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19156 = Fp(x18584.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19156);
                reg = x19156;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19157 = Fp(x18776.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19157);
                reg = x19157;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[26 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19158 = Fp(x16565.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19158);
                reg = x19158;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19159 = Fp(x16581.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19159);
                reg = x19159;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19160 = x18347 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19161 = Fp(x19160.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19162 = Fp(x19161.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19162);
                reg = x19162;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19163 = x18713 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19164 = Fp(x19163.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19165 = Fp(x19164.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19165);
                reg = x19165;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19166 = x18761 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19167 = Fp(x19166.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19168 = Fp(x19167.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19168);
                reg = x19168;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19169 = x18809 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19170 = Fp(x19169.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19171 = Fp(x19170.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19171);
                reg = x19171;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19172 = Fp(x18641.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19172);
                reg = x19172;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19173 = Fp(x18782.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19173);
                reg = x19173;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[27 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19174 = Fp(x16566.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19174);
                reg = x19174;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19175 = Fp(x16582.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19175);
                reg = x19175;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19176 = x18347 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19177 = Fp(x19176.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19178 = x19177 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19179 = Fp(x19178.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19179);
                reg = x19179;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19180 = x18713 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19181 = Fp(x19180.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19182 = x19181 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19183 = Fp(x19182.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19183);
                reg = x19183;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19184 = x18761 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19185 = Fp(x19184.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19186 = x19185 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19187 = Fp(x19186.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19187);
                reg = x19187;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19188 = x18809 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19189 = Fp(x19188.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19190 = x19189 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19191 = Fp(x19190.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19191);
                reg = x19191;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19192 = Fp(x18680.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19192);
                reg = x19192;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19193 = Fp(x18788.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19193);
                reg = x19193;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[28 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19194 = Fp(x16567.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19194);
                reg = x19194;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19195 = Fp(x16583.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19195);
                reg = x19195;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19196 = x18452 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19197 = Fp(x19196.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19198 = Fp(x19197.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19198);
                reg = x19198;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19199 = x18719 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19200 = Fp(x19199.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19201 = Fp(x19200.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19201);
                reg = x19201;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19202 = x18767 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19203 = Fp(x19202.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19204 = Fp(x19203.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19204);
                reg = x19204;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19205 = x18815 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19206 = Fp(x19205.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19207 = Fp(x19206.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19207);
                reg = x19207;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19208 = Fp(x18698.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19208);
                reg = x19208;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19209 = Fp(x18794.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19209);
                reg = x19209;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19210 = Fp(x16568.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19210);
                reg = x19210;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19211 = Fp(x16584.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19211);
                reg = x19211;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19212 = x18452 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19213 = Fp(x19212.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19214 = x19213 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19215 = Fp(x19214.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19215);
                reg = x19215;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19216 = x18719 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19217 = Fp(x19216.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19218 = x19217 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19219 = Fp(x19218.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19219);
                reg = x19219;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19220 = x18767 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19221 = Fp(x19220.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19222 = x19221 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19223 = Fp(x19222.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19223);
                reg = x19223;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19224 = x18815 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19225 = Fp(x19224.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19226 = x19225 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19227 = Fp(x19226.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19227);
                reg = x19227;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19228 = Fp(x18704.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19228);
                reg = x19228;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19229 = Fp(x18800.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19229);
                reg = x19229;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[30 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19230 = Fp(x16569.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19230);
                reg = x19230;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19231 = Fp(x16585.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19231);
                reg = x19231;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19232 = x18539 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19233 = Fp(x19232.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19234 = Fp(x19233.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19234);
                reg = x19234;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19235 = x18725 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19236 = Fp(x19235.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19237 = Fp(x19236.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19237);
                reg = x19237;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19238 = x18773 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19239 = Fp(x19238.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19240 = Fp(x19239.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19240);
                reg = x19240;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19241 = x18821 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19242 = Fp(x19241.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19243 = Fp(x19242.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19243);
                reg = x19243;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19244 = Fp(x18710.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19244);
                reg = x19244;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19245 = Fp(x18806.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19245);
                reg = x19245;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[31 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19246 = Fp(x16570.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19246);
                reg = x19246;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19247 = Fp(x16586.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19247);
                reg = x19247;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19248 = x18539 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19249 = Fp(x19248.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19250 = x19249 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19251 = Fp(x19250.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19251);
                reg = x19251;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19252 = x18725 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19253 = Fp(x19252.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19254 = x19253 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19255 = Fp(x19254.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19255);
                reg = x19255;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19256 = x18773 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19257 = Fp(x19256.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19258 = x19257 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19259 = Fp(x19258.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19259);
                reg = x19259;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19260 = x18821 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19261 = Fp(x19260.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19262 = x19261 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19263 = Fp(x19262.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19263);
                reg = x19263;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19264 = Fp(x18716.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19264);
                reg = x19264;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19265 = Fp(x18812.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19265);
                reg = x19265;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[32 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19266 = Fp(x16571.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19266);
                reg = x19266;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19267 = Fp(x16587.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19267);
                reg = x19267;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:31)
            auto x19268 = x18608 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":297:30)
            auto x19269 = Fp(x19268.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19270 = Fp(x19269.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19270);
                reg = x19270;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:31)
            auto x19271 = x18731 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":305:30)
            auto x19272 = Fp(x19271.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19273 = Fp(x19272.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19273);
                reg = x19273;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:31)
            auto x19274 = x18779 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":315:30)
            auto x19275 = Fp(x19274.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19276 = Fp(x19275.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19276);
                reg = x19276;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:31)
            auto x19277 = x18827 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":323:30)
            auto x19278 = Fp(x19277.asUInt32() & x95.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19279 = Fp(x19278.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19279);
                reg = x19279;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19280 = Fp(x18722.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19280);
                reg = x19280;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19281 = Fp(x18818.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19281);
                reg = x19281;
              }
            }
          }
        }
        if (x13901 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = arg2[33 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13891 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19282 = Fp(x16572.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19282);
                reg = x19282;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19283 = Fp(x16588.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19283);
                reg = x19283;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:32)
            auto x19284 = x18608 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:31)
            auto x19285 = Fp(x19284.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":299:30)
            auto x19286 = x19285 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19287 = Fp(x19286.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19287);
                reg = x19287;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:32)
            auto x19288 = x18731 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:31)
            auto x19289 = Fp(x19288.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":307:30)
            auto x19290 = x19289 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19291 = Fp(x19290.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19291);
                reg = x19291;
              }
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:32)
            auto x19292 = x18779 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:31)
            auto x19293 = Fp(x19292.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":317:30)
            auto x19294 = x19293 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19295 = Fp(x19294.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19295);
                reg = x19295;
              }
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:32)
            auto x19296 = x18827 + x11;
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:31)
            auto x19297 = Fp(x19296.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":325:30)
            auto x19298 = x19297 * x94;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19299 = Fp(x19298.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19299);
                reg = x19299;
              }
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19300 = Fp(x18728.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19300);
                reg = x19300;
              }
            }
          }
          if (x13887 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x19301 = Fp(x18824.asUInt32() & x95.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = arg2[33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x19301);
                reg = x19301;
              }
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18833);
              reg = x18833;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18881);
              reg = x18881;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18929);
              reg = x18929;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18977);
              reg = x18977;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18839);
              reg = x18839;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18887);
              reg = x18887;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18935);
              reg = x18935;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18983);
              reg = x18983;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18845);
              reg = x18845;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18893);
              reg = x18893;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18941);
              reg = x18941;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18989);
              reg = x18989;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18851);
              reg = x18851;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18899);
              reg = x18899;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18947);
              reg = x18947;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18995);
              reg = x18995;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18857);
              reg = x18857;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18905);
              reg = x18905;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18953);
              reg = x18953;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x19001);
              reg = x19001;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18863);
              reg = x18863;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18911);
              reg = x18911;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18959);
              reg = x18959;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x19007);
              reg = x19007;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18869);
              reg = x18869;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18917);
              reg = x18917;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18965);
              reg = x18965;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x19013);
              reg = x19013;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":344:31)
            {
              auto& reg = arg2[220 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18875);
              reg = x18875;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":345:27)
            {
              auto& reg = arg2[220 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18923);
              reg = x18923;
            }
          }
        }
        if (x13892 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":349:11)
            {
              auto& reg = arg2[220 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18971);
              reg = x18971;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":352:11)
            {
              auto& reg = arg2[220 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16589);
              reg = x16589;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18688);
              reg = x18688;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17617);
              reg = x17617;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18691);
              reg = x18691;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17613);
              reg = x17613;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18679);
              reg = x18679;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17615);
              reg = x17615;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18683);
              reg = x18683;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17679);
              reg = x17679;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18669);
              reg = x18669;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17683);
              reg = x17683;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18671);
              reg = x18671;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17742);
              reg = x17742;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18655);
              reg = x18655;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17746);
              reg = x17746;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18657);
              reg = x18657;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17804);
              reg = x17804;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18640);
              reg = x18640;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17806);
              reg = x17806;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18644);
              reg = x18644;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17862);
              reg = x17862;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18624);
              reg = x18624;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17866);
              reg = x17866;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18626);
              reg = x18626;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17919);
              reg = x17919;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18604);
              reg = x18604;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17922);
              reg = x17922;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18607);
              reg = x18607;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17975);
              reg = x17975;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18583);
              reg = x18583;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17978);
              reg = x17978;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18586);
              reg = x18586;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18027);
              reg = x18027;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18561);
              reg = x18561;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18031);
              reg = x18031;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18563);
              reg = x18563;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18078);
              reg = x18078;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18535);
              reg = x18535;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18081);
              reg = x18081;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18538);
              reg = x18538;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18128);
              reg = x18128;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18508);
              reg = x18508;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18130);
              reg = x18130;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18512);
              reg = x18512;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18174);
              reg = x18174;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18480);
              reg = x18480;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18179);
              reg = x18179;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18481);
              reg = x18481;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18219);
              reg = x18219;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18448);
              reg = x18448;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18222);
              reg = x18222;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18451);
              reg = x18451;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18263);
              reg = x18263;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18415);
              reg = x18415;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18265);
              reg = x18265;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18419);
              reg = x18419;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18303);
              reg = x18303;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18381);
              reg = x18381;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18307);
              reg = x18307;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18383);
              reg = x18383;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18342);
              reg = x18342;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18343);
              reg = x18343;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18346);
              reg = x18346;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18345);
              reg = x18345;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18380);
              reg = x18380;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18304);
              reg = x18304;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18382);
              reg = x18382;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18308);
              reg = x18308;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18414);
              reg = x18414;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18264);
              reg = x18264;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18418);
              reg = x18418;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18266);
              reg = x18266;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18447);
              reg = x18447;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18220);
              reg = x18220;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18450);
              reg = x18450;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18223);
              reg = x18223;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18479);
              reg = x18479;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18175);
              reg = x18175;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18482);
              reg = x18482;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18178);
              reg = x18178;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18507);
              reg = x18507;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18129);
              reg = x18129;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18511);
              reg = x18511;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18131);
              reg = x18131;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18534);
              reg = x18534;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18079);
              reg = x18079;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18537);
              reg = x18537;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18082);
              reg = x18082;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18560);
              reg = x18560;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18028);
              reg = x18028;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18562);
              reg = x18562;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18032);
              reg = x18032;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18582);
              reg = x18582;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17976);
              reg = x17976;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18587);
              reg = x18587;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17977);
              reg = x17977;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18603);
              reg = x18603;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17920);
              reg = x17920;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18606);
              reg = x18606;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17923);
              reg = x17923;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18623);
              reg = x18623;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17863);
              reg = x17863;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18625);
              reg = x18625;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17867);
              reg = x17867;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18639);
              reg = x18639;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17805);
              reg = x17805;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18643);
              reg = x18643;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17807);
              reg = x17807;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18654);
              reg = x18654;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17743);
              reg = x17743;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18658);
              reg = x18658;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17745);
              reg = x17745;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18668);
              reg = x18668;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17680);
              reg = x17680;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18670);
              reg = x18670;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17684);
              reg = x17684;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18678);
              reg = x18678;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17614);
              reg = x17614;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18682);
              reg = x18682;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17616);
              reg = x17616;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18687);
              reg = x18687;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16651);
              reg = x16651;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18690);
              reg = x18690;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17618);
              reg = x17618;
            }
          }
        }
        if (x13885 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":361:31)
            {
              auto& reg = arg2[212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18695);
              reg = x18695;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":362:27)
            {
              auto& reg = arg2[212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
        if (x13886 != 0) {
          if (x13934 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":365:31)
            {
              auto& reg = arg2[212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18696);
              reg = x18696;
            }
          }
          if (x13887 != 0) {
            // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":366:27)
            {
              auto& reg = arg2[212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x98);
              reg = x98;
            }
          }
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19302 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x19302 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19302);
          reg = x19302;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19303 = arg2[120 * steps + ((cycle - 2) & mask)];
        assert(x19303 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19303);
          reg = x19303;
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":380:35)
      auto x19304 = x13891 + x13892;
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19305 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x19305 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19305);
          reg = x19305;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19306 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x19306 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19306);
          reg = x19306;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19307 = arg2[121 * steps + ((cycle - 2) & mask)];
        assert(x19307 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19307);
          reg = x19307;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19308 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x19308 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19308);
          reg = x19308;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19309 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x19309 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19309);
          reg = x19309;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19310 = arg2[122 * steps + ((cycle - 2) & mask)];
        assert(x19310 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19310);
          reg = x19310;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19311 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x19311 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19311);
          reg = x19311;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19312 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x19312 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19312);
          reg = x19312;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19313 = arg2[123 * steps + ((cycle - 2) & mask)];
        assert(x19313 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19313);
          reg = x19313;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19314 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x19314 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19314);
          reg = x19314;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19315 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x19315 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19315);
          reg = x19315;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19316 = arg2[127 * steps + ((cycle - 2) & mask)];
        assert(x19316 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19316);
          reg = x19316;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19317 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x19317 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19317);
          reg = x19317;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19318 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x19318 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19318);
          reg = x19318;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19319 = arg2[128 * steps + ((cycle - 2) & mask)];
        assert(x19319 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19319);
          reg = x19319;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19320 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x19320 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19320);
          reg = x19320;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19321 = arg2[24 * steps + ((cycle - 0) & mask)];
        assert(x19321 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19321);
          reg = x19321;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19322 = arg2[129 * steps + ((cycle - 2) & mask)];
        assert(x19322 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19322);
          reg = x19322;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19323 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x19323 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19323);
          reg = x19323;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19324 = arg2[25 * steps + ((cycle - 0) & mask)];
        assert(x19324 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19324);
          reg = x19324;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19325 = arg2[130 * steps + ((cycle - 2) & mask)];
        assert(x19325 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19325);
          reg = x19325;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19326 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x19326 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19326);
          reg = x19326;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19327 = arg2[26 * steps + ((cycle - 0) & mask)];
        assert(x19327 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19327);
          reg = x19327;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19328 = arg2[134 * steps + ((cycle - 2) & mask)];
        assert(x19328 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19328);
          reg = x19328;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19329 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x19329 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19329);
          reg = x19329;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19330 = arg2[27 * steps + ((cycle - 0) & mask)];
        assert(x19330 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19330);
          reg = x19330;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19331 = arg2[135 * steps + ((cycle - 2) & mask)];
        assert(x19331 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19331);
          reg = x19331;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19332 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x19332 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19332);
          reg = x19332;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19333 = arg2[28 * steps + ((cycle - 0) & mask)];
        assert(x19333 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19333);
          reg = x19333;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19334 = arg2[136 * steps + ((cycle - 2) & mask)];
        assert(x19334 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19334);
          reg = x19334;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19335 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x19335 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19335);
          reg = x19335;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19336 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x19336 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19336);
          reg = x19336;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19337 = arg2[137 * steps + ((cycle - 2) & mask)];
        assert(x19337 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19337);
          reg = x19337;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19338 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x19338 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19338);
          reg = x19338;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19339 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x19339 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19339);
          reg = x19339;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19340 = arg2[141 * steps + ((cycle - 2) & mask)];
        assert(x19340 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19340);
          reg = x19340;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19341 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x19341 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19341);
          reg = x19341;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19342 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x19342 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19342);
          reg = x19342;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19343 = arg2[142 * steps + ((cycle - 2) & mask)];
        assert(x19343 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19343);
          reg = x19343;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19344 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x19344 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19344);
          reg = x19344;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19345 = arg2[32 * steps + ((cycle - 0) & mask)];
        assert(x19345 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19345);
          reg = x19345;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19346 = arg2[143 * steps + ((cycle - 2) & mask)];
        assert(x19346 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19346);
          reg = x19346;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19347 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x19347 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19347);
          reg = x19347;
        }
      }
      if (x13891 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19348 = arg2[33 * steps + ((cycle - 0) & mask)];
        assert(x19348 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":374:24)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19348);
          reg = x19348;
        }
      }
      if (x13892 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19349 = arg2[144 * steps + ((cycle - 2) & mask)];
        assert(x19349 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":377:7)
        {
          auto& reg = arg2[196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19349);
          reg = x19349;
        }
      }
      if (x19304 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19350 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x19350 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":381:7)
        {
          auto& reg = arg2[212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19350);
          reg = x19350;
        }
      }
      if (x13894 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19351 = arg2[181 * steps + ((cycle - 1) & mask)];
        assert(x19351 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19352 = arg2[18 * steps + ((cycle - 1) & mask)];
        assert(x19352 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19353 = arg2[18 * steps + ((cycle - 5) & mask)];
        assert(x19353 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19354 = arg2[19 * steps + ((cycle - 5) & mask)];
        assert(x19354 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19355 = x19354 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19356 = x19353 + x19355;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19357 = x19356 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19358 = x19357 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19359 = x19358 + x19352;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19360 = x19351 - x19359;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19360 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19361 = arg2[182 * steps + ((cycle - 1) & mask)];
        assert(x19361 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19362 = arg2[19 * steps + ((cycle - 1) & mask)];
        assert(x19362 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19363 = arg2[20 * steps + ((cycle - 5) & mask)];
        assert(x19363 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19364 = arg2[21 * steps + ((cycle - 5) & mask)];
        assert(x19364 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19365 = x19364 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19366 = x19361 + x19357;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19367 = x19363 + x19365;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19368 = x19367 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19369 = x19368 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19370 = x19369 + x19362;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19371 = x19366 - x19370;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19371 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19372 = arg2[183 * steps + ((cycle - 1) & mask)];
        assert(x19372 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19373 = arg2[20 * steps + ((cycle - 1) & mask)];
        assert(x19373 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19374 = arg2[22 * steps + ((cycle - 5) & mask)];
        assert(x19374 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19375 = arg2[23 * steps + ((cycle - 5) & mask)];
        assert(x19375 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19376 = x19375 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19377 = x19372 + x19368;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19378 = x19374 + x19376;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19379 = x19378 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19380 = x19379 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19381 = x19380 + x19373;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19382 = x19377 - x19381;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19382 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19383 = arg2[184 * steps + ((cycle - 1) & mask)];
        assert(x19383 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19384 = arg2[21 * steps + ((cycle - 1) & mask)];
        assert(x19384 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19385 = arg2[24 * steps + ((cycle - 5) & mask)];
        assert(x19385 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19386 = arg2[25 * steps + ((cycle - 5) & mask)];
        assert(x19386 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19387 = x19386 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19388 = x19383 + x19379;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19389 = x19385 + x19387;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19390 = x19389 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19391 = x19390 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19392 = x19391 + x19384;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19393 = x19388 - x19392;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19393 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19394 = arg2[185 * steps + ((cycle - 1) & mask)];
        assert(x19394 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19395 = arg2[22 * steps + ((cycle - 1) & mask)];
        assert(x19395 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19396 = arg2[26 * steps + ((cycle - 5) & mask)];
        assert(x19396 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19397 = arg2[27 * steps + ((cycle - 5) & mask)];
        assert(x19397 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19398 = x19397 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19399 = x19394 + x19390;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19400 = x19396 + x19398;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19401 = x19400 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19402 = x19401 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19403 = x19402 + x19395;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19404 = x19399 - x19403;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19404 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19405 = arg2[186 * steps + ((cycle - 1) & mask)];
        assert(x19405 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19406 = arg2[23 * steps + ((cycle - 1) & mask)];
        assert(x19406 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19407 = arg2[28 * steps + ((cycle - 5) & mask)];
        assert(x19407 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19408 = arg2[29 * steps + ((cycle - 5) & mask)];
        assert(x19408 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19409 = x19408 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19410 = x19405 + x19401;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19411 = x19407 + x19409;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19412 = x19411 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19413 = x19412 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19414 = x19413 + x19406;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19415 = x19410 - x19414;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19415 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19416 = arg2[187 * steps + ((cycle - 1) & mask)];
        assert(x19416 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19417 = arg2[24 * steps + ((cycle - 1) & mask)];
        assert(x19417 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19418 = arg2[30 * steps + ((cycle - 5) & mask)];
        assert(x19418 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19419 = arg2[31 * steps + ((cycle - 5) & mask)];
        assert(x19419 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19420 = x19419 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19421 = x19416 + x19412;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19422 = x19418 + x19420;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19423 = x19422 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19424 = x19423 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19425 = x19424 + x19417;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19426 = x19421 - x19425;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19426 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19427 = arg2[188 * steps + ((cycle - 1) & mask)];
        assert(x19427 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19428 = arg2[25 * steps + ((cycle - 1) & mask)];
        assert(x19428 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19429 = arg2[32 * steps + ((cycle - 5) & mask)];
        assert(x19429 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19430 = arg2[33 * steps + ((cycle - 5) & mask)];
        assert(x19430 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19431 = x19430 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19432 = x19427 + x19423;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19433 = x19429 + x19431;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19434 = x19433 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19435 = x19434 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19436 = x19435 + x19428;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19437 = x19432 - x19436;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19437 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19438 = arg2[189 * steps + ((cycle - 1) & mask)];
        assert(x19438 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19439 = arg2[26 * steps + ((cycle - 1) & mask)];
        assert(x19439 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19440 = arg2[18 * steps + ((cycle - 4) & mask)];
        assert(x19440 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19441 = arg2[19 * steps + ((cycle - 4) & mask)];
        assert(x19441 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19442 = x19441 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19443 = x19438 + x19434;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19444 = x19440 + x19442;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19445 = x19444 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19446 = x19445 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19447 = x19446 + x19439;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19448 = x19443 - x19447;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19448 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19449 = arg2[190 * steps + ((cycle - 1) & mask)];
        assert(x19449 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19450 = arg2[27 * steps + ((cycle - 1) & mask)];
        assert(x19450 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19451 = arg2[20 * steps + ((cycle - 4) & mask)];
        assert(x19451 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19452 = arg2[21 * steps + ((cycle - 4) & mask)];
        assert(x19452 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19453 = x19452 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19454 = x19449 + x19445;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19455 = x19451 + x19453;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19456 = x19455 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19457 = x19456 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19458 = x19457 + x19450;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19459 = x19454 - x19458;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19459 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19460 = arg2[191 * steps + ((cycle - 1) & mask)];
        assert(x19460 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19461 = arg2[28 * steps + ((cycle - 1) & mask)];
        assert(x19461 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19462 = arg2[22 * steps + ((cycle - 4) & mask)];
        assert(x19462 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19463 = arg2[23 * steps + ((cycle - 4) & mask)];
        assert(x19463 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19464 = x19463 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19465 = x19460 + x19456;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19466 = x19462 + x19464;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19467 = x19466 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19468 = x19467 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19469 = x19468 + x19461;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19470 = x19465 - x19469;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19470 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19471 = arg2[192 * steps + ((cycle - 1) & mask)];
        assert(x19471 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19472 = arg2[29 * steps + ((cycle - 1) & mask)];
        assert(x19472 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19473 = arg2[24 * steps + ((cycle - 4) & mask)];
        assert(x19473 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19474 = arg2[25 * steps + ((cycle - 4) & mask)];
        assert(x19474 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19475 = x19474 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19476 = x19471 + x19467;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19477 = x19473 + x19475;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19478 = x19477 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19479 = x19478 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19480 = x19479 + x19472;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19481 = x19476 - x19480;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19481 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19482 = arg2[193 * steps + ((cycle - 1) & mask)];
        assert(x19482 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19483 = arg2[30 * steps + ((cycle - 1) & mask)];
        assert(x19483 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19484 = arg2[26 * steps + ((cycle - 4) & mask)];
        assert(x19484 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19485 = arg2[27 * steps + ((cycle - 4) & mask)];
        assert(x19485 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19486 = x19485 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19487 = x19482 + x19478;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19488 = x19484 + x19486;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19489 = x19488 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19490 = x19489 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19491 = x19490 + x19483;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19492 = x19487 - x19491;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19492 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19493 = arg2[194 * steps + ((cycle - 1) & mask)];
        assert(x19493 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19494 = arg2[31 * steps + ((cycle - 1) & mask)];
        assert(x19494 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19495 = arg2[28 * steps + ((cycle - 4) & mask)];
        assert(x19495 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19496 = arg2[29 * steps + ((cycle - 4) & mask)];
        assert(x19496 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19497 = x19496 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19498 = x19493 + x19489;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19499 = x19495 + x19497;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19500 = x19499 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19501 = x19500 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19502 = x19501 + x19494;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19503 = x19498 - x19502;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19503 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19504 = arg2[195 * steps + ((cycle - 1) & mask)];
        assert(x19504 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19505 = arg2[32 * steps + ((cycle - 1) & mask)];
        assert(x19505 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19506 = arg2[30 * steps + ((cycle - 4) & mask)];
        assert(x19506 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19507 = arg2[31 * steps + ((cycle - 4) & mask)];
        assert(x19507 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19508 = x19507 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19509 = x19504 + x19500;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19510 = x19506 + x19508;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19511 = x19510 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19512 = x19511 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19513 = x19512 + x19505;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19514 = x19509 - x19513;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19514 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19515 = arg2[196 * steps + ((cycle - 1) & mask)];
        assert(x19515 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19516 = arg2[33 * steps + ((cycle - 1) & mask)];
        assert(x19516 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19517 = arg2[32 * steps + ((cycle - 4) & mask)];
        assert(x19517 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19518 = arg2[33 * steps + ((cycle - 4) & mask)];
        assert(x19518 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19519 = x19518 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19520 = x19515 + x19511;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19521 = x19517 + x19519;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19522 = x19521 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19523 = x19522 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19524 = x19523 + x19516;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19525 = x19520 - x19524;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19525 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19526 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x19526 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19527 = arg2[197 * steps + ((cycle - 1) & mask)];
        assert(x19527 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19528 = arg2[18 * steps + ((cycle - 3) & mask)];
        assert(x19528 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19529 = arg2[19 * steps + ((cycle - 3) & mask)];
        assert(x19529 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19530 = x19529 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19531 = x19527 + x19522;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19532 = x19528 + x19530;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19533 = x19532 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19534 = x19533 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19535 = x19534 + x19526;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19536 = x19531 - x19535;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19536 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19537 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x19537 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19538 = arg2[198 * steps + ((cycle - 1) & mask)];
        assert(x19538 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19539 = arg2[20 * steps + ((cycle - 3) & mask)];
        assert(x19539 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19540 = arg2[21 * steps + ((cycle - 3) & mask)];
        assert(x19540 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19541 = x19540 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19542 = x19538 + x19533;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19543 = x19539 + x19541;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19544 = x19543 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19545 = x19544 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19546 = x19545 + x19537;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19547 = x19542 - x19546;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19547 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19548 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x19548 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19549 = arg2[199 * steps + ((cycle - 1) & mask)];
        assert(x19549 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19550 = arg2[22 * steps + ((cycle - 3) & mask)];
        assert(x19550 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19551 = arg2[23 * steps + ((cycle - 3) & mask)];
        assert(x19551 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19552 = x19551 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19553 = x19549 + x19544;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19554 = x19550 + x19552;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19555 = x19554 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19556 = x19555 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19557 = x19556 + x19548;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19558 = x19553 - x19557;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19558 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19559 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x19559 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19560 = arg2[200 * steps + ((cycle - 1) & mask)];
        assert(x19560 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19561 = arg2[24 * steps + ((cycle - 3) & mask)];
        assert(x19561 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19562 = arg2[25 * steps + ((cycle - 3) & mask)];
        assert(x19562 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19563 = x19562 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19564 = x19560 + x19555;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19565 = x19561 + x19563;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19566 = x19565 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19567 = x19566 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19568 = x19567 + x19559;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19569 = x19564 - x19568;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19569 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19570 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x19570 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19571 = arg2[201 * steps + ((cycle - 1) & mask)];
        assert(x19571 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19572 = arg2[26 * steps + ((cycle - 3) & mask)];
        assert(x19572 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19573 = arg2[27 * steps + ((cycle - 3) & mask)];
        assert(x19573 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19574 = x19573 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19575 = x19571 + x19566;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19576 = x19572 + x19574;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19577 = x19576 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19578 = x19577 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19579 = x19578 + x19570;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19580 = x19575 - x19579;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19580 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19581 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x19581 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19582 = arg2[202 * steps + ((cycle - 1) & mask)];
        assert(x19582 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19583 = arg2[28 * steps + ((cycle - 3) & mask)];
        assert(x19583 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19584 = arg2[29 * steps + ((cycle - 3) & mask)];
        assert(x19584 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19585 = x19584 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19586 = x19582 + x19577;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19587 = x19583 + x19585;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19588 = x19587 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19589 = x19588 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19590 = x19589 + x19581;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19591 = x19586 - x19590;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19591 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19592 = arg2[24 * steps + ((cycle - 0) & mask)];
        assert(x19592 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19593 = arg2[203 * steps + ((cycle - 1) & mask)];
        assert(x19593 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19594 = arg2[30 * steps + ((cycle - 3) & mask)];
        assert(x19594 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19595 = arg2[31 * steps + ((cycle - 3) & mask)];
        assert(x19595 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19596 = x19595 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19597 = x19593 + x19588;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19598 = x19594 + x19596;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19599 = x19598 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19600 = x19599 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19601 = x19600 + x19592;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19602 = x19597 - x19601;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19602 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19603 = arg2[25 * steps + ((cycle - 0) & mask)];
        assert(x19603 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19604 = arg2[204 * steps + ((cycle - 1) & mask)];
        assert(x19604 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19605 = arg2[32 * steps + ((cycle - 3) & mask)];
        assert(x19605 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19606 = arg2[33 * steps + ((cycle - 3) & mask)];
        assert(x19606 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19607 = x19606 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19608 = x19604 + x19599;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19609 = x19605 + x19607;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19610 = x19609 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19611 = x19610 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19612 = x19611 + x19603;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19613 = x19608 - x19612;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19613 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19614 = arg2[26 * steps + ((cycle - 0) & mask)];
        assert(x19614 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19615 = arg2[205 * steps + ((cycle - 1) & mask)];
        assert(x19615 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19616 = arg2[18 * steps + ((cycle - 2) & mask)];
        assert(x19616 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19617 = arg2[19 * steps + ((cycle - 2) & mask)];
        assert(x19617 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19618 = x19617 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19619 = x19615 + x19610;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19620 = x19616 + x19618;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19621 = x19620 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19622 = x19621 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19623 = x19622 + x19614;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19624 = x19619 - x19623;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19624 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19625 = arg2[27 * steps + ((cycle - 0) & mask)];
        assert(x19625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19626 = arg2[206 * steps + ((cycle - 1) & mask)];
        assert(x19626 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19627 = arg2[20 * steps + ((cycle - 2) & mask)];
        assert(x19627 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19628 = arg2[21 * steps + ((cycle - 2) & mask)];
        assert(x19628 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19629 = x19628 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19630 = x19626 + x19621;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19631 = x19627 + x19629;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19632 = x19631 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19633 = x19632 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19634 = x19633 + x19625;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19635 = x19630 - x19634;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19635 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19636 = arg2[28 * steps + ((cycle - 0) & mask)];
        assert(x19636 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19637 = arg2[207 * steps + ((cycle - 1) & mask)];
        assert(x19637 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19638 = arg2[22 * steps + ((cycle - 2) & mask)];
        assert(x19638 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19639 = arg2[23 * steps + ((cycle - 2) & mask)];
        assert(x19639 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19640 = x19639 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19641 = x19637 + x19632;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19642 = x19638 + x19640;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19643 = x19642 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19644 = x19643 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19645 = x19644 + x19636;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19646 = x19641 - x19645;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19646 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19647 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x19647 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19648 = arg2[208 * steps + ((cycle - 1) & mask)];
        assert(x19648 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19649 = arg2[24 * steps + ((cycle - 2) & mask)];
        assert(x19649 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19650 = arg2[25 * steps + ((cycle - 2) & mask)];
        assert(x19650 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19651 = x19650 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19652 = x19648 + x19643;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19653 = x19649 + x19651;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19654 = x19653 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19655 = x19654 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19656 = x19655 + x19647;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19657 = x19652 - x19656;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19657 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19658 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x19658 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19659 = arg2[209 * steps + ((cycle - 1) & mask)];
        assert(x19659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19660 = arg2[26 * steps + ((cycle - 2) & mask)];
        assert(x19660 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19661 = arg2[27 * steps + ((cycle - 2) & mask)];
        assert(x19661 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19662 = x19661 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19663 = x19659 + x19654;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19664 = x19660 + x19662;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19665 = x19664 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19666 = x19665 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19667 = x19666 + x19658;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19668 = x19663 - x19667;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19668 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19669 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x19669 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19670 = arg2[210 * steps + ((cycle - 1) & mask)];
        assert(x19670 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19671 = arg2[28 * steps + ((cycle - 2) & mask)];
        assert(x19671 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19672 = arg2[29 * steps + ((cycle - 2) & mask)];
        assert(x19672 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19673 = x19672 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19674 = x19670 + x19665;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19675 = x19671 + x19673;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19676 = x19675 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19677 = x19676 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19678 = x19677 + x19669;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19679 = x19674 - x19678;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19679 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19680 = arg2[32 * steps + ((cycle - 0) & mask)];
        assert(x19680 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19681 = arg2[211 * steps + ((cycle - 1) & mask)];
        assert(x19681 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19682 = arg2[30 * steps + ((cycle - 2) & mask)];
        assert(x19682 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19683 = arg2[31 * steps + ((cycle - 2) & mask)];
        assert(x19683 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19684 = x19683 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19685 = x19681 + x19676;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19686 = x19682 + x19684;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19687 = x19686 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19688 = x19687 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19689 = x19688 + x19680;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19690 = x19685 - x19689;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19690 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19691 = arg2[33 * steps + ((cycle - 0) & mask)];
        assert(x19691 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19692 = arg2[212 * steps + ((cycle - 1) & mask)];
        assert(x19692 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19693 = arg2[32 * steps + ((cycle - 2) & mask)];
        assert(x19693 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19694 = arg2[33 * steps + ((cycle - 2) & mask)];
        assert(x19694 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":406:67)
        auto x19695 = x19694 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19696 = x19692 + x19687;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:63)
        auto x19697 = x19693 + x19695;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":405:16)
        auto x19698 = x19697 - x11;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19699 = x19698 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19700 = x19699 + x19691;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19701 = x19696 - x19700;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19701 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19702 = arg2[181 * steps + ((cycle - 0) & mask)];
        assert(x19702 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19703 = arg2[213 * steps + ((cycle - 5) & mask)];
        assert(x19703 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19704 = x19703 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19705 = x19702 + x19698;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19706 = x19705 - x19704;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19706 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19707 = arg2[182 * steps + ((cycle - 0) & mask)];
        assert(x19707 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19708 = arg2[214 * steps + ((cycle - 5) & mask)];
        assert(x19708 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19709 = x19708 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19710 = x19707 + x19703;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19711 = x19710 - x19709;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19711 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19712 = arg2[183 * steps + ((cycle - 0) & mask)];
        assert(x19712 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19713 = arg2[215 * steps + ((cycle - 5) & mask)];
        assert(x19713 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19714 = x19713 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19715 = x19712 + x19708;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19716 = x19715 - x19714;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19716 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19717 = arg2[184 * steps + ((cycle - 0) & mask)];
        assert(x19717 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19718 = arg2[216 * steps + ((cycle - 5) & mask)];
        assert(x19718 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19719 = x19718 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19720 = x19717 + x19713;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19721 = x19720 - x19719;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19721 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19722 = arg2[185 * steps + ((cycle - 0) & mask)];
        assert(x19722 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19723 = arg2[217 * steps + ((cycle - 5) & mask)];
        assert(x19723 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19724 = x19723 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19725 = x19722 + x19718;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19726 = x19725 - x19724;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19726 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19727 = arg2[186 * steps + ((cycle - 0) & mask)];
        assert(x19727 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19728 = arg2[218 * steps + ((cycle - 5) & mask)];
        assert(x19728 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19729 = x19728 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19730 = x19727 + x19723;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19731 = x19730 - x19729;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19731 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19732 = arg2[187 * steps + ((cycle - 0) & mask)];
        assert(x19732 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19733 = arg2[219 * steps + ((cycle - 5) & mask)];
        assert(x19733 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19734 = x19733 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19735 = x19732 + x19728;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19736 = x19735 - x19734;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19736 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19737 = arg2[188 * steps + ((cycle - 0) & mask)];
        assert(x19737 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19738 = arg2[220 * steps + ((cycle - 5) & mask)];
        assert(x19738 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19739 = x19738 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19740 = x19737 + x19733;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19741 = x19740 - x19739;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19741 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19742 = arg2[189 * steps + ((cycle - 0) & mask)];
        assert(x19742 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19743 = arg2[213 * steps + ((cycle - 4) & mask)];
        assert(x19743 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19744 = x19743 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19745 = x19742 + x19738;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19746 = x19745 - x19744;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19746 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19747 = arg2[190 * steps + ((cycle - 0) & mask)];
        assert(x19747 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19748 = arg2[214 * steps + ((cycle - 4) & mask)];
        assert(x19748 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19749 = x19748 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19750 = x19747 + x19743;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19751 = x19750 - x19749;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19751 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19752 = arg2[191 * steps + ((cycle - 0) & mask)];
        assert(x19752 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19753 = arg2[215 * steps + ((cycle - 4) & mask)];
        assert(x19753 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19754 = x19753 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19755 = x19752 + x19748;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19756 = x19755 - x19754;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19756 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19757 = arg2[192 * steps + ((cycle - 0) & mask)];
        assert(x19757 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19758 = arg2[216 * steps + ((cycle - 4) & mask)];
        assert(x19758 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19759 = x19758 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19760 = x19757 + x19753;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19761 = x19760 - x19759;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19761 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19762 = arg2[193 * steps + ((cycle - 0) & mask)];
        assert(x19762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19763 = arg2[217 * steps + ((cycle - 4) & mask)];
        assert(x19763 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19764 = x19763 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19765 = x19762 + x19758;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19766 = x19765 - x19764;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19766 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19767 = arg2[194 * steps + ((cycle - 0) & mask)];
        assert(x19767 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19768 = arg2[218 * steps + ((cycle - 4) & mask)];
        assert(x19768 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19769 = x19768 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19770 = x19767 + x19763;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19771 = x19770 - x19769;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19771 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19772 = arg2[195 * steps + ((cycle - 0) & mask)];
        assert(x19772 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19773 = arg2[219 * steps + ((cycle - 4) & mask)];
        assert(x19773 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19774 = x19773 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19775 = x19772 + x19768;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19776 = x19775 - x19774;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19776 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19777 = arg2[196 * steps + ((cycle - 0) & mask)];
        assert(x19777 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19778 = arg2[220 * steps + ((cycle - 4) & mask)];
        assert(x19778 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19779 = x19778 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19780 = x19777 + x19773;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19781 = x19780 - x19779;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19781 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19782 = arg2[197 * steps + ((cycle - 0) & mask)];
        assert(x19782 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19783 = arg2[213 * steps + ((cycle - 3) & mask)];
        assert(x19783 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19784 = x19783 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19785 = x19782 + x19778;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19786 = x19785 - x19784;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19786 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19787 = arg2[198 * steps + ((cycle - 0) & mask)];
        assert(x19787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19788 = arg2[214 * steps + ((cycle - 3) & mask)];
        assert(x19788 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19789 = x19788 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19790 = x19787 + x19783;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19791 = x19790 - x19789;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19791 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19792 = arg2[199 * steps + ((cycle - 0) & mask)];
        assert(x19792 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19793 = arg2[215 * steps + ((cycle - 3) & mask)];
        assert(x19793 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19794 = x19793 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19795 = x19792 + x19788;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19796 = x19795 - x19794;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19796 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19797 = arg2[200 * steps + ((cycle - 0) & mask)];
        assert(x19797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19798 = arg2[216 * steps + ((cycle - 3) & mask)];
        assert(x19798 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19799 = x19798 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19800 = x19797 + x19793;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19801 = x19800 - x19799;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19801 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19802 = arg2[201 * steps + ((cycle - 0) & mask)];
        assert(x19802 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19803 = arg2[217 * steps + ((cycle - 3) & mask)];
        assert(x19803 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19804 = x19803 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19805 = x19802 + x19798;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19806 = x19805 - x19804;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19806 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19807 = arg2[202 * steps + ((cycle - 0) & mask)];
        assert(x19807 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19808 = arg2[218 * steps + ((cycle - 3) & mask)];
        assert(x19808 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19809 = x19808 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19810 = x19807 + x19803;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19811 = x19810 - x19809;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19811 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19812 = arg2[203 * steps + ((cycle - 0) & mask)];
        assert(x19812 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19813 = arg2[219 * steps + ((cycle - 3) & mask)];
        assert(x19813 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19814 = x19813 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19815 = x19812 + x19808;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19816 = x19815 - x19814;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19816 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19817 = arg2[204 * steps + ((cycle - 0) & mask)];
        assert(x19817 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19818 = arg2[220 * steps + ((cycle - 3) & mask)];
        assert(x19818 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19819 = x19818 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19820 = x19817 + x19813;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19821 = x19820 - x19819;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19821 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19822 = arg2[205 * steps + ((cycle - 0) & mask)];
        assert(x19822 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19823 = arg2[213 * steps + ((cycle - 2) & mask)];
        assert(x19823 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19824 = x19823 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19825 = x19822 + x19818;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19826 = x19825 - x19824;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19826 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19827 = arg2[206 * steps + ((cycle - 0) & mask)];
        assert(x19827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19828 = arg2[214 * steps + ((cycle - 2) & mask)];
        assert(x19828 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19829 = x19828 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19830 = x19827 + x19823;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19831 = x19830 - x19829;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19831 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19832 = arg2[207 * steps + ((cycle - 0) & mask)];
        assert(x19832 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19833 = arg2[215 * steps + ((cycle - 2) & mask)];
        assert(x19833 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19834 = x19833 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19835 = x19832 + x19828;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19836 = x19835 - x19834;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19836 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19837 = arg2[208 * steps + ((cycle - 0) & mask)];
        assert(x19837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19838 = arg2[216 * steps + ((cycle - 2) & mask)];
        assert(x19838 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19839 = x19838 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19840 = x19837 + x19833;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19841 = x19840 - x19839;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19841 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19842 = arg2[209 * steps + ((cycle - 0) & mask)];
        assert(x19842 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19843 = arg2[217 * steps + ((cycle - 2) & mask)];
        assert(x19843 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19844 = x19843 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19845 = x19842 + x19838;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19846 = x19845 - x19844;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19846 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19847 = arg2[210 * steps + ((cycle - 0) & mask)];
        assert(x19847 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":416:64))
        auto x19848 = arg2[218 * steps + ((cycle - 2) & mask)];
        assert(x19848 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:26)
        auto x19849 = x19848 * x93;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19850 = x19847 + x19843;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19851 = x19850 - x19849;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19851 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":426:66))
        auto x19852 = arg2[211 * steps + ((cycle - 0) & mask)];
        assert(x19852 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        auto x19853 = x19852 + x19848;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":429:10)
        assert(x19853 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/bigint.cpp:429");
      }
      if (x13886 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x19854 = arg2[172 * steps + ((cycle - 0) & mask)];
        assert(x19854 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19855 = arg2[18 * steps + ((cycle - 0) & mask)];
        assert(x19855 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19856 = arg2[19 * steps + ((cycle - 0) & mask)];
        assert(x19856 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19857 = arg2[20 * steps + ((cycle - 0) & mask)];
        assert(x19857 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19858 = arg2[21 * steps + ((cycle - 0) & mask)];
        assert(x19858 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":439:34)
        auto x19859 = x13887 * x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":439:25)
        auto x19860 = x19854 + x19859;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19855);
          reg = x19855;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19856);
          reg = x19856;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19857);
          reg = x19857;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19858);
          reg = x19858;
        }
        {
          extern_args[0] = x19860;
          extern_args[1] = x19855;
          extern_args[2] = x19856;
          extern_args[3] = x19857;
          extern_args[4] = x19858;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19861 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x19861 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19862 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x19862 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19863 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x19863 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19864 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x19864 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19860);
          reg = x19860;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19861);
          reg = x19861;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19862);
          reg = x19862;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19863);
          reg = x19863;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19864);
          reg = x19864;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19865 = arg2[22 * steps + ((cycle - 0) & mask)];
        assert(x19865 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19866 = arg2[23 * steps + ((cycle - 0) & mask)];
        assert(x19866 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19867 = arg2[24 * steps + ((cycle - 0) & mask)];
        assert(x19867 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19868 = arg2[25 * steps + ((cycle - 0) & mask)];
        assert(x19868 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":439:25)
        auto x19869 = x19860 + x99;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19865);
          reg = x19865;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19866);
          reg = x19866;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19867);
          reg = x19867;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19868);
          reg = x19868;
        }
        {
          extern_args[0] = x19869;
          extern_args[1] = x19865;
          extern_args[2] = x19866;
          extern_args[3] = x19867;
          extern_args[4] = x19868;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19870 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x19870 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19871 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x19871 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19872 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x19872 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19873 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x19873 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19869);
          reg = x19869;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19870);
          reg = x19870;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19871);
          reg = x19871;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19872);
          reg = x19872;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19873);
          reg = x19873;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19874 = arg2[26 * steps + ((cycle - 0) & mask)];
        assert(x19874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19875 = arg2[27 * steps + ((cycle - 0) & mask)];
        assert(x19875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19876 = arg2[28 * steps + ((cycle - 0) & mask)];
        assert(x19876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19877 = arg2[29 * steps + ((cycle - 0) & mask)];
        assert(x19877 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":439:25)
        auto x19878 = x19860 + x96;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19874);
          reg = x19874;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19875);
          reg = x19875;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19876);
          reg = x19876;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19877);
          reg = x19877;
        }
        {
          extern_args[0] = x19878;
          extern_args[1] = x19874;
          extern_args[2] = x19875;
          extern_args[3] = x19876;
          extern_args[4] = x19877;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19879 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x19879 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19880 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x19880 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19881 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x19881 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19882 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x19882 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19878);
          reg = x19878;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19879);
          reg = x19879;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19880);
          reg = x19880;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19881);
          reg = x19881;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19882);
          reg = x19882;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19883 = arg2[30 * steps + ((cycle - 0) & mask)];
        assert(x19883 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19884 = arg2[31 * steps + ((cycle - 0) & mask)];
        assert(x19884 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19885 = arg2[32 * steps + ((cycle - 0) & mask)];
        assert(x19885 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19886 = arg2[33 * steps + ((cycle - 0) & mask)];
        assert(x19886 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":439:25)
        auto x19887 = x19860 + x79;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19883);
          reg = x19883;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19884);
          reg = x19884;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19885);
          reg = x19885;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19886);
          reg = x19886;
        }
        {
          extern_args[0] = x19887;
          extern_args[1] = x19883;
          extern_args[2] = x19884;
          extern_args[3] = x19885;
          extern_args[4] = x19886;
          extern_args[5] = x96;
          extern_ramWrite(ctx, cycle, "", extern_args, extern_outs);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19888 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x19888 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19889 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x19889 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19890 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x19890 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19891 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x19891 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = arg2[138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19887);
          reg = x19887;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = arg2[139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x961);
          reg = x961;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = arg2[140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19888);
          reg = x19888;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19889);
          reg = x19889;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19890);
          reg = x19890;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = arg2[144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19891);
          reg = x19891;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":446:10)
        auto x19892 = x19854 * x81;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19893 = x19862 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19894 = x19863 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19895 = x19864 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19896 = x19871 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19897 = x19872 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19898 = x19873 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19899 = x19880 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19900 = x19881 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19901 = x19882 * x82;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19902 = x19889 * x93;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19903 = x19890 * x80;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19904 = x19891 * x82;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19905 = x19861 + x19893;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19906 = x19870 + x19896;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19907 = x19879 + x19899;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19908 = x19888 + x19902;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19909 = x19905 + x19894;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19910 = x19906 + x19897;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19911 = x19907 + x19900;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19912 = x19908 + x19903;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19913 = x19909 + x19895;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19914 = x19910 + x19898;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19915 = x19911 + x19901;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19916 = x19912 + x19904;
        extern_args[0] = x19892;
        extern_args[1] = x19913;
        extern_args[2] = x19914;
        extern_args[3] = x19915;
        extern_args[4] = x19916;
        extern_log(ctx, cycle, "  Writing: ioAddr = 0x%x, data = { %u, %u, %u, %u }", extern_args, extern_outs);
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":454:18)
      auto x19917 = x99 - x13894;
      if (x19917 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x19918 = x975 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19919 = Fp(x19918.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19919);
            reg = x19919;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19920 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x19920 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19921 = x19918 - x19920;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19922 = x19921 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19923 = Fp(x19922.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19923);
            reg = x19923;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19924 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x19924 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19925 = x19922 - x19924;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19926 = x19925 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19927 = Fp(x19926.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19927);
            reg = x19927;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19928 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x19928 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19929 = x19926 - x19928;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19930 = x19929 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x19931 = Fp(x19930.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19931);
            reg = x19931;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19932 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x19932 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x19933 = x19930 - x19932;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x19934 = x19933 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19934);
          reg = x19934;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19935 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x19935 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x19936 = x99 - x19935;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x19937 = x19935 * x19936;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19937);
          reg = x19937;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x19938 = x96 - x19935;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x19939 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x19939 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x19940 = x19939 * x19938;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x19940 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":456:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
      }
      if (x13894 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":459:19)
        auto x19941 = x975 + x81;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
        auto x19942 = x19941 + x81;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19943 = Fp(x19942.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19943);
            reg = x19943;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19944 = arg2[6 * steps + ((cycle - 0) & mask)];
        assert(x19944 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19945 = x19942 - x19944;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19946 = x19945 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19947 = Fp(x19946.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19947);
            reg = x19947;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19948 = arg2[7 * steps + ((cycle - 0) & mask)];
        assert(x19948 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19949 = x19946 - x19948;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19950 = x19949 * x94;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19951 = Fp(x19950.asUInt32() & x95.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = arg2[8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19951);
            reg = x19951;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19952 = arg2[8 * steps + ((cycle - 0) & mask)];
        assert(x19952 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19953 = x19950 - x19952;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19954 = x19953 * x94;
        {
          // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
          auto x19955 = Fp(x19954.asUInt32() & x79.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = arg2[70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19955);
            reg = x19955;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19956 = arg2[70 * steps + ((cycle - 0) & mask)];
        assert(x19956 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
        auto x19957 = x19954 - x19956;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
        auto x19958 = x19957 * x78;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19958);
          reg = x19958;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19959 = arg2[71 * steps + ((cycle - 0) & mask)];
        assert(x19959 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
        auto x19960 = x99 - x19959;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
        auto x19961 = x19959 * x19960;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
        {
          auto& reg = arg2[98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19961);
          reg = x19961;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
        auto x19962 = x96 - x19959;
        // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
        auto x19963 = arg2[98 * steps + ((cycle - 0) & mask)];
        assert(x19963 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        auto x19964 = x19963 * x19962;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
        assert(x19964 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
        // loc("zirgen/circuit/rv32im/v1/edsl/bigint.cpp":460:5)
        {
          auto& reg = arg2[100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19965 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x19965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19966 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x19966 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x19967 = x19965 * x19966;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:26)
      auto x19968 = x99 - x19966;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x19969 = x19967 * x19968;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x19969 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("./zirgen/components/mux.h":49:25))
    auto x19970 = arg2[116 * steps + ((cycle - 0) & mask)];
    assert(x19970 != Fp::invalid());
    if (x19970 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19971 = arg2[99 * steps + ((cycle - 1) & mask)];
      assert(x19971 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = arg2[99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19971);
        reg = x19971;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/next_major(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":160:37))
      auto x19972 = arg2[100 * steps + ((cycle - 1) & mask)];
      assert(x19972 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":160:37)
      auto x19973 = x19972 - x71;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":160:37)
      assert(x19973 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:160");
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":161:63))
      auto x19974 = arg2[116 * steps + ((cycle - 1) & mask)];
      assert(x19974 != Fp::invalid());
      if (x19974 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/sys_exit_code(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":163:48))
        auto x19975 = arg2[117 * steps + ((cycle - 1) & mask)];
        assert(x19975 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":163:5)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19975);
          reg = x19975;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/user_exit_code(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":164:50))
        auto x19976 = arg2[118 * steps + ((cycle - 1) & mask)];
        assert(x19976 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":164:5)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19976);
          reg = x19976;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/halt(HaltCycle)/write_addr(Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":165:44))
        auto x19977 = arg2[119 * steps + ((cycle - 1) & mask)];
        assert(x19977 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":165:5)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19977);
          reg = x19977;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[8](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":168:69))
      auto x19978 = arg2[109 * steps + ((cycle - 1) & mask)];
      assert(x19978 != Fp::invalid());
      if (x19978 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":171:75))
        auto x19979 = arg2[188 * steps + ((cycle - 1) & mask)];
        assert(x19979 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":172:8)
        auto x19980 = x99 - x19979;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":172:8)
        assert(x19980 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:172");
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/Mux/0(ECallHalt)/Reg"("zirgen/circuit/rv32im/v1/edsl/body.cpp":176:55))
        auto x19981 = arg2[196 * steps + ((cycle - 1) & mask)];
        assert(x19981 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19982 = arg2[134 * steps + ((cycle - 1) & mask)];
        assert(x19982 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19983 = arg2[135 * steps + ((cycle - 1) & mask)];
        assert(x19983 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":176:5)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19981);
          reg = x19981;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":177:5)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19982);
          reg = x19982;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":178:5)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19983);
          reg = x19983;
        }
        extern_args[0] = x19982;
        extern_log(ctx, cycle, "isFromEcall, set sysExitCode: %u", extern_args, extern_outs);
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":180:5)
        arg1[104] = x19982;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":181:5)
        arg1[105] = x19983;
        {
          extern_args[0] = x19982;
          extern_args[1] = x975;
          extern_halt(ctx, cycle, "", extern_args, extern_outs);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[12](Reg)"("zirgen/circuit/rv32im/v1/edsl/body.cpp":187:77))
      auto x19984 = arg2[113 * steps + ((cycle - 1) & mask)];
      assert(x19984 != Fp::invalid());
      if (x19984 != 0) {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":189:5)
        {
          auto& reg = arg2[117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":190:5)
        {
          auto& reg = arg2[118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":191:5)
        {
          auto& reg = arg2[119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x0);
          reg = x0;
        }
        extern_args[0] = x96;
        extern_log(ctx, cycle, "isFromPageFault, set sysExitCode: %u", extern_args, extern_outs);
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":193:5)
        arg1[104] = x96;
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":194:5)
        arg1[105] = x98;
        {
          extern_args[0] = x96;
          extern_args[1] = x975;
          extern_halt(ctx, cycle, "", extern_args, extern_outs);
        }
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":24:23)
      auto x19985 = x975 + x81;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19986 = Fp(x19985.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19986);
          reg = x19986;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19987 = arg2[6 * steps + ((cycle - 0) & mask)];
      assert(x19987 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19988 = x19985 - x19987;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19989 = x19988 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19990 = Fp(x19989.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19990);
          reg = x19990;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19991 = arg2[7 * steps + ((cycle - 0) & mask)];
      assert(x19991 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19992 = x19989 - x19991;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19993 = x19992 * x94;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19994 = Fp(x19993.asUInt32() & x95.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = arg2[8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19994);
          reg = x19994;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19995 = arg2[8 * steps + ((cycle - 0) & mask)];
      assert(x19995 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19996 = x19993 - x19995;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19997 = x19996 * x94;
      {
        // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":27:26)
        auto x19998 = Fp(x19997.asUInt32() & x79.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = arg2[70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19998);
          reg = x19998;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[0](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19999 = arg2[70 * steps + ((cycle - 0) & mask)];
      assert(x19999 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:18)
      auto x20000 = x19997 - x19999;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":28:17)
      auto x20001 = x20000 * x78;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x20001);
        reg = x20001;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/twits[1](Twit)/twit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20002 = arg2[71 * steps + ((cycle - 0) & mask)];
      assert(x20002 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:23)
      auto x20003 = x99 - x20002;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:15)
      auto x20004 = x20002 * x20003;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":32:3)
      {
        auto& reg = arg2[98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x20004);
        reg = x20004;
      }
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:17)
      auto x20005 = x96 - x20002;
      // loc("Top/mux(Mux)/body(BodyStep)/pc(PCReg)/Reg"("./zirgen/compiler/edsl/edsl.h":118:61))
      auto x20006 = arg2[98 * steps + ((cycle - 0) & mask)];
      assert(x20006 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      auto x20007 = x20006 * x20005;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":33:7)
      assert(x20007 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:33");
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":201:3)
      {
        auto& reg = arg2[100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x71);
        reg = x71;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/user_mode(Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20008 = arg2[99 * steps + ((cycle - 0) & mask)];
      assert(x20008 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x20009 = x20008 * x20002;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      auto x20010 = x20009 * x20003;
      // loc("zirgen/circuit/rv32im/v1/edsl/body.cpp":50:7)
      assert(x20010 == 0 && "eqz failed at: zirgen/circuit/rv32im/v1/edsl/body.cpp:50");
    }
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:25))
  auto x20011 = arg0[7 * steps + ((cycle - 0) & mask)];
  assert(x20011 != Fp::invalid());
  if (x20011 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x20012 = arg0[0 * steps + ((cycle - 0) & mask)];
    assert(x20012 != Fp::invalid());
    extern_args[0] = x20012;
    extern_log(ctx, cycle, "%u: RamFini", extern_args, extern_outs);
  }
  // loc("Top/Code/OneHot/hot[7](Reg)"("./zirgen/components/mux.h":49:25))
  auto x20013 = arg0[8 * steps + ((cycle - 0) & mask)];
  assert(x20013 != Fp::invalid());
  if (x20013 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x20014 = arg0[0 * steps + ((cycle - 0) & mask)];
    assert(x20014 != Fp::invalid());
    extern_args[0] = x20014;
    extern_log(ctx, cycle, "%u: BytesFini", extern_args, extern_outs);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:27))
  auto x20015 = arg0[1 * steps + ((cycle - 0) & mask)];
  assert(x20015 != Fp::invalid());
  // loc("Top/Code/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:27))
  auto x20016 = arg0[3 * steps + ((cycle - 0) & mask)];
  assert(x20016 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20017 = x20015 + x100;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20018 = x20017 + x20016;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20019 = x20018 + x425;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20020 = x20019 + x478;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20021 = x20020 + x960;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20022 = x20021 + x20011;
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":84:16)
  auto x20023 = x20022 + x20013;
  if (x960 != 0) {
    // loc("Top/mux(Mux)/body(BodyStep)/major_select(OneHot)/hot[15](Reg)"("zirgen/circuit/rv32im/v1/edsl/top.cpp":92:18))
    auto x20024 = arg2[116 * steps + ((cycle - 0) & mask)];
    assert(x20024 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":93:5)
    {
      auto& reg = arg2[2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x20024);
      reg = x20024;
    }
  }
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":95:23)
  auto x20025 = x20023 - x960;
  if (x20025 != 0) {
    // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":95:27)
    {
      auto& reg = arg2[2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x98);
      reg = x98;
    }
  }
  // loc("Top/halted(Reg)"("./zirgen/compiler/edsl/edsl.h":118:61))
  auto x20026 = arg2[2 * steps + ((cycle - 0) & mask)];
  assert(x20026 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/v1/edsl/top.cpp":96:10)
  auto x20027 = x99 - x20026;
  if (x20016 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
  }
  if (x425 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/ram.cpp":43:3)
      {
        auto& reg = arg2[135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/ram.cpp":44:3)
      {
        auto& reg = arg2[136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/ram.cpp":45:3)
      {
        auto& reg = arg2[137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x99);
        reg = x99;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = arg2[138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = arg2[139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = arg2[140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = arg2[141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
  }
  if (x478 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
  }
  if (x960 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20028 = arg2[101 * steps + ((cycle - 0) & mask)];
    assert(x20028 != Fp::invalid());
    if (x20028 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20029 = arg2[102 * steps + ((cycle - 0) & mask)];
    assert(x20029 != Fp::invalid());
    if (x20029 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20030 = arg2[103 * steps + ((cycle - 0) & mask)];
    assert(x20030 != Fp::invalid());
    if (x20030 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20031 = arg2[104 * steps + ((cycle - 0) & mask)];
    assert(x20031 != Fp::invalid());
    if (x20031 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20032 = arg2[105 * steps + ((cycle - 0) & mask)];
    assert(x20032 != Fp::invalid());
    if (x20032 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20033 = arg2[106 * steps + ((cycle - 0) & mask)];
    assert(x20033 != Fp::invalid());
    if (x20033 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20034 = arg2[107 * steps + ((cycle - 0) & mask)];
    assert(x20034 != Fp::invalid());
    if (x20034 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20035 = arg2[108 * steps + ((cycle - 0) & mask)];
    assert(x20035 != Fp::invalid());
    if (x20035 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20036 = arg2[109 * steps + ((cycle - 0) & mask)];
    assert(x20036 != Fp::invalid());
    if (x20036 != 0) {
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20037 = arg2[188 * steps + ((cycle - 0) & mask)];
      assert(x20037 != Fp::invalid());
      if (x20037 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20038 = arg2[189 * steps + ((cycle - 0) & mask)];
      assert(x20038 != Fp::invalid());
      if (x20038 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20039 = arg2[190 * steps + ((cycle - 0) & mask)];
      assert(x20039 != Fp::invalid());
      if (x20039 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20040 = arg2[191 * steps + ((cycle - 0) & mask)];
      assert(x20040 != Fp::invalid());
      if (x20040 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20041 = arg2[192 * steps + ((cycle - 0) & mask)];
      assert(x20041 != Fp::invalid());
      if (x20041 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20042 = arg2[193 * steps + ((cycle - 0) & mask)];
      assert(x20042 != Fp::invalid());
      if (x20042 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x20043 = arg2[194 * steps + ((cycle - 0) & mask)];
      assert(x20043 != Fp::invalid());
      if (x20043 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = arg2[36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = arg2[145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = arg2[146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = arg2[147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = arg2[151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = arg2[88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x98);
            reg = x98;
          }
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20044 = arg2[110 * steps + ((cycle - 0) & mask)];
    assert(x20044 != Fp::invalid());
    if (x20044 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20045 = arg2[111 * steps + ((cycle - 0) & mask)];
    assert(x20045 != Fp::invalid());
    if (x20045 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20046 = arg2[112 * steps + ((cycle - 0) & mask)];
    assert(x20046 != Fp::invalid());
    if (x20046 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20047 = arg2[113 * steps + ((cycle - 0) & mask)];
    assert(x20047 != Fp::invalid());
    if (x20047 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20048 = arg2[114 * steps + ((cycle - 0) & mask)];
    assert(x20048 != Fp::invalid());
    if (x20048 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20049 = arg2[115 * steps + ((cycle - 0) & mask)];
    assert(x20049 != Fp::invalid());
    if (x20049 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20050 = arg2[116 * steps + ((cycle - 0) & mask)];
    assert(x20050 != Fp::invalid());
    if (x20050 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = arg2[36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = arg2[88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x98);
          reg = x98;
        }
      }
    }
  }
  if (x20011 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = arg2[36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = arg2[88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x98);
        reg = x98;
      }
    }
  }
  if (x425 != 0) {
    {
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20051 = arg2[114 * steps + ((cycle - 0) & mask)];
      assert(x20051 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20052 = arg2[115 * steps + ((cycle - 0) & mask)];
      assert(x20052 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20053 = arg2[116 * steps + ((cycle - 0) & mask)];
      assert(x20053 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20054 = arg2[117 * steps + ((cycle - 0) & mask)];
      assert(x20054 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20055 = arg2[118 * steps + ((cycle - 0) & mask)];
      assert(x20055 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20056 = arg2[119 * steps + ((cycle - 0) & mask)];
      assert(x20056 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20057 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x20057 != Fp::invalid());
      extern_args[0] = x20051;
      extern_args[1] = x20052;
      extern_args[2] = x20053;
      extern_args[3] = x20054;
      extern_args[4] = x20055;
      extern_args[5] = x20056;
      extern_args[6] = x20057;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20058 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x20058 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20059 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x20059 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20060 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x20060 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20061 = arg2[124 * steps + ((cycle - 0) & mask)];
      assert(x20061 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20062 = arg2[125 * steps + ((cycle - 0) & mask)];
      assert(x20062 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20063 = arg2[126 * steps + ((cycle - 0) & mask)];
      assert(x20063 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20064 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x20064 != Fp::invalid());
      extern_args[0] = x20058;
      extern_args[1] = x20059;
      extern_args[2] = x20060;
      extern_args[3] = x20061;
      extern_args[4] = x20062;
      extern_args[5] = x20063;
      extern_args[6] = x20064;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20065 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x20065 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20066 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x20066 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20067 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x20067 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20068 = arg2[131 * steps + ((cycle - 0) & mask)];
      assert(x20068 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20069 = arg2[132 * steps + ((cycle - 0) & mask)];
      assert(x20069 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20070 = arg2[133 * steps + ((cycle - 0) & mask)];
      assert(x20070 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20071 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x20071 != Fp::invalid());
      extern_args[0] = x20065;
      extern_args[1] = x20066;
      extern_args[2] = x20067;
      extern_args[3] = x20068;
      extern_args[4] = x20069;
      extern_args[5] = x20070;
      extern_args[6] = x20071;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20072 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x20072 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20073 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x20073 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20074 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x20074 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20075 = arg2[138 * steps + ((cycle - 0) & mask)];
      assert(x20075 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20076 = arg2[139 * steps + ((cycle - 0) & mask)];
      assert(x20076 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20077 = arg2[140 * steps + ((cycle - 0) & mask)];
      assert(x20077 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20078 = arg2[141 * steps + ((cycle - 0) & mask)];
      assert(x20078 != Fp::invalid());
      extern_args[0] = x20072;
      extern_args[1] = x20073;
      extern_args[2] = x20074;
      extern_args[3] = x20075;
      extern_args[4] = x20076;
      extern_args[5] = x20077;
      extern_args[6] = x20078;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
    }
  }
  if (x478 != 0) {
    {
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20079 = arg2[117 * steps + ((cycle - 0) & mask)];
      assert(x20079 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20080 = arg2[118 * steps + ((cycle - 0) & mask)];
      assert(x20080 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20081 = arg2[119 * steps + ((cycle - 0) & mask)];
      assert(x20081 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20082 = arg2[120 * steps + ((cycle - 0) & mask)];
      assert(x20082 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20083 = arg2[121 * steps + ((cycle - 0) & mask)];
      assert(x20083 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20084 = arg2[122 * steps + ((cycle - 0) & mask)];
      assert(x20084 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20085 = arg2[123 * steps + ((cycle - 0) & mask)];
      assert(x20085 != Fp::invalid());
      extern_args[0] = x20079;
      extern_args[1] = x20080;
      extern_args[2] = x20081;
      extern_args[3] = x20082;
      extern_args[4] = x20083;
      extern_args[5] = x20084;
      extern_args[6] = x20085;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20086 = arg2[124 * steps + ((cycle - 0) & mask)];
      assert(x20086 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20087 = arg2[125 * steps + ((cycle - 0) & mask)];
      assert(x20087 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20088 = arg2[126 * steps + ((cycle - 0) & mask)];
      assert(x20088 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20089 = arg2[127 * steps + ((cycle - 0) & mask)];
      assert(x20089 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20090 = arg2[128 * steps + ((cycle - 0) & mask)];
      assert(x20090 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20091 = arg2[129 * steps + ((cycle - 0) & mask)];
      assert(x20091 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20092 = arg2[130 * steps + ((cycle - 0) & mask)];
      assert(x20092 != Fp::invalid());
      extern_args[0] = x20086;
      extern_args[1] = x20087;
      extern_args[2] = x20088;
      extern_args[3] = x20089;
      extern_args[4] = x20090;
      extern_args[5] = x20091;
      extern_args[6] = x20092;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20093 = arg2[131 * steps + ((cycle - 0) & mask)];
      assert(x20093 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20094 = arg2[132 * steps + ((cycle - 0) & mask)];
      assert(x20094 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20095 = arg2[133 * steps + ((cycle - 0) & mask)];
      assert(x20095 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20096 = arg2[134 * steps + ((cycle - 0) & mask)];
      assert(x20096 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20097 = arg2[135 * steps + ((cycle - 0) & mask)];
      assert(x20097 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20098 = arg2[136 * steps + ((cycle - 0) & mask)];
      assert(x20098 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20099 = arg2[137 * steps + ((cycle - 0) & mask)];
      assert(x20099 != Fp::invalid());
      extern_args[0] = x20093;
      extern_args[1] = x20094;
      extern_args[2] = x20095;
      extern_args[3] = x20096;
      extern_args[4] = x20097;
      extern_args[5] = x20098;
      extern_args[6] = x20099;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20100 = arg2[138 * steps + ((cycle - 0) & mask)];
      assert(x20100 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20101 = arg2[139 * steps + ((cycle - 0) & mask)];
      assert(x20101 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20102 = arg2[140 * steps + ((cycle - 0) & mask)];
      assert(x20102 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20103 = arg2[141 * steps + ((cycle - 0) & mask)];
      assert(x20103 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20104 = arg2[142 * steps + ((cycle - 0) & mask)];
      assert(x20104 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20105 = arg2[143 * steps + ((cycle - 0) & mask)];
      assert(x20105 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x20106 = arg2[144 * steps + ((cycle - 0) & mask)];
      assert(x20106 != Fp::invalid());
      extern_args[0] = x20100;
      extern_args[1] = x20101;
      extern_args[2] = x20102;
      extern_args[3] = x20103;
      extern_args[4] = x20104;
      extern_args[5] = x20105;
      extern_args[6] = x20106;
      extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
    }
  }
  if (x960 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20107 = arg2[101 * steps + ((cycle - 0) & mask)];
    assert(x20107 != Fp::invalid());
    if (x20107 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20108 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20108 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20109 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20109 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20110 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20110 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20111 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20111 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20112 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20112 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20113 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20113 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20114 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20114 != Fp::invalid());
        extern_args[0] = x20108;
        extern_args[1] = x20109;
        extern_args[2] = x20110;
        extern_args[3] = x20111;
        extern_args[4] = x20112;
        extern_args[5] = x20113;
        extern_args[6] = x20114;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20115 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20115 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20116 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20116 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20117 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20117 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20118 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20118 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20119 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20119 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20120 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20120 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20121 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20121 != Fp::invalid());
        extern_args[0] = x20115;
        extern_args[1] = x20116;
        extern_args[2] = x20117;
        extern_args[3] = x20118;
        extern_args[4] = x20119;
        extern_args[5] = x20120;
        extern_args[6] = x20121;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20122 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20122 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20123 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20123 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20124 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20124 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20125 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20125 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20126 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20126 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20127 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20127 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20128 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20128 != Fp::invalid());
        extern_args[0] = x20122;
        extern_args[1] = x20123;
        extern_args[2] = x20124;
        extern_args[3] = x20125;
        extern_args[4] = x20126;
        extern_args[5] = x20127;
        extern_args[6] = x20128;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20129 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20129 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20130 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20130 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20131 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20131 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20132 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20133 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20133 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20134 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20134 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20135 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20135 != Fp::invalid());
        extern_args[0] = x20129;
        extern_args[1] = x20130;
        extern_args[2] = x20131;
        extern_args[3] = x20132;
        extern_args[4] = x20133;
        extern_args[5] = x20134;
        extern_args[6] = x20135;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20136 = arg2[102 * steps + ((cycle - 0) & mask)];
    assert(x20136 != Fp::invalid());
    if (x20136 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20137 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20137 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20138 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20138 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20139 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20139 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20140 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20140 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20141 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20141 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20142 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20142 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20143 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20143 != Fp::invalid());
        extern_args[0] = x20137;
        extern_args[1] = x20138;
        extern_args[2] = x20139;
        extern_args[3] = x20140;
        extern_args[4] = x20141;
        extern_args[5] = x20142;
        extern_args[6] = x20143;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20144 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20144 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20145 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20145 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20146 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20146 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20147 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20147 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20148 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20148 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20149 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20149 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20150 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20150 != Fp::invalid());
        extern_args[0] = x20144;
        extern_args[1] = x20145;
        extern_args[2] = x20146;
        extern_args[3] = x20147;
        extern_args[4] = x20148;
        extern_args[5] = x20149;
        extern_args[6] = x20150;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20151 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20151 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20152 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20152 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20153 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20153 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20154 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20154 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20155 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20155 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20156 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20156 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20157 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20157 != Fp::invalid());
        extern_args[0] = x20151;
        extern_args[1] = x20152;
        extern_args[2] = x20153;
        extern_args[3] = x20154;
        extern_args[4] = x20155;
        extern_args[5] = x20156;
        extern_args[6] = x20157;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20158 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20158 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20159 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20159 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20160 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20160 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20161 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20161 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20162 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20162 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20163 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20163 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20164 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20164 != Fp::invalid());
        extern_args[0] = x20158;
        extern_args[1] = x20159;
        extern_args[2] = x20160;
        extern_args[3] = x20161;
        extern_args[4] = x20162;
        extern_args[5] = x20163;
        extern_args[6] = x20164;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20165 = arg2[103 * steps + ((cycle - 0) & mask)];
    assert(x20165 != Fp::invalid());
    if (x20165 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20166 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20166 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20167 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20167 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20168 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20168 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20169 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20169 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20170 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20170 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20171 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20171 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20172 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20172 != Fp::invalid());
        extern_args[0] = x20166;
        extern_args[1] = x20167;
        extern_args[2] = x20168;
        extern_args[3] = x20169;
        extern_args[4] = x20170;
        extern_args[5] = x20171;
        extern_args[6] = x20172;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20173 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20173 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20174 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20174 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20175 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20175 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20176 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20176 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20177 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20177 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20178 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20178 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20179 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20179 != Fp::invalid());
        extern_args[0] = x20173;
        extern_args[1] = x20174;
        extern_args[2] = x20175;
        extern_args[3] = x20176;
        extern_args[4] = x20177;
        extern_args[5] = x20178;
        extern_args[6] = x20179;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20180 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20180 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20181 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20181 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20182 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20182 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20183 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20183 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20184 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20184 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20185 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20185 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20186 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20186 != Fp::invalid());
        extern_args[0] = x20180;
        extern_args[1] = x20181;
        extern_args[2] = x20182;
        extern_args[3] = x20183;
        extern_args[4] = x20184;
        extern_args[5] = x20185;
        extern_args[6] = x20186;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20187 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20187 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20188 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20188 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20189 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20189 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20190 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20190 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20191 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20191 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20192 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20192 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/compute2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20193 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20193 != Fp::invalid());
        extern_args[0] = x20187;
        extern_args[1] = x20188;
        extern_args[2] = x20189;
        extern_args[3] = x20190;
        extern_args[4] = x20191;
        extern_args[5] = x20192;
        extern_args[6] = x20193;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20194 = arg2[104 * steps + ((cycle - 0) & mask)];
    assert(x20194 != Fp::invalid());
    if (x20194 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20195 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20195 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20196 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20196 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20197 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20197 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20198 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20198 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20199 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20199 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20200 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20200 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20201 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20201 != Fp::invalid());
        extern_args[0] = x20195;
        extern_args[1] = x20196;
        extern_args[2] = x20197;
        extern_args[3] = x20198;
        extern_args[4] = x20199;
        extern_args[5] = x20200;
        extern_args[6] = x20201;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20202 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20202 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20203 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20203 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20204 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20204 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20205 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20205 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20206 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20206 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20207 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20207 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20208 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20208 != Fp::invalid());
        extern_args[0] = x20202;
        extern_args[1] = x20203;
        extern_args[2] = x20204;
        extern_args[3] = x20205;
        extern_args[4] = x20206;
        extern_args[5] = x20207;
        extern_args[6] = x20208;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20209 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20209 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20210 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20210 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20211 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20211 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20212 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20212 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20213 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20213 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20214 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20214 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20215 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20215 != Fp::invalid());
        extern_args[0] = x20209;
        extern_args[1] = x20210;
        extern_args[2] = x20211;
        extern_args[3] = x20212;
        extern_args[4] = x20213;
        extern_args[5] = x20214;
        extern_args[6] = x20215;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20216 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20216 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20217 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20217 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20218 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20218 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20219 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20219 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20220 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20220 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20221 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20221 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20222 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20222 != Fp::invalid());
        extern_args[0] = x20216;
        extern_args[1] = x20217;
        extern_args[2] = x20218;
        extern_args[3] = x20219;
        extern_args[4] = x20220;
        extern_args[5] = x20221;
        extern_args[6] = x20222;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20223 = arg2[145 * steps + ((cycle - 0) & mask)];
        assert(x20223 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20224 = arg2[146 * steps + ((cycle - 0) & mask)];
        assert(x20224 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20225 = arg2[147 * steps + ((cycle - 0) & mask)];
        assert(x20225 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20226 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x20226 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20227 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x20227 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20228 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x20228 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/mem_io(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20229 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x20229 != Fp::invalid());
        extern_args[0] = x20223;
        extern_args[1] = x20224;
        extern_args[2] = x20225;
        extern_args[3] = x20226;
        extern_args[4] = x20227;
        extern_args[5] = x20228;
        extern_args[6] = x20229;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20230 = arg2[105 * steps + ((cycle - 0) & mask)];
    assert(x20230 != Fp::invalid());
    if (x20230 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20231 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20231 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20232 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20232 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20233 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20233 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20234 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20234 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20235 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20235 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20236 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20236 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20237 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20237 != Fp::invalid());
        extern_args[0] = x20231;
        extern_args[1] = x20232;
        extern_args[2] = x20233;
        extern_args[3] = x20234;
        extern_args[4] = x20235;
        extern_args[5] = x20236;
        extern_args[6] = x20237;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20238 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20238 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20239 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20239 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20240 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20240 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20241 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20241 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20242 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20242 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20243 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20243 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20244 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20244 != Fp::invalid());
        extern_args[0] = x20238;
        extern_args[1] = x20239;
        extern_args[2] = x20240;
        extern_args[3] = x20241;
        extern_args[4] = x20242;
        extern_args[5] = x20243;
        extern_args[6] = x20244;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20245 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20245 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20246 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20246 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20247 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20247 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20248 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20248 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20249 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20249 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20250 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20250 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20251 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20251 != Fp::invalid());
        extern_args[0] = x20245;
        extern_args[1] = x20246;
        extern_args[2] = x20247;
        extern_args[3] = x20248;
        extern_args[4] = x20249;
        extern_args[5] = x20250;
        extern_args[6] = x20251;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20252 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20252 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20253 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20253 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20254 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20254 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20255 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20255 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20256 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20256 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20257 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20257 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/multiply(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20258 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20258 != Fp::invalid());
        extern_args[0] = x20252;
        extern_args[1] = x20253;
        extern_args[2] = x20254;
        extern_args[3] = x20255;
        extern_args[4] = x20256;
        extern_args[5] = x20257;
        extern_args[6] = x20258;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20259 = arg2[106 * steps + ((cycle - 0) & mask)];
    assert(x20259 != Fp::invalid());
    if (x20259 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20260 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20260 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20261 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20261 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20262 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20262 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20263 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20263 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20264 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20264 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20265 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20265 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20266 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20266 != Fp::invalid());
        extern_args[0] = x20260;
        extern_args[1] = x20261;
        extern_args[2] = x20262;
        extern_args[3] = x20263;
        extern_args[4] = x20264;
        extern_args[5] = x20265;
        extern_args[6] = x20266;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20267 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20267 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20268 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20268 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20269 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20269 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20270 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20270 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20271 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20271 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20272 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20272 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20273 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20273 != Fp::invalid());
        extern_args[0] = x20267;
        extern_args[1] = x20268;
        extern_args[2] = x20269;
        extern_args[3] = x20270;
        extern_args[4] = x20271;
        extern_args[5] = x20272;
        extern_args[6] = x20273;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20274 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20274 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20275 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20275 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20276 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20276 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20277 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20277 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20278 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20278 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20279 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20279 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20280 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20280 != Fp::invalid());
        extern_args[0] = x20274;
        extern_args[1] = x20275;
        extern_args[2] = x20276;
        extern_args[3] = x20277;
        extern_args[4] = x20278;
        extern_args[5] = x20279;
        extern_args[6] = x20280;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20281 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20281 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20282 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20282 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20283 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20283 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20284 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20284 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20285 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20285 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20286 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20286 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/divide(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20287 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20287 != Fp::invalid());
        extern_args[0] = x20281;
        extern_args[1] = x20282;
        extern_args[2] = x20283;
        extern_args[3] = x20284;
        extern_args[4] = x20285;
        extern_args[5] = x20286;
        extern_args[6] = x20287;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20288 = arg2[109 * steps + ((cycle - 0) & mask)];
    assert(x20288 != Fp::invalid());
    if (x20288 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20289 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20289 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20290 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20290 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20291 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20291 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20292 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20292 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20293 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20293 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20294 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20294 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20295 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20295 != Fp::invalid());
        extern_args[0] = x20289;
        extern_args[1] = x20290;
        extern_args[2] = x20291;
        extern_args[3] = x20292;
        extern_args[4] = x20293;
        extern_args[5] = x20294;
        extern_args[6] = x20295;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20296 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20296 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20297 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20297 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20298 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20298 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20299 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20299 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20300 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20300 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20301 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20301 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20302 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20302 != Fp::invalid());
        extern_args[0] = x20296;
        extern_args[1] = x20297;
        extern_args[2] = x20298;
        extern_args[3] = x20299;
        extern_args[4] = x20300;
        extern_args[5] = x20301;
        extern_args[6] = x20302;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20303 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20303 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20304 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20304 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20305 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20305 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20306 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20306 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20307 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20307 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20308 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20309 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20309 != Fp::invalid());
        extern_args[0] = x20303;
        extern_args[1] = x20304;
        extern_args[2] = x20305;
        extern_args[3] = x20306;
        extern_args[4] = x20307;
        extern_args[5] = x20308;
        extern_args[6] = x20309;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20310 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20310 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20311 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20311 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20312 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20312 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20313 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20313 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20314 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20314 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20315 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20315 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20316 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20316 != Fp::invalid());
        extern_args[0] = x20310;
        extern_args[1] = x20311;
        extern_args[2] = x20312;
        extern_args[3] = x20313;
        extern_args[4] = x20314;
        extern_args[5] = x20315;
        extern_args[6] = x20316;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20317 = arg2[145 * steps + ((cycle - 0) & mask)];
        assert(x20317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20318 = arg2[146 * steps + ((cycle - 0) & mask)];
        assert(x20318 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20319 = arg2[147 * steps + ((cycle - 0) & mask)];
        assert(x20319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20320 = arg2[148 * steps + ((cycle - 0) & mask)];
        assert(x20320 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20321 = arg2[149 * steps + ((cycle - 0) & mask)];
        assert(x20321 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20322 = arg2[150 * steps + ((cycle - 0) & mask)];
        assert(x20322 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20323 = arg2[151 * steps + ((cycle - 0) & mask)];
        assert(x20323 != Fp::invalid());
        extern_args[0] = x20317;
        extern_args[1] = x20318;
        extern_args[2] = x20319;
        extern_args[3] = x20320;
        extern_args[4] = x20321;
        extern_args[5] = x20322;
        extern_args[6] = x20323;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20324 = arg2[110 * steps + ((cycle - 0) & mask)];
    assert(x20324 != Fp::invalid());
    if (x20324 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20325 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20325 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20326 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20326 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20327 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20327 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20328 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20328 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20329 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20329 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20330 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20330 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20331 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20331 != Fp::invalid());
        extern_args[0] = x20325;
        extern_args[1] = x20326;
        extern_args[2] = x20327;
        extern_args[3] = x20328;
        extern_args[4] = x20329;
        extern_args[5] = x20330;
        extern_args[6] = x20331;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20332 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20333 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20333 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20334 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20334 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20335 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20335 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20336 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20337 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_init(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20338 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20338 != Fp::invalid());
        extern_args[0] = x20332;
        extern_args[1] = x20333;
        extern_args[2] = x20334;
        extern_args[3] = x20335;
        extern_args[4] = x20336;
        extern_args[5] = x20337;
        extern_args[6] = x20338;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20339 = arg2[111 * steps + ((cycle - 0) & mask)];
    assert(x20339 != Fp::invalid());
    if (x20339 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20340 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20340 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20341 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20341 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20342 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20342 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20343 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20343 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20344 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20344 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20345 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20345 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20346 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20346 != Fp::invalid());
        extern_args[0] = x20340;
        extern_args[1] = x20341;
        extern_args[2] = x20342;
        extern_args[3] = x20343;
        extern_args[4] = x20344;
        extern_args[5] = x20345;
        extern_args[6] = x20346;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20347 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20347 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20348 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20348 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20349 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20349 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20350 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20350 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20351 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20351 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20352 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20352 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_load(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20353 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20353 != Fp::invalid());
        extern_args[0] = x20347;
        extern_args[1] = x20348;
        extern_args[2] = x20349;
        extern_args[3] = x20350;
        extern_args[4] = x20351;
        extern_args[5] = x20352;
        extern_args[6] = x20353;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20354 = arg2[112 * steps + ((cycle - 0) & mask)];
    assert(x20354 != Fp::invalid());
    if (x20354 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20355 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20355 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20356 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20357 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20357 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20358 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20358 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20359 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20359 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20360 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20360 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20361 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20361 != Fp::invalid());
        extern_args[0] = x20355;
        extern_args[1] = x20356;
        extern_args[2] = x20357;
        extern_args[3] = x20358;
        extern_args[4] = x20359;
        extern_args[5] = x20360;
        extern_args[6] = x20361;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20362 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20362 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20363 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20363 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20364 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20364 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20365 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20365 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20366 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20367 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20367 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/sha_main(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20368 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20368 != Fp::invalid());
        extern_args[0] = x20362;
        extern_args[1] = x20363;
        extern_args[2] = x20364;
        extern_args[3] = x20365;
        extern_args[4] = x20366;
        extern_args[5] = x20367;
        extern_args[6] = x20368;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20369 = arg2[114 * steps + ((cycle - 0) & mask)];
    assert(x20369 != Fp::invalid());
    if (x20369 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20370 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20370 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20371 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20371 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20372 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20372 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20373 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20373 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20374 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20374 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20375 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20375 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20376 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20376 != Fp::invalid());
        extern_args[0] = x20370;
        extern_args[1] = x20371;
        extern_args[2] = x20372;
        extern_args[3] = x20373;
        extern_args[4] = x20374;
        extern_args[5] = x20375;
        extern_args[6] = x20376;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20377 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20377 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20378 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20378 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20379 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20379 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20380 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20380 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20381 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20381 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20382 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20382 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20383 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20383 != Fp::invalid());
        extern_args[0] = x20377;
        extern_args[1] = x20378;
        extern_args[2] = x20379;
        extern_args[3] = x20380;
        extern_args[4] = x20381;
        extern_args[5] = x20382;
        extern_args[6] = x20383;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20384 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20384 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20385 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20385 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20386 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20386 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20387 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20387 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20388 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20388 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20389 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20389 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20390 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20390 != Fp::invalid());
        extern_args[0] = x20384;
        extern_args[1] = x20385;
        extern_args[2] = x20386;
        extern_args[3] = x20387;
        extern_args[4] = x20388;
        extern_args[5] = x20389;
        extern_args[6] = x20390;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20391 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20391 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20392 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20392 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20393 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20393 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20394 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20394 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20395 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20395 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20396 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20396 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/ecall_copy_in(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20397 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20397 != Fp::invalid());
        extern_args[0] = x20391;
        extern_args[1] = x20392;
        extern_args[2] = x20393;
        extern_args[3] = x20394;
        extern_args[4] = x20395;
        extern_args[5] = x20396;
        extern_args[6] = x20397;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20398 = arg2[115 * steps + ((cycle - 0) & mask)];
    assert(x20398 != Fp::invalid());
    if (x20398 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20399 = arg2[117 * steps + ((cycle - 0) & mask)];
        assert(x20399 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20400 = arg2[118 * steps + ((cycle - 0) & mask)];
        assert(x20400 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20401 = arg2[119 * steps + ((cycle - 0) & mask)];
        assert(x20401 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20402 = arg2[120 * steps + ((cycle - 0) & mask)];
        assert(x20402 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20403 = arg2[121 * steps + ((cycle - 0) & mask)];
        assert(x20403 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20404 = arg2[122 * steps + ((cycle - 0) & mask)];
        assert(x20404 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20405 = arg2[123 * steps + ((cycle - 0) & mask)];
        assert(x20405 != Fp::invalid());
        extern_args[0] = x20399;
        extern_args[1] = x20400;
        extern_args[2] = x20401;
        extern_args[3] = x20402;
        extern_args[4] = x20403;
        extern_args[5] = x20404;
        extern_args[6] = x20405;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20406 = arg2[124 * steps + ((cycle - 0) & mask)];
        assert(x20406 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20407 = arg2[125 * steps + ((cycle - 0) & mask)];
        assert(x20407 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20408 = arg2[126 * steps + ((cycle - 0) & mask)];
        assert(x20408 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20409 = arg2[127 * steps + ((cycle - 0) & mask)];
        assert(x20409 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20410 = arg2[128 * steps + ((cycle - 0) & mask)];
        assert(x20410 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20411 = arg2[129 * steps + ((cycle - 0) & mask)];
        assert(x20411 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20412 = arg2[130 * steps + ((cycle - 0) & mask)];
        assert(x20412 != Fp::invalid());
        extern_args[0] = x20406;
        extern_args[1] = x20407;
        extern_args[2] = x20408;
        extern_args[3] = x20409;
        extern_args[4] = x20410;
        extern_args[5] = x20411;
        extern_args[6] = x20412;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20413 = arg2[131 * steps + ((cycle - 0) & mask)];
        assert(x20413 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20414 = arg2[132 * steps + ((cycle - 0) & mask)];
        assert(x20414 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20415 = arg2[133 * steps + ((cycle - 0) & mask)];
        assert(x20415 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20416 = arg2[134 * steps + ((cycle - 0) & mask)];
        assert(x20416 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20417 = arg2[135 * steps + ((cycle - 0) & mask)];
        assert(x20417 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20418 = arg2[136 * steps + ((cycle - 0) & mask)];
        assert(x20418 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20419 = arg2[137 * steps + ((cycle - 0) & mask)];
        assert(x20419 != Fp::invalid());
        extern_args[0] = x20413;
        extern_args[1] = x20414;
        extern_args[2] = x20415;
        extern_args[3] = x20416;
        extern_args[4] = x20417;
        extern_args[5] = x20418;
        extern_args[6] = x20419;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/addr(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20420 = arg2[138 * steps + ((cycle - 0) & mask)];
        assert(x20420 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/cycle(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20421 = arg2[139 * steps + ((cycle - 0) & mask)];
        assert(x20421 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/mem_op(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20422 = arg2[140 * steps + ((cycle - 0) & mask)];
        assert(x20422 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20423 = arg2[141 * steps + ((cycle - 0) & mask)];
        assert(x20423 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20424 = arg2[142 * steps + ((cycle - 0) & mask)];
        assert(x20424 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20425 = arg2[143 * steps + ((cycle - 0) & mask)];
        assert(x20425 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/major_mux(Mux)/big_int(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/data(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20426 = arg2[144 * steps + ((cycle - 0) & mask)];
        assert(x20426 != Fp::invalid());
        extern_args[0] = x20420;
        extern_args[1] = x20421;
        extern_args[2] = x20422;
        extern_args[3] = x20423;
        extern_args[4] = x20424;
        extern_args[5] = x20425;
        extern_args[6] = x20426;
        extern_plonkWrite_ram(ctx, cycle, "ram", extern_args, extern_outs);
      }
    }
  }
}
